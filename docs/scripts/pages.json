[{"name":"Base","description":"org.codroid.textmate.grammar.IncludeReferenceKind.Base","location":"codroid-textmate/org.codroid.textmate.grammar/-include-reference-kind/-base/index.html","searchKeys":["Base","Base","org.codroid.textmate.grammar.IncludeReferenceKind.Base"]},{"name":"RelativeReference","description":"org.codroid.textmate.grammar.IncludeReferenceKind.RelativeReference","location":"codroid-textmate/org.codroid.textmate.grammar/-include-reference-kind/-relative-reference/index.html","searchKeys":["RelativeReference","RelativeReference","org.codroid.textmate.grammar.IncludeReferenceKind.RelativeReference"]},{"name":"Self","description":"org.codroid.textmate.grammar.IncludeReferenceKind.Self","location":"codroid-textmate/org.codroid.textmate.grammar/-include-reference-kind/-self/index.html","searchKeys":["Self","Self","org.codroid.textmate.grammar.IncludeReferenceKind.Self"]},{"name":"TopLevelReference","description":"org.codroid.textmate.grammar.IncludeReferenceKind.TopLevelReference","location":"codroid-textmate/org.codroid.textmate.grammar/-include-reference-kind/-top-level-reference/index.html","searchKeys":["TopLevelReference","TopLevelReference","org.codroid.textmate.grammar.IncludeReferenceKind.TopLevelReference"]},{"name":"TopLevelRepositoryReference","description":"org.codroid.textmate.grammar.IncludeReferenceKind.TopLevelRepositoryReference","location":"codroid-textmate/org.codroid.textmate.grammar/-include-reference-kind/-top-level-repository-reference/index.html","searchKeys":["TopLevelRepositoryReference","TopLevelRepositoryReference","org.codroid.textmate.grammar.IncludeReferenceKind.TopLevelRepositoryReference"]},{"name":"abstract class Locatable","description":"org.codroid.textmate.grammar.Locatable","location":"codroid-textmate/org.codroid.textmate.grammar/-locatable/index.html","searchKeys":["Locatable","abstract class Locatable","org.codroid.textmate.grammar.Locatable"]},{"name":"abstract class RegularExp(pattern: String)","description":"org.codroid.textmate.regex.RegularExp","location":"codroid-textmate/org.codroid.textmate.regex/-regular-exp/index.html","searchKeys":["RegularExp","abstract class RegularExp(pattern: String)","org.codroid.textmate.regex.RegularExp"]},{"name":"abstract class Rule","description":"org.codroid.textmate.rule.Rule","location":"codroid-textmate/org.codroid.textmate.rule/-rule/index.html","searchKeys":["Rule","abstract class Rule","org.codroid.textmate.rule.Rule"]},{"name":"abstract fun <T : Rule> registerRule(factor: (id: RuleId) -> T): T","description":"org.codroid.textmate.rule.RuleRegistry.registerRule","location":"codroid-textmate/org.codroid.textmate.rule/-rule-registry/register-rule.html","searchKeys":["registerRule","abstract fun <T : Rule> registerRule(factor: (id: RuleId) -> T): T","org.codroid.textmate.rule.RuleRegistry.registerRule"]},{"name":"abstract fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","description":"org.codroid.textmate.rule.Rule.collectPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-rule/collect-patterns.html","searchKeys":["collectPatterns","abstract fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","org.codroid.textmate.rule.Rule.collectPatterns"]},{"name":"abstract fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","description":"org.codroid.textmate.rule.Rule.compile","location":"codroid-textmate/org.codroid.textmate.rule/-rule/compile.html","searchKeys":["compile","abstract fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","org.codroid.textmate.rule.Rule.compile"]},{"name":"abstract fun compile(pattern: String): RegularExp","description":"org.codroid.textmate.regex.RegexLib.compile","location":"codroid-textmate/org.codroid.textmate.regex/-regex-lib/compile.html","searchKeys":["compile","abstract fun compile(pattern: String): RegularExp","org.codroid.textmate.regex.RegexLib.compile"]},{"name":"abstract fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","description":"org.codroid.textmate.rule.Rule.compileAG","location":"codroid-textmate/org.codroid.textmate.rule/-rule/compile-a-g.html","searchKeys":["compileAG","abstract fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","org.codroid.textmate.rule.Rule.compileAG"]},{"name":"abstract fun containsMatchIn(input: String): Boolean","description":"org.codroid.textmate.regex.RegularExp.containsMatchIn","location":"codroid-textmate/org.codroid.textmate.regex/-regular-exp/contains-match-in.html","searchKeys":["containsMatchIn","abstract fun containsMatchIn(input: String): Boolean","org.codroid.textmate.regex.RegularExp.containsMatchIn"]},{"name":"abstract fun createScanner(source: Array<String>): RegexScanner","description":"org.codroid.textmate.regex.RegexLib.createScanner","location":"codroid-textmate/org.codroid.textmate.regex/-regex-lib/create-scanner.html","searchKeys":["createScanner","abstract fun createScanner(source: Array<String>): RegexScanner","org.codroid.textmate.regex.RegexLib.createScanner"]},{"name":"abstract fun dispose()","description":"org.codroid.textmate.regex.RegexScanner.dispose","location":"codroid-textmate/org.codroid.textmate.regex/-regex-scanner/dispose.html","searchKeys":["dispose","abstract fun dispose()","org.codroid.textmate.regex.RegexScanner.dispose"]},{"name":"abstract fun dispose()","description":"org.codroid.textmate.rule.Rule.dispose","location":"codroid-textmate/org.codroid.textmate.rule/-rule/dispose.html","searchKeys":["dispose","abstract fun dispose()","org.codroid.textmate.rule.Rule.dispose"]},{"name":"abstract fun findNextMatchSync(string: String, startPosition: Int): RegexMatch?","description":"org.codroid.textmate.regex.RegexScanner.findNextMatchSync","location":"codroid-textmate/org.codroid.textmate.regex/-regex-scanner/find-next-match-sync.html","searchKeys":["findNextMatchSync","abstract fun findNextMatchSync(string: String, startPosition: Int): RegexMatch?","org.codroid.textmate.regex.RegexScanner.findNextMatchSync"]},{"name":"abstract fun getDefaults(): StyleAttributes","description":"org.codroid.textmate.theme.ThemeProvider.getDefaults","location":"codroid-textmate/org.codroid.textmate.theme/-theme-provider/get-defaults.html","searchKeys":["getDefaults","abstract fun getDefaults(): StyleAttributes","org.codroid.textmate.theme.ThemeProvider.getDefaults"]},{"name":"abstract fun getExternalGrammar(scopeName: ScopeName, repository: RawRepository?): RawGrammar?","description":"org.codroid.textmate.rule.GrammarRegistry.getExternalGrammar","location":"codroid-textmate/org.codroid.textmate.rule/-grammar-registry/get-external-grammar.html","searchKeys":["getExternalGrammar","abstract fun getExternalGrammar(scopeName: ScopeName, repository: RawRepository?): RawGrammar?","org.codroid.textmate.rule.GrammarRegistry.getExternalGrammar"]},{"name":"abstract fun getRule(ruleId: RuleId): Rule?","description":"org.codroid.textmate.rule.RuleRegistry.getRule","location":"codroid-textmate/org.codroid.textmate.rule/-rule-registry/get-rule.html","searchKeys":["getRule","abstract fun getRule(ruleId: RuleId): Rule?","org.codroid.textmate.rule.RuleRegistry.getRule"]},{"name":"abstract fun injections(targetScope: ScopeName): Array<ScopeName>?","description":"org.codroid.textmate.grammar.GrammarRepository.injections","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar-repository/injections.html","searchKeys":["injections","abstract fun injections(targetScope: ScopeName): Array<ScopeName>?","org.codroid.textmate.grammar.GrammarRepository.injections"]},{"name":"abstract fun lookup(scopeName: ScopeName): RawGrammar?","description":"org.codroid.textmate.grammar.GrammarRepository.lookup","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar-repository/lookup.html","searchKeys":["lookup","abstract fun lookup(scopeName: ScopeName): RawGrammar?","org.codroid.textmate.grammar.GrammarRepository.lookup"]},{"name":"abstract fun replace(origin: String, transform: (result: MatchResult) -> String): String","description":"org.codroid.textmate.regex.RegularExp.replace","location":"codroid-textmate/org.codroid.textmate.regex/-regular-exp/replace.html","searchKeys":["replace","abstract fun replace(origin: String, transform: (result: MatchResult) -> String): String","org.codroid.textmate.regex.RegularExp.replace"]},{"name":"abstract fun search(input: String, startPosition: Int): MatchResult?","description":"org.codroid.textmate.regex.RegularExp.search","location":"codroid-textmate/org.codroid.textmate.regex/-regular-exp/search.html","searchKeys":["search","abstract fun search(input: String, startPosition: Int): MatchResult?","org.codroid.textmate.regex.RegularExp.search"]},{"name":"abstract fun themeMatch(scopePath: ScopeStack): StyleAttributes?","description":"org.codroid.textmate.theme.ThemeProvider.themeMatch","location":"codroid-textmate/org.codroid.textmate.theme/-theme-provider/theme-match.html","searchKeys":["themeMatch","abstract fun themeMatch(scopePath: ScopeStack): StyleAttributes?","org.codroid.textmate.theme.ThemeProvider.themeMatch"]},{"name":"abstract fun toKey(): String","description":"org.codroid.textmate.grammar.AbsoluteRuleReference.toKey","location":"codroid-textmate/org.codroid.textmate.grammar/-absolute-rule-reference/to-key.html","searchKeys":["toKey","abstract fun toKey(): String","org.codroid.textmate.grammar.AbsoluteRuleReference.toKey"]},{"name":"abstract fun tokenizeLine(lineText: String, prevState: StateStack?, timeLimit: Int?): TokenizeLineResult","description":"org.codroid.textmate.Tokenizer.tokenizeLine","location":"codroid-textmate/org.codroid.textmate/-tokenizer/tokenize-line.html","searchKeys":["tokenizeLine","abstract fun tokenizeLine(lineText: String, prevState: StateStack?, timeLimit: Int?): TokenizeLineResult","org.codroid.textmate.Tokenizer.tokenizeLine"]},{"name":"abstract fun tokenizeLine2(lineText: String, prevState: StateStack?, timeLimit: Int?): TokenizeLineResult2","description":"org.codroid.textmate.Tokenizer.tokenizeLine2","location":"codroid-textmate/org.codroid.textmate/-tokenizer/tokenize-line2.html","searchKeys":["tokenizeLine2","abstract fun tokenizeLine2(lineText: String, prevState: StateStack?, timeLimit: Int?): TokenizeLineResult2","org.codroid.textmate.Tokenizer.tokenizeLine2"]},{"name":"abstract operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.StackElementDef.equals","location":"codroid-textmate/org.codroid.textmate/-stack-element-def/equals.html","searchKeys":["equals","abstract operator override fun equals(other: Any?): Boolean","org.codroid.textmate.StackElementDef.equals"]},{"name":"abstract val contentName: String?","description":"org.codroid.textmate.rule.Rule.contentName","location":"codroid-textmate/org.codroid.textmate.rule/-rule/content-name.html","searchKeys":["contentName","abstract val contentName: String?","org.codroid.textmate.rule.Rule.contentName"]},{"name":"abstract val contentNameIsCapturing: Boolean","description":"org.codroid.textmate.rule.Rule.contentNameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-rule/content-name-is-capturing.html","searchKeys":["contentNameIsCapturing","abstract val contentNameIsCapturing: Boolean","org.codroid.textmate.rule.Rule.contentNameIsCapturing"]},{"name":"abstract val depth: Int","description":"org.codroid.textmate.StackElementDef.depth","location":"codroid-textmate/org.codroid.textmate/-stack-element-def/depth.html","searchKeys":["depth","abstract val depth: Int","org.codroid.textmate.StackElementDef.depth"]},{"name":"abstract val hasMissingPatterns: Boolean","description":"org.codroid.textmate.rule.WithPatternRule.hasMissingPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-with-pattern-rule/has-missing-patterns.html","searchKeys":["hasMissingPatterns","abstract val hasMissingPatterns: Boolean","org.codroid.textmate.rule.WithPatternRule.hasMissingPatterns"]},{"name":"abstract val id: RuleId","description":"org.codroid.textmate.rule.Rule.id","location":"codroid-textmate/org.codroid.textmate.rule/-rule/id.html","searchKeys":["id","abstract val id: RuleId","org.codroid.textmate.rule.Rule.id"]},{"name":"abstract val index: Int","description":"org.codroid.textmate.regex.RegexMatch.index","location":"codroid-textmate/org.codroid.textmate.regex/-regex-match/--index--.html","searchKeys":["index","abstract val index: Int","org.codroid.textmate.regex.RegexMatch.index"]},{"name":"abstract val kind: IncludeReferenceKind","description":"org.codroid.textmate.grammar.IncludeReference.kind","location":"codroid-textmate/org.codroid.textmate.grammar/-include-reference/kind.html","searchKeys":["kind","abstract val kind: IncludeReferenceKind","org.codroid.textmate.grammar.IncludeReference.kind"]},{"name":"abstract val location: Location?","description":"org.codroid.textmate.grammar.Locatable.location","location":"codroid-textmate/org.codroid.textmate.grammar/-locatable/location.html","searchKeys":["location","abstract val location: Location?","org.codroid.textmate.grammar.Locatable.location"]},{"name":"abstract val name: String?","description":"org.codroid.textmate.rule.Rule.name","location":"codroid-textmate/org.codroid.textmate.rule/-rule/name.html","searchKeys":["name","abstract val name: String?","org.codroid.textmate.rule.Rule.name"]},{"name":"abstract val nameIsCapturing: Boolean","description":"org.codroid.textmate.rule.Rule.nameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-rule/name-is-capturing.html","searchKeys":["nameIsCapturing","abstract val nameIsCapturing: Boolean","org.codroid.textmate.rule.Rule.nameIsCapturing"]},{"name":"abstract val patterns: Array<RuleId>","description":"org.codroid.textmate.rule.WithPatternRule.patterns","location":"codroid-textmate/org.codroid.textmate.rule/-with-pattern-rule/patterns.html","searchKeys":["patterns","abstract val patterns: Array<RuleId>","org.codroid.textmate.rule.WithPatternRule.patterns"]},{"name":"abstract val ranges: Array<IntRange>","description":"org.codroid.textmate.regex.RegexMatch.ranges","location":"codroid-textmate/org.codroid.textmate.regex/-regex-match/ranges.html","searchKeys":["ranges","abstract val ranges: Array<IntRange>","org.codroid.textmate.regex.RegexMatch.ranges"]},{"name":"abstract val scopeName: ScopeName","description":"org.codroid.textmate.grammar.AbsoluteRuleReference.scopeName","location":"codroid-textmate/org.codroid.textmate.grammar/-absolute-rule-reference/scope-name.html","searchKeys":["scopeName","abstract val scopeName: ScopeName","org.codroid.textmate.grammar.AbsoluteRuleReference.scopeName"]},{"name":"abstract val scopeName: ScopeName","description":"org.codroid.textmate.grammar.TopLevel.scopeName","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level/scope-name.html","searchKeys":["scopeName","abstract val scopeName: ScopeName","org.codroid.textmate.grammar.TopLevel.scopeName"]},{"name":"abstract var stackElementBrand: Unit","description":"org.codroid.textmate.StackElementDef.stackElementBrand","location":"codroid-textmate/org.codroid.textmate/-stack-element-def/stack-element-brand.html","searchKeys":["stackElementBrand","abstract var stackElementBrand: Unit","org.codroid.textmate.StackElementDef.stackElementBrand"]},{"name":"class AttributedScopeStack(parent: AttributedScopeStack?, scopePath: ScopeStack, val tokenAttributes: EncodedToken)","description":"org.codroid.textmate.grammar.AttributedScopeStack","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/index.html","searchKeys":["AttributedScopeStack","class AttributedScopeStack(parent: AttributedScopeStack?, scopePath: ScopeStack, val tokenAttributes: EncodedToken)","org.codroid.textmate.grammar.AttributedScopeStack"]},{"name":"class BalancedBracketSelectors(balancedBracketScopes: Array<String>, unbalancedBracketScopes: Array<String>)","description":"org.codroid.textmate.grammar.BalancedBracketSelectors","location":"codroid-textmate/org.codroid.textmate.grammar/-balanced-bracket-selectors/index.html","searchKeys":["BalancedBracketSelectors","class BalancedBracketSelectors(balancedBracketScopes: Array<String>, unbalancedBracketScopes: Array<String>)","org.codroid.textmate.grammar.BalancedBracketSelectors"]},{"name":"class BaseReference : IncludeReference","description":"org.codroid.textmate.grammar.BaseReference","location":"codroid-textmate/org.codroid.textmate.grammar/-base-reference/index.html","searchKeys":["BaseReference","class BaseReference : IncludeReference","org.codroid.textmate.grammar.BaseReference"]},{"name":"class BasicScopesAttributeProvider(initialLanguageId: Int, embeddedLanguages: EmbeddedLanguagesMap? = null)","description":"org.codroid.textmate.grammar.BasicScopesAttributeProvider","location":"codroid-textmate/org.codroid.textmate.grammar/-basic-scopes-attribute-provider/index.html","searchKeys":["BasicScopesAttributeProvider","class BasicScopesAttributeProvider(initialLanguageId: Int, embeddedLanguages: EmbeddedLanguagesMap? = null)","org.codroid.textmate.grammar.BasicScopesAttributeProvider"]},{"name":"class BeginEndRule(val id: RuleId, val name: String?, val contentName: String?, begin: String, val beginCaptures: Array<CaptureRule?>, end: String? = null, val endCaptures: Array<CaptureRule?>, val applyEndPatternLast: Boolean = false, patterns: CompilePatternsResult) : Rule, WithPatternRule","description":"org.codroid.textmate.rule.BeginEndRule","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/index.html","searchKeys":["BeginEndRule","class BeginEndRule(val id: RuleId, val name: String?, val contentName: String?, begin: String, val beginCaptures: Array<CaptureRule?>, end: String? = null, val endCaptures: Array<CaptureRule?>, val applyEndPatternLast: Boolean = false, patterns: CompilePatternsResult) : Rule, WithPatternRule","org.codroid.textmate.rule.BeginEndRule"]},{"name":"class BeginWhileRule(val id: RuleId, val name: String?, val contentName: String?, begin: String, val beginCaptures: Array<CaptureRule?>, _while: String, val whileCaptures: Array<CaptureRule?>, patterns: CompilePatternsResult) : Rule, WithPatternRule","description":"org.codroid.textmate.rule.BeginWhileRule","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/index.html","searchKeys":["BeginWhileRule","class BeginWhileRule(val id: RuleId, val name: String?, val contentName: String?, begin: String, val beginCaptures: Array<CaptureRule?>, _while: String, val whileCaptures: Array<CaptureRule?>, patterns: CompilePatternsResult) : Rule, WithPatternRule","org.codroid.textmate.rule.BeginWhileRule"]},{"name":"class CachedFn<K, V>(fn: (key: K) -> V)","description":"org.codroid.textmate.CachedFn","location":"codroid-textmate/org.codroid.textmate/-cached-fn/index.html","searchKeys":["CachedFn","class CachedFn<K, V>(fn: (key: K) -> V)","org.codroid.textmate.CachedFn"]},{"name":"class CaptureRule(val id: RuleId, val name: String?, val contentName: String?, val retokenizeCapturedWithRuleId: RuleId) : Rule","description":"org.codroid.textmate.rule.CaptureRule","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/index.html","searchKeys":["CaptureRule","class CaptureRule(val id: RuleId, val name: String?, val contentName: String?, val retokenizeCapturedWithRuleId: RuleId) : Rule","org.codroid.textmate.rule.CaptureRule"]},{"name":"class ColorMap(colorMap: Array<String>? = null)","description":"org.codroid.textmate.theme.ColorMap","location":"codroid-textmate/org.codroid.textmate.theme/-color-map/index.html","searchKeys":["ColorMap","class ColorMap(colorMap: Array<String>? = null)","org.codroid.textmate.theme.ColorMap"]},{"name":"class CompiledRule(onigLib: RegexLib, regExps: Array<String>, rules: Array<RuleId>)","description":"org.codroid.textmate.rule.CompiledRule","location":"codroid-textmate/org.codroid.textmate.rule/-compiled-rule/index.html","searchKeys":["CompiledRule","class CompiledRule(onigLib: RegexLib, regExps: Array<String>, rules: Array<RuleId>)","org.codroid.textmate.rule.CompiledRule"]},{"name":"class ContextWithRepository(var baseGrammar: RawGrammar, val selfGrammar: RawGrammar, val repository: RawRepository? = null) : Context","description":"org.codroid.textmate.grammar.ContextWithRepository","location":"codroid-textmate/org.codroid.textmate.grammar/-context-with-repository/index.html","searchKeys":["ContextWithRepository","class ContextWithRepository(var baseGrammar: RawGrammar, val selfGrammar: RawGrammar, val repository: RawRepository? = null) : Context","org.codroid.textmate.grammar.ContextWithRepository"]},{"name":"class ExternalReferenceCollector","description":"org.codroid.textmate.grammar.ExternalReferenceCollector","location":"codroid-textmate/org.codroid.textmate.grammar/-external-reference-collector/index.html","searchKeys":["ExternalReferenceCollector","class ExternalReferenceCollector","org.codroid.textmate.grammar.ExternalReferenceCollector"]},{"name":"class Grammar(rootScopeName: ScopeName, grammar: RawGrammar, initialLanguages: Int, embeddedLanguages: EmbeddedLanguagesMap?, tokenTypes: TokenTypeMap?, balancedBracketSelectors: BalancedBracketSelectors?, grammarRepository: GrammarReposThemeProvider, regexLib: RegexLib) : Tokenizer, RuleFactoryHelper, RegexLib, RuleRegistryRegexLib, Cloneable","description":"org.codroid.textmate.grammar.Grammar","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/index.html","searchKeys":["Grammar","class Grammar(rootScopeName: ScopeName, grammar: RawGrammar, initialLanguages: Int, embeddedLanguages: EmbeddedLanguagesMap?, tokenTypes: TokenTypeMap?, balancedBracketSelectors: BalancedBracketSelectors?, grammarRepository: GrammarReposThemeProvider, regexLib: RegexLib) : Tokenizer, RuleFactoryHelper, RegexLib, RuleRegistryRegexLib, Cloneable","org.codroid.textmate.grammar.Grammar"]},{"name":"class IncludeOnlyRule(val id: RuleId, val name: String?, val contentName: String?, patterns: CompilePatternsResult) : Rule, WithPatternRule","description":"org.codroid.textmate.rule.IncludeOnlyRule","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/index.html","searchKeys":["IncludeOnlyRule","class IncludeOnlyRule(val id: RuleId, val name: String?, val contentName: String?, patterns: CompilePatternsResult) : Rule, WithPatternRule","org.codroid.textmate.rule.IncludeOnlyRule"]},{"name":"class LineTokens(val emitBinaryTokens: Boolean, lineText: String, val tokenTypeOverride: Array<TokenTypeMatcher>, val balancedBracketSelectors: BalancedBracketSelectors? = null)","description":"org.codroid.textmate.grammar.LineTokens","location":"codroid-textmate/org.codroid.textmate.grammar/-line-tokens/index.html","searchKeys":["LineTokens","class LineTokens(val emitBinaryTokens: Boolean, lineText: String, val tokenTypeOverride: Array<TokenTypeMatcher>, val balancedBracketSelectors: BalancedBracketSelectors? = null)","org.codroid.textmate.grammar.LineTokens"]},{"name":"class MatchInjectionsResult(val priorityMatch: Boolean, val captureIndices: Array<IntRange>, val matchedRuleId: RuleId) : MatchResult","description":"org.codroid.textmate.grammar.tokenize.MatchInjectionsResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-injections-result/index.html","searchKeys":["MatchInjectionsResult","class MatchInjectionsResult(val priorityMatch: Boolean, val captureIndices: Array<IntRange>, val matchedRuleId: RuleId) : MatchResult","org.codroid.textmate.grammar.tokenize.MatchInjectionsResult"]},{"name":"class MatchRule(val id: RuleId, val name: String?, val contentName: String? = null, match: String, val captures: Array<CaptureRule?>) : Rule","description":"org.codroid.textmate.rule.MatchRule","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/index.html","searchKeys":["MatchRule","class MatchRule(val id: RuleId, val name: String?, val contentName: String? = null, match: String, val captures: Array<CaptureRule?>) : Rule","org.codroid.textmate.rule.MatchRule"]},{"name":"class Matchers<T>(selector: String, val matchesName: (names: List<String>, matcherInput: T) -> Boolean)","description":"org.codroid.textmate.Matchers","location":"codroid-textmate/org.codroid.textmate/-matchers/index.html","searchKeys":["Matchers","class Matchers<T>(selector: String, val matchesName: (names: List<String>, matcherInput: T) -> Boolean)","org.codroid.textmate.Matchers"]},{"name":"class RegExpSource(regExpSource: String, var ruleId: RuleId) : Cloneable","description":"org.codroid.textmate.rule.RegExpSource","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/index.html","searchKeys":["RegExpSource","class RegExpSource(regExpSource: String, var ruleId: RuleId) : Cloneable","org.codroid.textmate.rule.RegExpSource"]},{"name":"class RegExpSourceList(val items: MutableList<RegExpSource> = mutableListOf(), var hasAnchors: Boolean = false, var cached: CompiledRule? = null, val anchorCache: RegExpSourceListAnchorCache = RegExpSourceListAnchorCache())","description":"org.codroid.textmate.rule.RegExpSourceList","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/index.html","searchKeys":["RegExpSourceList","class RegExpSourceList(val items: MutableList<RegExpSource> = mutableListOf(), var hasAnchors: Boolean = false, var cached: CompiledRule? = null, val anchorCache: RegExpSourceListAnchorCache = RegExpSourceListAnchorCache())","org.codroid.textmate.rule.RegExpSourceList"]},{"name":"class Registry(val options: RegistryOptions)","description":"org.codroid.textmate.Registry","location":"codroid-textmate/org.codroid.textmate/-registry/index.html","searchKeys":["Registry","class Registry(val options: RegistryOptions)","org.codroid.textmate.Registry"]},{"name":"class RelativeReference(val ruleName: ScopeName) : IncludeReference","description":"org.codroid.textmate.grammar.RelativeReference","location":"codroid-textmate/org.codroid.textmate.grammar/-relative-reference/index.html","searchKeys":["RelativeReference","class RelativeReference(val ruleName: ScopeName) : IncludeReference","org.codroid.textmate.grammar.RelativeReference"]},{"name":"class RuleId(var id: Int) : Cloneable","description":"org.codroid.textmate.rule.RuleId","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/index.html","searchKeys":["RuleId","class RuleId(var id: Int) : Cloneable","org.codroid.textmate.rule.RuleId"]},{"name":"class ScopeDependencyProcessor(repo: GrammarRepository, initialScopeName: ScopeName)","description":"org.codroid.textmate.grammar.ScopeDependencyProcessor","location":"codroid-textmate/org.codroid.textmate.grammar/-scope-dependency-processor/index.html","searchKeys":["ScopeDependencyProcessor","class ScopeDependencyProcessor(repo: GrammarRepository, initialScopeName: ScopeName)","org.codroid.textmate.grammar.ScopeDependencyProcessor"]},{"name":"class ScopeMatcher<V>(values: Map<ScopeName, V>? = null)","description":"org.codroid.textmate.grammar.ScopeMatcher","location":"codroid-textmate/org.codroid.textmate.grammar/-scope-matcher/index.html","searchKeys":["ScopeMatcher","class ScopeMatcher<V>(values: Map<ScopeName, V>? = null)","org.codroid.textmate.grammar.ScopeMatcher"]},{"name":"class ScopeStack(val parent: ScopeStack?, val scopeName: ScopeName) : Cloneable","description":"org.codroid.textmate.theme.ScopeStack","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/index.html","searchKeys":["ScopeStack","class ScopeStack(val parent: ScopeStack?, val scopeName: ScopeName) : Cloneable","org.codroid.textmate.theme.ScopeStack"]},{"name":"class SelfReference : IncludeReference","description":"org.codroid.textmate.grammar.SelfReference","location":"codroid-textmate/org.codroid.textmate.grammar/-self-reference/index.html","searchKeys":["SelfReference","class SelfReference : IncludeReference","org.codroid.textmate.grammar.SelfReference"]},{"name":"class StandardRegex : RegexLib","description":"org.codroid.textmate.regex.StandardRegex","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex/index.html","searchKeys":["StandardRegex","class StandardRegex : RegexLib","org.codroid.textmate.regex.StandardRegex"]},{"name":"class StandardRegexMatch(result: MatchResult, source: String) : RegexMatch","description":"org.codroid.textmate.regex.StandardRegexMatch","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex-match/index.html","searchKeys":["StandardRegexMatch","class StandardRegexMatch(result: MatchResult, source: String) : RegexMatch","org.codroid.textmate.regex.StandardRegexMatch"]},{"name":"class StandardRegexScanner(patterns: Array<String>) : RegexScanner","description":"org.codroid.textmate.regex.StandardRegexScanner","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex-scanner/index.html","searchKeys":["StandardRegexScanner","class StandardRegexScanner(patterns: Array<String>) : RegexScanner","org.codroid.textmate.regex.StandardRegexScanner"]},{"name":"class StandardRegularExp(pattern: String) : RegularExp","description":"org.codroid.textmate.regex.StandardRegularExp","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regular-exp/index.html","searchKeys":["StandardRegularExp","class StandardRegularExp(pattern: String) : RegularExp","org.codroid.textmate.regex.StandardRegularExp"]},{"name":"class StandardSearcher(patterns: Array<String>)","description":"org.codroid.textmate.regex.StandardSearcher","location":"codroid-textmate/org.codroid.textmate.regex/-standard-searcher/index.html","searchKeys":["StandardSearcher","class StandardSearcher(patterns: Array<String>)","org.codroid.textmate.regex.StandardSearcher"]},{"name":"class StateStack(val parent: StateStack?, val ruleId: RuleId, var enterPos: Int, var anchorPos: Int, val beginRuleCapturedEOL: Boolean, val endRule: String?, val nameScopesList: AttributedScopeStack, val contentNameScopesList: AttributedScopeStack) : StackElementDef","description":"org.codroid.textmate.grammar.StateStack","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/index.html","searchKeys":["StateStack","class StateStack(val parent: StateStack?, val ruleId: RuleId, var enterPos: Int, var anchorPos: Int, val beginRuleCapturedEOL: Boolean, val endRule: String?, val nameScopesList: AttributedScopeStack, val contentNameScopesList: AttributedScopeStack) : StackElementDef","org.codroid.textmate.grammar.StateStack"]},{"name":"class SyncRegistry(var theme: Theme, val regexLib: RegexLib) : GrammarReposThemeProvider","description":"org.codroid.textmate.SyncRegistry","location":"codroid-textmate/org.codroid.textmate/-sync-registry/index.html","searchKeys":["SyncRegistry","class SyncRegistry(var theme: Theme, val regexLib: RegexLib) : GrammarReposThemeProvider","org.codroid.textmate.SyncRegistry"]},{"name":"class TextMateException(msg: String) : Exception","description":"org.codroid.textmate.exceptions.TextMateException","location":"codroid-textmate/org.codroid.textmate.exceptions/-text-mate-exception/index.html","searchKeys":["TextMateException","class TextMateException(msg: String) : Exception","org.codroid.textmate.exceptions.TextMateException"]},{"name":"class Theme(colorMap: ColorMap, defaults: StyleAttributes, root: ThemeTrieElement)","description":"org.codroid.textmate.theme.Theme","location":"codroid-textmate/org.codroid.textmate.theme/-theme/index.html","searchKeys":["Theme","class Theme(colorMap: ColorMap, defaults: StyleAttributes, root: ThemeTrieElement)","org.codroid.textmate.theme.Theme"]},{"name":"class ThemeTrieElement(mainRule: ThemeTrieElementRule, rulesWithParentScopes: MutableList<ThemeTrieElementRule> = mutableListOf(), children: TrieChildrenMap = TrieChildrenMap())","description":"org.codroid.textmate.theme.ThemeTrieElement","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element/index.html","searchKeys":["ThemeTrieElement","class ThemeTrieElement(mainRule: ThemeTrieElementRule, rulesWithParentScopes: MutableList<ThemeTrieElementRule> = mutableListOf(), children: TrieChildrenMap = TrieChildrenMap())","org.codroid.textmate.theme.ThemeTrieElement"]},{"name":"class ThemeTrieElementRule(var scopeDepth: Int, val parentScopes: List<ScopeName>?, var fontStyle: FontStyle, var foreground: UInt, var background: UInt) : Cloneable, Comparable<ThemeTrieElementRule> ","description":"org.codroid.textmate.theme.ThemeTrieElementRule","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/index.html","searchKeys":["ThemeTrieElementRule","class ThemeTrieElementRule(var scopeDepth: Int, val parentScopes: List<ScopeName>?, var fontStyle: FontStyle, var foreground: UInt, var background: UInt) : Cloneable, Comparable<ThemeTrieElementRule> ","org.codroid.textmate.theme.ThemeTrieElementRule"]},{"name":"class TopLevelReference(val scopeName: ScopeName) : IncludeReference, TopLevel","description":"org.codroid.textmate.grammar.TopLevelReference","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-reference/index.html","searchKeys":["TopLevelReference","class TopLevelReference(val scopeName: ScopeName) : IncludeReference, TopLevel","org.codroid.textmate.grammar.TopLevelReference"]},{"name":"class TopLevelRepositoryReference(val scopeName: ScopeName, val ruleName: String) : IncludeReference, TopLevel","description":"org.codroid.textmate.grammar.TopLevelRepositoryReference","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-reference/index.html","searchKeys":["TopLevelRepositoryReference","class TopLevelRepositoryReference(val scopeName: ScopeName, val ruleName: String) : IncludeReference, TopLevel","org.codroid.textmate.grammar.TopLevelRepositoryReference"]},{"name":"class TopLevelRepositoryRuleReference(val scopeName: ScopeName, val ruleName: String) : AbsoluteRuleReference","description":"org.codroid.textmate.grammar.TopLevelRepositoryRuleReference","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-rule-reference/index.html","searchKeys":["TopLevelRepositoryRuleReference","class TopLevelRepositoryRuleReference(val scopeName: ScopeName, val ruleName: String) : AbsoluteRuleReference","org.codroid.textmate.grammar.TopLevelRepositoryRuleReference"]},{"name":"class TopLevelRuleReference(val scopeName: ScopeName) : AbsoluteRuleReference","description":"org.codroid.textmate.grammar.TopLevelRuleReference","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-rule-reference/index.html","searchKeys":["TopLevelRuleReference","class TopLevelRuleReference(val scopeName: ScopeName) : AbsoluteRuleReference","org.codroid.textmate.grammar.TopLevelRuleReference"]},{"name":"const val BACKGROUND_MASK: UInt","description":"org.codroid.textmate.EncodedTokenDataConsts.BACKGROUND_MASK","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-b-a-c-k-g-r-o-u-n-d_-m-a-s-k.html","searchKeys":["BACKGROUND_MASK","const val BACKGROUND_MASK: UInt","org.codroid.textmate.EncodedTokenDataConsts.BACKGROUND_MASK"]},{"name":"const val BACKGROUND_OFFSET: Int = 24","description":"org.codroid.textmate.EncodedTokenDataConsts.BACKGROUND_OFFSET","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-b-a-c-k-g-r-o-u-n-d_-o-f-f-s-e-t.html","searchKeys":["BACKGROUND_OFFSET","const val BACKGROUND_OFFSET: Int = 24","org.codroid.textmate.EncodedTokenDataConsts.BACKGROUND_OFFSET"]},{"name":"const val BALANCED_BRACKETS_MASK: UInt","description":"org.codroid.textmate.EncodedTokenDataConsts.BALANCED_BRACKETS_MASK","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-b-a-l-a-n-c-e-d_-b-r-a-c-k-e-t-s_-m-a-s-k.html","searchKeys":["BALANCED_BRACKETS_MASK","const val BALANCED_BRACKETS_MASK: UInt","org.codroid.textmate.EncodedTokenDataConsts.BALANCED_BRACKETS_MASK"]},{"name":"const val BALANCED_BRACKETS_OFFSET: Int = 10","description":"org.codroid.textmate.EncodedTokenDataConsts.BALANCED_BRACKETS_OFFSET","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-b-a-l-a-n-c-e-d_-b-r-a-c-k-e-t-s_-o-f-f-s-e-t.html","searchKeys":["BALANCED_BRACKETS_OFFSET","const val BALANCED_BRACKETS_OFFSET: Int = 10","org.codroid.textmate.EncodedTokenDataConsts.BALANCED_BRACKETS_OFFSET"]},{"name":"const val Bold: FontStyle = 2","description":"org.codroid.textmate.theme.FontStyleConsts.Bold","location":"codroid-textmate/org.codroid.textmate.theme/-font-style-consts/-bold.html","searchKeys":["Bold","const val Bold: FontStyle = 2","org.codroid.textmate.theme.FontStyleConsts.Bold"]},{"name":"const val Comment: OptionalStandardTokenType = 1","description":"org.codroid.textmate.OptionalStandardTokenTypeConsts.Comment","location":"codroid-textmate/org.codroid.textmate/-optional-standard-token-type-consts/-comment.html","searchKeys":["Comment","const val Comment: OptionalStandardTokenType = 1","org.codroid.textmate.OptionalStandardTokenTypeConsts.Comment"]},{"name":"const val Comment: StandardTokenType = 1","description":"org.codroid.textmate.StandardTokenTypeConsts.Comment","location":"codroid-textmate/org.codroid.textmate/-standard-token-type-consts/-comment.html","searchKeys":["Comment","const val Comment: StandardTokenType = 1","org.codroid.textmate.StandardTokenTypeConsts.Comment"]},{"name":"const val DebugCall: FindOption = 8","description":"org.codroid.textmate.regex.FindOptionConsts.DebugCall","location":"codroid-textmate/org.codroid.textmate.regex/-find-option-consts/-debug-call.html","searchKeys":["DebugCall","const val DebugCall: FindOption = 8","org.codroid.textmate.regex.FindOptionConsts.DebugCall"]},{"name":"const val FONT_STYLE_MASK: UInt","description":"org.codroid.textmate.EncodedTokenDataConsts.FONT_STYLE_MASK","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-f-o-n-t_-s-t-y-l-e_-m-a-s-k.html","searchKeys":["FONT_STYLE_MASK","const val FONT_STYLE_MASK: UInt","org.codroid.textmate.EncodedTokenDataConsts.FONT_STYLE_MASK"]},{"name":"const val FONT_STYLE_OFFSET: Int = 11","description":"org.codroid.textmate.EncodedTokenDataConsts.FONT_STYLE_OFFSET","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-f-o-n-t_-s-t-y-l-e_-o-f-f-s-e-t.html","searchKeys":["FONT_STYLE_OFFSET","const val FONT_STYLE_OFFSET: Int = 11","org.codroid.textmate.EncodedTokenDataConsts.FONT_STYLE_OFFSET"]},{"name":"const val FOREGROUND_MASK: UInt","description":"org.codroid.textmate.EncodedTokenDataConsts.FOREGROUND_MASK","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-f-o-r-e-g-r-o-u-n-d_-m-a-s-k.html","searchKeys":["FOREGROUND_MASK","const val FOREGROUND_MASK: UInt","org.codroid.textmate.EncodedTokenDataConsts.FOREGROUND_MASK"]},{"name":"const val FOREGROUND_OFFSET: Int = 15","description":"org.codroid.textmate.EncodedTokenDataConsts.FOREGROUND_OFFSET","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-f-o-r-e-g-r-o-u-n-d_-o-f-f-s-e-t.html","searchKeys":["FOREGROUND_OFFSET","const val FOREGROUND_OFFSET: Int = 15","org.codroid.textmate.EncodedTokenDataConsts.FOREGROUND_OFFSET"]},{"name":"const val Italic: FontStyle = 1","description":"org.codroid.textmate.theme.FontStyleConsts.Italic","location":"codroid-textmate/org.codroid.textmate.theme/-font-style-consts/-italic.html","searchKeys":["Italic","const val Italic: FontStyle = 1","org.codroid.textmate.theme.FontStyleConsts.Italic"]},{"name":"const val LANGUAGEID_MASK: UInt","description":"org.codroid.textmate.EncodedTokenDataConsts.LANGUAGEID_MASK","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-l-a-n-g-u-a-g-e-i-d_-m-a-s-k.html","searchKeys":["LANGUAGEID_MASK","const val LANGUAGEID_MASK: UInt","org.codroid.textmate.EncodedTokenDataConsts.LANGUAGEID_MASK"]},{"name":"const val LANGUAGEID_OFFSET: Int = 0","description":"org.codroid.textmate.EncodedTokenDataConsts.LANGUAGEID_OFFSET","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-l-a-n-g-u-a-g-e-i-d_-o-f-f-s-e-t.html","searchKeys":["LANGUAGEID_OFFSET","const val LANGUAGEID_OFFSET: Int = 0","org.codroid.textmate.EncodedTokenDataConsts.LANGUAGEID_OFFSET"]},{"name":"const val None: FindOption = 0","description":"org.codroid.textmate.regex.FindOptionConsts.None","location":"codroid-textmate/org.codroid.textmate.regex/-find-option-consts/-none.html","searchKeys":["None","const val None: FindOption = 0","org.codroid.textmate.regex.FindOptionConsts.None"]},{"name":"const val None: FontStyle = 0","description":"org.codroid.textmate.theme.FontStyleConsts.None","location":"codroid-textmate/org.codroid.textmate.theme/-font-style-consts/-none.html","searchKeys":["None","const val None: FontStyle = 0","org.codroid.textmate.theme.FontStyleConsts.None"]},{"name":"const val NotBeginPosition: FindOption = 4","description":"org.codroid.textmate.regex.FindOptionConsts.NotBeginPosition","location":"codroid-textmate/org.codroid.textmate.regex/-find-option-consts/-not-begin-position.html","searchKeys":["NotBeginPosition","const val NotBeginPosition: FindOption = 4","org.codroid.textmate.regex.FindOptionConsts.NotBeginPosition"]},{"name":"const val NotBeginString: FindOption = 1","description":"org.codroid.textmate.regex.FindOptionConsts.NotBeginString","location":"codroid-textmate/org.codroid.textmate.regex/-find-option-consts/-not-begin-string.html","searchKeys":["NotBeginString","const val NotBeginString: FindOption = 1","org.codroid.textmate.regex.FindOptionConsts.NotBeginString"]},{"name":"const val NotEndString: FindOption = 2","description":"org.codroid.textmate.regex.FindOptionConsts.NotEndString","location":"codroid-textmate/org.codroid.textmate.regex/-find-option-consts/-not-end-string.html","searchKeys":["NotEndString","const val NotEndString: FindOption = 2","org.codroid.textmate.regex.FindOptionConsts.NotEndString"]},{"name":"const val NotSet: FontStyle","description":"org.codroid.textmate.theme.FontStyleConsts.NotSet","location":"codroid-textmate/org.codroid.textmate.theme/-font-style-consts/-not-set.html","searchKeys":["NotSet","const val NotSet: FontStyle","org.codroid.textmate.theme.FontStyleConsts.NotSet"]},{"name":"const val NotSet: OptionalStandardTokenType = 8","description":"org.codroid.textmate.OptionalStandardTokenTypeConsts.NotSet","location":"codroid-textmate/org.codroid.textmate/-optional-standard-token-type-consts/-not-set.html","searchKeys":["NotSet","const val NotSet: OptionalStandardTokenType = 8","org.codroid.textmate.OptionalStandardTokenTypeConsts.NotSet"]},{"name":"const val Other: OptionalStandardTokenType = 0","description":"org.codroid.textmate.OptionalStandardTokenTypeConsts.Other","location":"codroid-textmate/org.codroid.textmate/-optional-standard-token-type-consts/-other.html","searchKeys":["Other","const val Other: OptionalStandardTokenType = 0","org.codroid.textmate.OptionalStandardTokenTypeConsts.Other"]},{"name":"const val Other: StandardTokenType = 0","description":"org.codroid.textmate.StandardTokenTypeConsts.Other","location":"codroid-textmate/org.codroid.textmate/-standard-token-type-consts/-other.html","searchKeys":["Other","const val Other: StandardTokenType = 0","org.codroid.textmate.StandardTokenTypeConsts.Other"]},{"name":"const val RegEx: OptionalStandardTokenType = 3","description":"org.codroid.textmate.OptionalStandardTokenTypeConsts.RegEx","location":"codroid-textmate/org.codroid.textmate/-optional-standard-token-type-consts/-reg-ex.html","searchKeys":["RegEx","const val RegEx: OptionalStandardTokenType = 3","org.codroid.textmate.OptionalStandardTokenTypeConsts.RegEx"]},{"name":"const val RegEx: StandardTokenType = 3","description":"org.codroid.textmate.StandardTokenTypeConsts.RegEx","location":"codroid-textmate/org.codroid.textmate/-standard-token-type-consts/-reg-ex.html","searchKeys":["RegEx","const val RegEx: StandardTokenType = 3","org.codroid.textmate.StandardTokenTypeConsts.RegEx"]},{"name":"const val Strikethrough: FontStyle = 8","description":"org.codroid.textmate.theme.FontStyleConsts.Strikethrough","location":"codroid-textmate/org.codroid.textmate.theme/-font-style-consts/-strikethrough.html","searchKeys":["Strikethrough","const val Strikethrough: FontStyle = 8","org.codroid.textmate.theme.FontStyleConsts.Strikethrough"]},{"name":"const val String: OptionalStandardTokenType = 2","description":"org.codroid.textmate.OptionalStandardTokenTypeConsts.String","location":"codroid-textmate/org.codroid.textmate/-optional-standard-token-type-consts/-string.html","searchKeys":["String","const val String: OptionalStandardTokenType = 2","org.codroid.textmate.OptionalStandardTokenTypeConsts.String"]},{"name":"const val String: StandardTokenType = 2","description":"org.codroid.textmate.StandardTokenTypeConsts.String","location":"codroid-textmate/org.codroid.textmate/-standard-token-type-consts/-string.html","searchKeys":["String","const val String: StandardTokenType = 2","org.codroid.textmate.StandardTokenTypeConsts.String"]},{"name":"const val TOKEN_TYPE_MASK: UInt","description":"org.codroid.textmate.EncodedTokenDataConsts.TOKEN_TYPE_MASK","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-t-o-k-e-n_-t-y-p-e_-m-a-s-k.html","searchKeys":["TOKEN_TYPE_MASK","const val TOKEN_TYPE_MASK: UInt","org.codroid.textmate.EncodedTokenDataConsts.TOKEN_TYPE_MASK"]},{"name":"const val TOKEN_TYPE_OFFSET: Int = 8","description":"org.codroid.textmate.EncodedTokenDataConsts.TOKEN_TYPE_OFFSET","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/-t-o-k-e-n_-t-y-p-e_-o-f-f-s-e-t.html","searchKeys":["TOKEN_TYPE_OFFSET","const val TOKEN_TYPE_OFFSET: Int = 8","org.codroid.textmate.EncodedTokenDataConsts.TOKEN_TYPE_OFFSET"]},{"name":"const val Underline: FontStyle = 4","description":"org.codroid.textmate.theme.FontStyleConsts.Underline","location":"codroid-textmate/org.codroid.textmate.theme/-font-style-consts/-underline.html","searchKeys":["Underline","const val Underline: FontStyle = 4","org.codroid.textmate.theme.FontStyleConsts.Underline"]},{"name":"data class BasicScopeAttributes(val languageId: Int, val tokenType: OptionalStandardTokenType)","description":"org.codroid.textmate.grammar.BasicScopeAttributes","location":"codroid-textmate/org.codroid.textmate.grammar/-basic-scope-attributes/index.html","searchKeys":["BasicScopeAttributes","data class BasicScopeAttributes(val languageId: Int, val tokenType: OptionalStandardTokenType)","org.codroid.textmate.grammar.BasicScopeAttributes"]},{"name":"data class CompilePatternsResult(val patterns: Array<RuleId>, val hasMissingPatterns: Boolean)","description":"org.codroid.textmate.rule.CompilePatternsResult","location":"codroid-textmate/org.codroid.textmate.rule/-compile-patterns-result/index.html","searchKeys":["CompilePatternsResult","data class CompilePatternsResult(val patterns: Array<RuleId>, val hasMissingPatterns: Boolean)","org.codroid.textmate.rule.CompilePatternsResult"]},{"name":"data class FindNextMatchResult(val ruleId: RuleId, val captureIndices: Array<IntRange>)","description":"org.codroid.textmate.rule.FindNextMatchResult","location":"codroid-textmate/org.codroid.textmate.rule/-find-next-match-result/index.html","searchKeys":["FindNextMatchResult","data class FindNextMatchResult(val ruleId: RuleId, val captureIndices: Array<IntRange>)","org.codroid.textmate.rule.FindNextMatchResult"]},{"name":"data class GrammarConfiguration(val embeddedLanguages: EmbeddedLanguagesMap? = null, val tokenTypes: TokenTypeMap? = null, val balancedBracketSelectors: Array<String>? = null, val unbalancedBracketSelectors: Array<String>? = null)","description":"org.codroid.textmate.GrammarConfiguration","location":"codroid-textmate/org.codroid.textmate/-grammar-configuration/index.html","searchKeys":["GrammarConfiguration","data class GrammarConfiguration(val embeddedLanguages: EmbeddedLanguagesMap? = null, val tokenTypes: TokenTypeMap? = null, val balancedBracketSelectors: Array<String>? = null, val unbalancedBracketSelectors: Array<String>? = null)","org.codroid.textmate.GrammarConfiguration"]},{"name":"data class Injection(val debugSelector: String, val matcher: Matcher<Array<String>>, val priority: Priority, val ruleId: RuleId, val grammar: RawGrammar)","description":"org.codroid.textmate.grammar.Injection","location":"codroid-textmate/org.codroid.textmate.grammar/-injection/index.html","searchKeys":["Injection","data class Injection(val debugSelector: String, val matcher: Matcher<Array<String>>, val priority: Priority, val ruleId: RuleId, val grammar: RawGrammar)","org.codroid.textmate.grammar.Injection"]},{"name":"data class LocalStackElement(val scopes: AttributedScopeStack, val endPos: Int)","description":"org.codroid.textmate.grammar.tokenize.LocalStackElement","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-local-stack-element/index.html","searchKeys":["LocalStackElement","data class LocalStackElement(val scopes: AttributedScopeStack, val endPos: Int)","org.codroid.textmate.grammar.tokenize.LocalStackElement"]},{"name":"data class Location(val filename: String, val line: Int, val char: Int)","description":"org.codroid.textmate.grammar.Location","location":"codroid-textmate/org.codroid.textmate.grammar/-location/index.html","searchKeys":["Location","data class Location(val filename: String, val line: Int, val char: Int)","org.codroid.textmate.grammar.Location"]},{"name":"data class MatchGroup(val value: String, val range: IntRange)","description":"org.codroid.textmate.regex.MatchGroup","location":"codroid-textmate/org.codroid.textmate.regex/-match-group/index.html","searchKeys":["MatchGroup","data class MatchGroup(val value: String, val range: IntRange)","org.codroid.textmate.regex.MatchGroup"]},{"name":"data class MatchResult(val value: String, val range: IntRange, val groups: Array<MatchGroup>, var indexInScanner: Int = -1)","description":"org.codroid.textmate.regex.MatchResult","location":"codroid-textmate/org.codroid.textmate.regex/-match-result/index.html","searchKeys":["MatchResult","data class MatchResult(val value: String, val range: IntRange, val groups: Array<MatchGroup>, var indexInScanner: Int = -1)","org.codroid.textmate.regex.MatchResult"]},{"name":"data class MatcherWithPriority<T>(val matcher: Matcher<T>, val priority: Priority)","description":"org.codroid.textmate.MatcherWithPriority","location":"codroid-textmate/org.codroid.textmate/-matcher-with-priority/index.html","searchKeys":["MatcherWithPriority","data class MatcherWithPriority<T>(val matcher: Matcher<T>, val priority: Priority)","org.codroid.textmate.MatcherWithPriority"]},{"name":"data class ParsedThemeRule(val scope: ScopeName, val parentScopes: List<ScopeName>?, val index: Int, val fontStyle: FontStyle, val foreground: String?, val background: String?)","description":"org.codroid.textmate.theme.ParsedThemeRule","location":"codroid-textmate/org.codroid.textmate.theme/-parsed-theme-rule/index.html","searchKeys":["ParsedThemeRule","data class ParsedThemeRule(val scope: ScopeName, val parentScopes: List<ScopeName>?, val index: Int, val fontStyle: FontStyle, val foreground: String?, val background: String?)","org.codroid.textmate.theme.ParsedThemeRule"]},{"name":"data class PrepareRuleResult(val ruleScanner: CompiledRule, val findOptions: FindOption)","description":"org.codroid.textmate.grammar.tokenize.PrepareRuleResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-prepare-rule-result/index.html","searchKeys":["PrepareRuleResult","data class PrepareRuleResult(val ruleScanner: CompiledRule, val findOptions: FindOption)","org.codroid.textmate.grammar.tokenize.PrepareRuleResult"]},{"name":"data class RawGrammar(val repository: RawRepository = RawRepository(), val scopeName: ScopeName = \"\", val patterns: Array<RawRule> = arrayOf(), val injections: Map<String, RawRule> = emptyMap(), val injectionSelector: String? = null, val fileTypes: Array<String>? = null, val name: String? = null, val firstLineMatch: String? = null) : Cloneable","description":"org.codroid.textmate.grammar.RawGrammar","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/index.html","searchKeys":["RawGrammar","data class RawGrammar(val repository: RawRepository = RawRepository(), val scopeName: ScopeName = \"\", val patterns: Array<RawRule> = arrayOf(), val injections: Map<String, RawRule> = emptyMap(), val injectionSelector: String? = null, val fileTypes: Array<String>? = null, val name: String? = null, val firstLineMatch: String? = null) : Cloneable","org.codroid.textmate.grammar.RawGrammar"]},{"name":"data class RawRule(var id: RuleId? = null, val include: String? = null, val name: String? = null, val contentName: String? = null, val match: String? = null, val captures: RawCaptures? = null, val begin: String? = null, val beginCaptures: RawCaptures? = null, val end: String? = null, val endCaptures: RawCaptures? = null, val while_: String? = null, val whileCaptures: RawCaptures? = null, val patterns: Array<RawRule>? = null, val repository: RawRepository? = null, val applyEndPatternLast: Boolean? = null) : Cloneable","description":"org.codroid.textmate.grammar.RawRule","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/index.html","searchKeys":["RawRule","data class RawRule(var id: RuleId? = null, val include: String? = null, val name: String? = null, val contentName: String? = null, val match: String? = null, val captures: RawCaptures? = null, val begin: String? = null, val beginCaptures: RawCaptures? = null, val end: String? = null, val endCaptures: RawCaptures? = null, val while_: String? = null, val whileCaptures: RawCaptures? = null, val patterns: Array<RawRule>? = null, val repository: RawRepository? = null, val applyEndPatternLast: Boolean? = null) : Cloneable","org.codroid.textmate.grammar.RawRule"]},{"name":"data class RawTheme(var name: String? = null, var settings: Array<RawThemeSetting>? = null)","description":"org.codroid.textmate.theme.RawTheme","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme/index.html","searchKeys":["RawTheme","data class RawTheme(var name: String? = null, var settings: Array<RawThemeSetting>? = null)","org.codroid.textmate.theme.RawTheme"]},{"name":"data class RawThemeSetting(var name: String? = null, var scope: Array<ScopePattern>? = null, var settings: Setting? = null)","description":"org.codroid.textmate.theme.RawThemeSetting","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting/index.html","searchKeys":["RawThemeSetting","data class RawThemeSetting(var name: String? = null, var scope: Array<ScopePattern>? = null, var settings: Setting? = null)","org.codroid.textmate.theme.RawThemeSetting"]},{"name":"data class RegExpSourceAnchorCache(val a0g0: String, val a0g1: String, val a1g0: String, val a1g1: String)","description":"org.codroid.textmate.rule.RegExpSourceAnchorCache","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-anchor-cache/index.html","searchKeys":["RegExpSourceAnchorCache","data class RegExpSourceAnchorCache(val a0g0: String, val a0g1: String, val a1g0: String, val a1g1: String)","org.codroid.textmate.rule.RegExpSourceAnchorCache"]},{"name":"data class RegExpSourceListAnchorCache(var a0g0: CompiledRule? = null, var a0g1: CompiledRule? = null, var a1g0: CompiledRule? = null, var a1g1: CompiledRule? = null)","description":"org.codroid.textmate.rule.RegExpSourceListAnchorCache","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list-anchor-cache/index.html","searchKeys":["RegExpSourceListAnchorCache","data class RegExpSourceListAnchorCache(var a0g0: CompiledRule? = null, var a0g1: CompiledRule? = null, var a1g0: CompiledRule? = null, var a1g1: CompiledRule? = null)","org.codroid.textmate.rule.RegExpSourceListAnchorCache"]},{"name":"data class Setting(var fontStyle: String? = null, var foreground: String? = null, var background: String? = null)","description":"org.codroid.textmate.theme.Setting","location":"codroid-textmate/org.codroid.textmate.theme/-setting/index.html","searchKeys":["Setting","data class Setting(var fontStyle: String? = null, var foreground: String? = null, var background: String? = null)","org.codroid.textmate.theme.Setting"]},{"name":"data class StandardResult(val matchResult: MatchResult, var indexInScanner: Int)","description":"org.codroid.textmate.regex.StandardResult","location":"codroid-textmate/org.codroid.textmate.regex/-standard-result/index.html","searchKeys":["StandardResult","data class StandardResult(val matchResult: MatchResult, var indexInScanner: Int)","org.codroid.textmate.regex.StandardResult"]},{"name":"data class StyleAttributes(val fontStyle: FontStyle, val foregroundId: UInt, val backgroundId: UInt)","description":"org.codroid.textmate.theme.StyleAttributes","location":"codroid-textmate/org.codroid.textmate.theme/-style-attributes/index.html","searchKeys":["StyleAttributes","data class StyleAttributes(val fontStyle: FontStyle, val foregroundId: UInt, val backgroundId: UInt)","org.codroid.textmate.theme.StyleAttributes"]},{"name":"data class Token(var startIndex: Int, var endIndex: Int, val scopes: Array<String>)","description":"org.codroid.textmate.Token","location":"codroid-textmate/org.codroid.textmate/-token/index.html","searchKeys":["Token","data class Token(var startIndex: Int, var endIndex: Int, val scopes: Array<String>)","org.codroid.textmate.Token"]},{"name":"data class TokenTypeMatcher(val matcher: Matcher<Array<String>>, val type: StandardTokenType)","description":"org.codroid.textmate.grammar.TokenTypeMatcher","location":"codroid-textmate/org.codroid.textmate.grammar/-token-type-matcher/index.html","searchKeys":["TokenTypeMatcher","data class TokenTypeMatcher(val matcher: Matcher<Array<String>>, val type: StandardTokenType)","org.codroid.textmate.grammar.TokenTypeMatcher"]},{"name":"data class TokenizeLineResult(val tokens: Array<Token>, val ruleStack: StateStack, val stoppedEarly: Boolean)","description":"org.codroid.textmate.TokenizeLineResult","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result/index.html","searchKeys":["TokenizeLineResult","data class TokenizeLineResult(val tokens: Array<Token>, val ruleStack: StateStack, val stoppedEarly: Boolean)","org.codroid.textmate.TokenizeLineResult"]},{"name":"data class TokenizeLineResult2(val tokens: UIntArray, val ruleStack: StateStack, val stoppedEarly: Boolean)","description":"org.codroid.textmate.TokenizeLineResult2","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result2/index.html","searchKeys":["TokenizeLineResult2","data class TokenizeLineResult2(val tokens: UIntArray, val ruleStack: StateStack, val stoppedEarly: Boolean)","org.codroid.textmate.TokenizeLineResult2"]},{"name":"data class TokenizeResult(val lineLength: Int, val lineTokens: LineTokens, val ruleStack: StateStack, val stoppedEarly: Boolean)","description":"org.codroid.textmate.grammar.Grammar.TokenizeResult","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/-tokenize-result/index.html","searchKeys":["TokenizeResult","data class TokenizeResult(val lineLength: Int, val lineTokens: LineTokens, val ruleStack: StateStack, val stoppedEarly: Boolean)","org.codroid.textmate.grammar.Grammar.TokenizeResult"]},{"name":"data class TokenizeStringResult(val stack: StateStack, val stoppedEarly: Boolean)","description":"org.codroid.textmate.grammar.tokenize.TokenizeStringResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-tokenize-string-result/index.html","searchKeys":["TokenizeStringResult","data class TokenizeStringResult(val stack: StateStack, val stoppedEarly: Boolean)","org.codroid.textmate.grammar.tokenize.TokenizeStringResult"]},{"name":"data class WhileCheckResult(val stack: StateStack, val linePos: Int, val anchorPosition: Int, val isFirstLine: Boolean)","description":"org.codroid.textmate.grammar.tokenize.WhileCheckResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-while-check-result/index.html","searchKeys":["WhileCheckResult","data class WhileCheckResult(val stack: StateStack, val linePos: Int, val anchorPosition: Int, val isFirstLine: Boolean)","org.codroid.textmate.grammar.tokenize.WhileCheckResult"]},{"name":"enum IncludeReferenceKind : Enum<IncludeReferenceKind> ","description":"org.codroid.textmate.grammar.IncludeReferenceKind","location":"codroid-textmate/org.codroid.textmate.grammar/-include-reference-kind/index.html","searchKeys":["IncludeReferenceKind","enum IncludeReferenceKind : Enum<IncludeReferenceKind> ","org.codroid.textmate.grammar.IncludeReferenceKind"]},{"name":"fun <K, V> CachedFn(fn: (key: K) -> V)","description":"org.codroid.textmate.CachedFn.CachedFn","location":"codroid-textmate/org.codroid.textmate/-cached-fn/-cached-fn.html","searchKeys":["CachedFn","fun <K, V> CachedFn(fn: (key: K) -> V)","org.codroid.textmate.CachedFn.CachedFn"]},{"name":"fun <T> List<T>.every(test: (value: T) -> Boolean): Boolean","description":"org.codroid.textmate.every","location":"codroid-textmate/org.codroid.textmate/every.html","searchKeys":["every","fun <T> List<T>.every(test: (value: T) -> Boolean): Boolean","org.codroid.textmate.every"]},{"name":"fun <T> List<T>.some(test: (value: T) -> Boolean): Boolean","description":"org.codroid.textmate.some","location":"codroid-textmate/org.codroid.textmate/some.html","searchKeys":["some","fun <T> List<T>.some(test: (value: T) -> Boolean): Boolean","org.codroid.textmate.some"]},{"name":"fun <T> Matchers(selector: String, matchesName: (names: List<String>, matcherInput: T) -> Boolean)","description":"org.codroid.textmate.Matchers.Matchers","location":"codroid-textmate/org.codroid.textmate/-matchers/-matchers.html","searchKeys":["Matchers","fun <T> Matchers(selector: String, matchesName: (names: List<String>, matcherInput: T) -> Boolean)","org.codroid.textmate.Matchers.Matchers"]},{"name":"fun <T> create(selector: String, matchesName: (names: List<String>, matcherInput: T) -> Boolean): List<MatcherWithPriority<T>>","description":"org.codroid.textmate.Matchers.Companion.create","location":"codroid-textmate/org.codroid.textmate/-matchers/-companion/create.html","searchKeys":["create","fun <T> create(selector: String, matchesName: (names: List<String>, matcherInput: T) -> Boolean): List<MatcherWithPriority<T>>","org.codroid.textmate.Matchers.Companion.create"]},{"name":"fun <T> decodeFromNSObject(dict: NSObject, deserializationStrategy: DeserializationStrategy<T>): T","description":"org.codroid.textmate.decodeFromNSObject","location":"codroid-textmate/org.codroid.textmate/decode-from-n-s-object.html","searchKeys":["decodeFromNSObject","fun <T> decodeFromNSObject(dict: NSObject, deserializationStrategy: DeserializationStrategy<T>): T","org.codroid.textmate.decodeFromNSObject"]},{"name":"fun <V> ScopeMatcher(values: Map<ScopeName, V>? = null)","description":"org.codroid.textmate.grammar.ScopeMatcher.ScopeMatcher","location":"codroid-textmate/org.codroid.textmate.grammar/-scope-matcher/-scope-matcher.html","searchKeys":["ScopeMatcher","fun <V> ScopeMatcher(values: Map<ScopeName, V>? = null)","org.codroid.textmate.grammar.ScopeMatcher.ScopeMatcher"]},{"name":"fun Array<RawRule>.deepClone(): Array<RawRule>","description":"org.codroid.textmate.grammar.deepClone","location":"codroid-textmate/org.codroid.textmate.grammar/deep-clone.html","searchKeys":["deepClone","fun Array<RawRule>.deepClone(): Array<RawRule>","org.codroid.textmate.grammar.deepClone"]},{"name":"fun AttributedScopeStack(parent: AttributedScopeStack?, scopePath: ScopeStack, tokenAttributes: EncodedToken)","description":"org.codroid.textmate.grammar.AttributedScopeStack.AttributedScopeStack","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/-attributed-scope-stack.html","searchKeys":["AttributedScopeStack","fun AttributedScopeStack(parent: AttributedScopeStack?, scopePath: ScopeStack, tokenAttributes: EncodedToken)","org.codroid.textmate.grammar.AttributedScopeStack.AttributedScopeStack"]},{"name":"fun BalancedBracketSelectors(balancedBracketScopes: Array<String>, unbalancedBracketScopes: Array<String>)","description":"org.codroid.textmate.grammar.BalancedBracketSelectors.BalancedBracketSelectors","location":"codroid-textmate/org.codroid.textmate.grammar/-balanced-bracket-selectors/-balanced-bracket-selectors.html","searchKeys":["BalancedBracketSelectors","fun BalancedBracketSelectors(balancedBracketScopes: Array<String>, unbalancedBracketScopes: Array<String>)","org.codroid.textmate.grammar.BalancedBracketSelectors.BalancedBracketSelectors"]},{"name":"fun BaseReference()","description":"org.codroid.textmate.grammar.BaseReference.BaseReference","location":"codroid-textmate/org.codroid.textmate.grammar/-base-reference/-base-reference.html","searchKeys":["BaseReference","fun BaseReference()","org.codroid.textmate.grammar.BaseReference.BaseReference"]},{"name":"fun BasicScopeAttributes(languageId: Int, tokenType: OptionalStandardTokenType)","description":"org.codroid.textmate.grammar.BasicScopeAttributes.BasicScopeAttributes","location":"codroid-textmate/org.codroid.textmate.grammar/-basic-scope-attributes/-basic-scope-attributes.html","searchKeys":["BasicScopeAttributes","fun BasicScopeAttributes(languageId: Int, tokenType: OptionalStandardTokenType)","org.codroid.textmate.grammar.BasicScopeAttributes.BasicScopeAttributes"]},{"name":"fun BasicScopesAttributeProvider(initialLanguageId: Int, embeddedLanguages: EmbeddedLanguagesMap? = null)","description":"org.codroid.textmate.grammar.BasicScopesAttributeProvider.BasicScopesAttributeProvider","location":"codroid-textmate/org.codroid.textmate.grammar/-basic-scopes-attribute-provider/-basic-scopes-attribute-provider.html","searchKeys":["BasicScopesAttributeProvider","fun BasicScopesAttributeProvider(initialLanguageId: Int, embeddedLanguages: EmbeddedLanguagesMap? = null)","org.codroid.textmate.grammar.BasicScopesAttributeProvider.BasicScopesAttributeProvider"]},{"name":"fun BeginEndRule(id: RuleId, name: String?, contentName: String?, begin: String, beginCaptures: Array<CaptureRule?>, end: String? = null, endCaptures: Array<CaptureRule?>, applyEndPatternLast: Boolean = false, patterns: CompilePatternsResult)","description":"org.codroid.textmate.rule.BeginEndRule.BeginEndRule","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/-begin-end-rule.html","searchKeys":["BeginEndRule","fun BeginEndRule(id: RuleId, name: String?, contentName: String?, begin: String, beginCaptures: Array<CaptureRule?>, end: String? = null, endCaptures: Array<CaptureRule?>, applyEndPatternLast: Boolean = false, patterns: CompilePatternsResult)","org.codroid.textmate.rule.BeginEndRule.BeginEndRule"]},{"name":"fun BeginWhileRule(id: RuleId, name: String?, contentName: String?, begin: String, beginCaptures: Array<CaptureRule?>, _while: String, whileCaptures: Array<CaptureRule?>, patterns: CompilePatternsResult)","description":"org.codroid.textmate.rule.BeginWhileRule.BeginWhileRule","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/-begin-while-rule.html","searchKeys":["BeginWhileRule","fun BeginWhileRule(id: RuleId, name: String?, contentName: String?, begin: String, beginCaptures: Array<CaptureRule?>, _while: String, whileCaptures: Array<CaptureRule?>, patterns: CompilePatternsResult)","org.codroid.textmate.rule.BeginWhileRule.BeginWhileRule"]},{"name":"fun Byte.toBoolean(): Boolean","description":"org.codroid.textmate.toBoolean","location":"codroid-textmate/org.codroid.textmate/to-boolean.html","searchKeys":["toBoolean","fun Byte.toBoolean(): Boolean","org.codroid.textmate.toBoolean"]},{"name":"fun CaptureRule(id: RuleId, name: String?, contentName: String?, retokenizeCapturedWithRuleId: RuleId)","description":"org.codroid.textmate.rule.CaptureRule.CaptureRule","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/-capture-rule.html","searchKeys":["CaptureRule","fun CaptureRule(id: RuleId, name: String?, contentName: String?, retokenizeCapturedWithRuleId: RuleId)","org.codroid.textmate.rule.CaptureRule.CaptureRule"]},{"name":"fun ColorMap(colorMap: Array<String>? = null)","description":"org.codroid.textmate.theme.ColorMap.ColorMap","location":"codroid-textmate/org.codroid.textmate.theme/-color-map/-color-map.html","searchKeys":["ColorMap","fun ColorMap(colorMap: Array<String>? = null)","org.codroid.textmate.theme.ColorMap.ColorMap"]},{"name":"fun CompilePatternsResult(patterns: Array<RuleId>, hasMissingPatterns: Boolean)","description":"org.codroid.textmate.rule.CompilePatternsResult.CompilePatternsResult","location":"codroid-textmate/org.codroid.textmate.rule/-compile-patterns-result/-compile-patterns-result.html","searchKeys":["CompilePatternsResult","fun CompilePatternsResult(patterns: Array<RuleId>, hasMissingPatterns: Boolean)","org.codroid.textmate.rule.CompilePatternsResult.CompilePatternsResult"]},{"name":"fun CompiledRule(onigLib: RegexLib, regExps: Array<String>, rules: Array<RuleId>)","description":"org.codroid.textmate.rule.CompiledRule.CompiledRule","location":"codroid-textmate/org.codroid.textmate.rule/-compiled-rule/-compiled-rule.html","searchKeys":["CompiledRule","fun CompiledRule(onigLib: RegexLib, regExps: Array<String>, rules: Array<RuleId>)","org.codroid.textmate.rule.CompiledRule.CompiledRule"]},{"name":"fun Context(baseGrammar: RawGrammar, selfGrammar: RawGrammar)","description":"org.codroid.textmate.grammar.Context.Context","location":"codroid-textmate/org.codroid.textmate.grammar/-context/-context.html","searchKeys":["Context","fun Context(baseGrammar: RawGrammar, selfGrammar: RawGrammar)","org.codroid.textmate.grammar.Context.Context"]},{"name":"fun ContextWithRepository(baseGrammar: RawGrammar, selfGrammar: RawGrammar, repository: RawRepository? = null)","description":"org.codroid.textmate.grammar.ContextWithRepository.ContextWithRepository","location":"codroid-textmate/org.codroid.textmate.grammar/-context-with-repository/-context-with-repository.html","searchKeys":["ContextWithRepository","fun ContextWithRepository(baseGrammar: RawGrammar, selfGrammar: RawGrammar, repository: RawRepository? = null)","org.codroid.textmate.grammar.ContextWithRepository.ContextWithRepository"]},{"name":"fun ContextWithRepository(context: Context, repository: RawRepository? = null)","description":"org.codroid.textmate.grammar.ContextWithRepository.ContextWithRepository","location":"codroid-textmate/org.codroid.textmate.grammar/-context-with-repository/-context-with-repository.html","searchKeys":["ContextWithRepository","fun ContextWithRepository(context: Context, repository: RawRepository? = null)","org.codroid.textmate.grammar.ContextWithRepository.ContextWithRepository"]},{"name":"fun ExternalReferenceCollector()","description":"org.codroid.textmate.grammar.ExternalReferenceCollector.ExternalReferenceCollector","location":"codroid-textmate/org.codroid.textmate.grammar/-external-reference-collector/-external-reference-collector.html","searchKeys":["ExternalReferenceCollector","fun ExternalReferenceCollector()","org.codroid.textmate.grammar.ExternalReferenceCollector.ExternalReferenceCollector"]},{"name":"fun FindNextMatchResult(ruleId: RuleId, captureIndices: Array<IntRange>)","description":"org.codroid.textmate.rule.FindNextMatchResult.FindNextMatchResult","location":"codroid-textmate/org.codroid.textmate.rule/-find-next-match-result/-find-next-match-result.html","searchKeys":["FindNextMatchResult","fun FindNextMatchResult(ruleId: RuleId, captureIndices: Array<IntRange>)","org.codroid.textmate.rule.FindNextMatchResult.FindNextMatchResult"]},{"name":"fun Grammar(rootScopeName: ScopeName, grammar: RawGrammar, initialLanguages: Int, embeddedLanguages: EmbeddedLanguagesMap?, tokenTypes: TokenTypeMap?, balancedBracketSelectors: BalancedBracketSelectors?, grammarRepository: GrammarReposThemeProvider, regexLib: RegexLib)","description":"org.codroid.textmate.grammar.Grammar.Grammar","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/-grammar.html","searchKeys":["Grammar","fun Grammar(rootScopeName: ScopeName, grammar: RawGrammar, initialLanguages: Int, embeddedLanguages: EmbeddedLanguagesMap?, tokenTypes: TokenTypeMap?, balancedBracketSelectors: BalancedBracketSelectors?, grammarRepository: GrammarReposThemeProvider, regexLib: RegexLib)","org.codroid.textmate.grammar.Grammar.Grammar"]},{"name":"fun GrammarConfiguration(embeddedLanguages: EmbeddedLanguagesMap? = null, tokenTypes: TokenTypeMap? = null, balancedBracketSelectors: Array<String>? = null, unbalancedBracketSelectors: Array<String>? = null)","description":"org.codroid.textmate.GrammarConfiguration.GrammarConfiguration","location":"codroid-textmate/org.codroid.textmate/-grammar-configuration/-grammar-configuration.html","searchKeys":["GrammarConfiguration","fun GrammarConfiguration(embeddedLanguages: EmbeddedLanguagesMap? = null, tokenTypes: TokenTypeMap? = null, balancedBracketSelectors: Array<String>? = null, unbalancedBracketSelectors: Array<String>? = null)","org.codroid.textmate.GrammarConfiguration.GrammarConfiguration"]},{"name":"fun IncludeOnlyRule(id: RuleId, name: String?, contentName: String?, patterns: CompilePatternsResult)","description":"org.codroid.textmate.rule.IncludeOnlyRule.IncludeOnlyRule","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/-include-only-rule.html","searchKeys":["IncludeOnlyRule","fun IncludeOnlyRule(id: RuleId, name: String?, contentName: String?, patterns: CompilePatternsResult)","org.codroid.textmate.rule.IncludeOnlyRule.IncludeOnlyRule"]},{"name":"fun Injection(debugSelector: String, matcher: Matcher<Array<String>>, priority: Priority, ruleId: RuleId, grammar: RawGrammar)","description":"org.codroid.textmate.grammar.Injection.Injection","location":"codroid-textmate/org.codroid.textmate.grammar/-injection/-injection.html","searchKeys":["Injection","fun Injection(debugSelector: String, matcher: Matcher<Array<String>>, priority: Priority, ruleId: RuleId, grammar: RawGrammar)","org.codroid.textmate.grammar.Injection.Injection"]},{"name":"fun IntRange.distance(): Int","description":"org.codroid.textmate.distance","location":"codroid-textmate/org.codroid.textmate/distance.html","searchKeys":["distance","fun IntRange.distance(): Int","org.codroid.textmate.distance"]},{"name":"fun IntRange.endExclusive(): Int","description":"org.codroid.textmate.endExclusive","location":"codroid-textmate/org.codroid.textmate/end-exclusive.html","searchKeys":["endExclusive","fun IntRange.endExclusive(): Int","org.codroid.textmate.endExclusive"]},{"name":"fun LineTokens(emitBinaryTokens: Boolean, lineText: String, tokenTypeOverride: Array<TokenTypeMatcher>, balancedBracketSelectors: BalancedBracketSelectors? = null)","description":"org.codroid.textmate.grammar.LineTokens.LineTokens","location":"codroid-textmate/org.codroid.textmate.grammar/-line-tokens/-line-tokens.html","searchKeys":["LineTokens","fun LineTokens(emitBinaryTokens: Boolean, lineText: String, tokenTypeOverride: Array<TokenTypeMatcher>, balancedBracketSelectors: BalancedBracketSelectors? = null)","org.codroid.textmate.grammar.LineTokens.LineTokens"]},{"name":"fun LocalStackElement(scopes: AttributedScopeStack, endPos: Int)","description":"org.codroid.textmate.grammar.tokenize.LocalStackElement.LocalStackElement","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-local-stack-element/-local-stack-element.html","searchKeys":["LocalStackElement","fun LocalStackElement(scopes: AttributedScopeStack, endPos: Int)","org.codroid.textmate.grammar.tokenize.LocalStackElement.LocalStackElement"]},{"name":"fun Locatable()","description":"org.codroid.textmate.grammar.Locatable.Locatable","location":"codroid-textmate/org.codroid.textmate.grammar/-locatable/-locatable.html","searchKeys":["Locatable","fun Locatable()","org.codroid.textmate.grammar.Locatable.Locatable"]},{"name":"fun Location(filename: String, line: Int, char: Int)","description":"org.codroid.textmate.grammar.Location.Location","location":"codroid-textmate/org.codroid.textmate.grammar/-location/-location.html","searchKeys":["Location","fun Location(filename: String, line: Int, char: Int)","org.codroid.textmate.grammar.Location.Location"]},{"name":"fun Map<String, RawRule>.deepClone(): HashMap<String, RawRule>","description":"org.codroid.textmate.grammar.deepClone","location":"codroid-textmate/org.codroid.textmate.grammar/deep-clone.html","searchKeys":["deepClone","fun Map<String, RawRule>.deepClone(): HashMap<String, RawRule>","org.codroid.textmate.grammar.deepClone"]},{"name":"fun MatchGroup(value: String, range: IntRange)","description":"org.codroid.textmate.regex.MatchGroup.MatchGroup","location":"codroid-textmate/org.codroid.textmate.regex/-match-group/-match-group.html","searchKeys":["MatchGroup","fun MatchGroup(value: String, range: IntRange)","org.codroid.textmate.regex.MatchGroup.MatchGroup"]},{"name":"fun MatchInjectionsResult(priorityMatch: Boolean, captureIndices: Array<IntRange>, matchedRuleId: RuleId)","description":"org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.MatchInjectionsResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-injections-result/-match-injections-result.html","searchKeys":["MatchInjectionsResult","fun MatchInjectionsResult(priorityMatch: Boolean, captureIndices: Array<IntRange>, matchedRuleId: RuleId)","org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.MatchInjectionsResult"]},{"name":"fun MatchResult(captureIndices: Array<IntRange>, matchedRuleId: RuleId)","description":"org.codroid.textmate.grammar.tokenize.MatchResult.MatchResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-result/-match-result.html","searchKeys":["MatchResult","fun MatchResult(captureIndices: Array<IntRange>, matchedRuleId: RuleId)","org.codroid.textmate.grammar.tokenize.MatchResult.MatchResult"]},{"name":"fun MatchResult(value: String, range: IntRange, groups: Array<MatchGroup>, indexInScanner: Int = -1)","description":"org.codroid.textmate.regex.MatchResult.MatchResult","location":"codroid-textmate/org.codroid.textmate.regex/-match-result/-match-result.html","searchKeys":["MatchResult","fun MatchResult(value: String, range: IntRange, groups: Array<MatchGroup>, indexInScanner: Int = -1)","org.codroid.textmate.regex.MatchResult.MatchResult"]},{"name":"fun MatchRule(id: RuleId, name: String?, contentName: String? = null, match: String, captures: Array<CaptureRule?>)","description":"org.codroid.textmate.rule.MatchRule.MatchRule","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/-match-rule.html","searchKeys":["MatchRule","fun MatchRule(id: RuleId, name: String?, contentName: String? = null, match: String, captures: Array<CaptureRule?>)","org.codroid.textmate.rule.MatchRule.MatchRule"]},{"name":"fun MatcherWithPriority(matcher: Matcher<T>, priority: Priority)","description":"org.codroid.textmate.MatcherWithPriority.MatcherWithPriority","location":"codroid-textmate/org.codroid.textmate/-matcher-with-priority/-matcher-with-priority.html","searchKeys":["MatcherWithPriority","fun MatcherWithPriority(matcher: Matcher<T>, priority: Priority)","org.codroid.textmate.MatcherWithPriority.MatcherWithPriority"]},{"name":"fun ParsedThemeRule(scope: ScopeName, parentScopes: List<ScopeName>?, index: Int, fontStyle: FontStyle, foreground: String?, background: String?)","description":"org.codroid.textmate.theme.ParsedThemeRule.ParsedThemeRule","location":"codroid-textmate/org.codroid.textmate.theme/-parsed-theme-rule/-parsed-theme-rule.html","searchKeys":["ParsedThemeRule","fun ParsedThemeRule(scope: ScopeName, parentScopes: List<ScopeName>?, index: Int, fontStyle: FontStyle, foreground: String?, background: String?)","org.codroid.textmate.theme.ParsedThemeRule.ParsedThemeRule"]},{"name":"fun PrepareRuleResult(ruleScanner: CompiledRule, findOptions: FindOption)","description":"org.codroid.textmate.grammar.tokenize.PrepareRuleResult.PrepareRuleResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-prepare-rule-result/-prepare-rule-result.html","searchKeys":["PrepareRuleResult","fun PrepareRuleResult(ruleScanner: CompiledRule, findOptions: FindOption)","org.codroid.textmate.grammar.tokenize.PrepareRuleResult.PrepareRuleResult"]},{"name":"fun RawGrammar(repository: RawRepository = RawRepository(), scopeName: ScopeName = \"\", patterns: Array<RawRule> = arrayOf(), injections: Map<String, RawRule> = emptyMap(), injectionSelector: String? = null, fileTypes: Array<String>? = null, name: String? = null, firstLineMatch: String? = null)","description":"org.codroid.textmate.grammar.RawGrammar.RawGrammar","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/-raw-grammar.html","searchKeys":["RawGrammar","fun RawGrammar(repository: RawRepository = RawRepository(), scopeName: ScopeName = \"\", patterns: Array<RawRule> = arrayOf(), injections: Map<String, RawRule> = emptyMap(), injectionSelector: String? = null, fileTypes: Array<String>? = null, name: String? = null, firstLineMatch: String? = null)","org.codroid.textmate.grammar.RawGrammar.RawGrammar"]},{"name":"fun RawRule(id: RuleId? = null, include: String? = null, name: String? = null, contentName: String? = null, match: String? = null, captures: RawCaptures? = null, begin: String? = null, beginCaptures: RawCaptures? = null, end: String? = null, endCaptures: RawCaptures? = null, while_: String? = null, whileCaptures: RawCaptures? = null, patterns: Array<RawRule>? = null, repository: RawRepository? = null, applyEndPatternLast: Boolean? = null)","description":"org.codroid.textmate.grammar.RawRule.RawRule","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/-raw-rule.html","searchKeys":["RawRule","fun RawRule(id: RuleId? = null, include: String? = null, name: String? = null, contentName: String? = null, match: String? = null, captures: RawCaptures? = null, begin: String? = null, beginCaptures: RawCaptures? = null, end: String? = null, endCaptures: RawCaptures? = null, while_: String? = null, whileCaptures: RawCaptures? = null, patterns: Array<RawRule>? = null, repository: RawRepository? = null, applyEndPatternLast: Boolean? = null)","org.codroid.textmate.grammar.RawRule.RawRule"]},{"name":"fun RawTheme(name: String? = null, settings: Array<RawThemeSetting>? = null)","description":"org.codroid.textmate.theme.RawTheme.RawTheme","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme/-raw-theme.html","searchKeys":["RawTheme","fun RawTheme(name: String? = null, settings: Array<RawThemeSetting>? = null)","org.codroid.textmate.theme.RawTheme.RawTheme"]},{"name":"fun RawThemeSetting(name: String? = null, scope: Array<ScopePattern>? = null, settings: Setting? = null)","description":"org.codroid.textmate.theme.RawThemeSetting.RawThemeSetting","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting/-raw-theme-setting.html","searchKeys":["RawThemeSetting","fun RawThemeSetting(name: String? = null, scope: Array<ScopePattern>? = null, settings: Setting? = null)","org.codroid.textmate.theme.RawThemeSetting.RawThemeSetting"]},{"name":"fun RegExpSource(regExpSource: String, ruleId: RuleId)","description":"org.codroid.textmate.rule.RegExpSource.RegExpSource","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/-reg-exp-source.html","searchKeys":["RegExpSource","fun RegExpSource(regExpSource: String, ruleId: RuleId)","org.codroid.textmate.rule.RegExpSource.RegExpSource"]},{"name":"fun RegExpSourceAnchorCache(a0g0: String, a0g1: String, a1g0: String, a1g1: String)","description":"org.codroid.textmate.rule.RegExpSourceAnchorCache.RegExpSourceAnchorCache","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-anchor-cache/-reg-exp-source-anchor-cache.html","searchKeys":["RegExpSourceAnchorCache","fun RegExpSourceAnchorCache(a0g0: String, a0g1: String, a1g0: String, a1g1: String)","org.codroid.textmate.rule.RegExpSourceAnchorCache.RegExpSourceAnchorCache"]},{"name":"fun RegExpSourceList(items: MutableList<RegExpSource> = mutableListOf(), hasAnchors: Boolean = false, cached: CompiledRule? = null, anchorCache: RegExpSourceListAnchorCache = RegExpSourceListAnchorCache())","description":"org.codroid.textmate.rule.RegExpSourceList.RegExpSourceList","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/-reg-exp-source-list.html","searchKeys":["RegExpSourceList","fun RegExpSourceList(items: MutableList<RegExpSource> = mutableListOf(), hasAnchors: Boolean = false, cached: CompiledRule? = null, anchorCache: RegExpSourceListAnchorCache = RegExpSourceListAnchorCache())","org.codroid.textmate.rule.RegExpSourceList.RegExpSourceList"]},{"name":"fun RegExpSourceListAnchorCache(a0g0: CompiledRule? = null, a0g1: CompiledRule? = null, a1g0: CompiledRule? = null, a1g1: CompiledRule? = null)","description":"org.codroid.textmate.rule.RegExpSourceListAnchorCache.RegExpSourceListAnchorCache","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list-anchor-cache/-reg-exp-source-list-anchor-cache.html","searchKeys":["RegExpSourceListAnchorCache","fun RegExpSourceListAnchorCache(a0g0: CompiledRule? = null, a0g1: CompiledRule? = null, a1g0: CompiledRule? = null, a1g1: CompiledRule? = null)","org.codroid.textmate.rule.RegExpSourceListAnchorCache.RegExpSourceListAnchorCache"]},{"name":"fun Registry(options: RegistryOptions)","description":"org.codroid.textmate.Registry.Registry","location":"codroid-textmate/org.codroid.textmate/-registry/-registry.html","searchKeys":["Registry","fun Registry(options: RegistryOptions)","org.codroid.textmate.Registry.Registry"]},{"name":"fun RegistryOptions(regexLib: RegexLib = StandardRegex(), theme: RawTheme? = null, colorMap: Array<String>? = null, loadGrammar: (ScopeName) -> RawGrammar?? = null, getInjections: (ScopeName) -> Array<ScopeName>?? = null)","description":"org.codroid.textmate.RegistryOptions.RegistryOptions","location":"codroid-textmate/org.codroid.textmate/-registry-options/-registry-options.html","searchKeys":["RegistryOptions","fun RegistryOptions(regexLib: RegexLib = StandardRegex(), theme: RawTheme? = null, colorMap: Array<String>? = null, loadGrammar: (ScopeName) -> RawGrammar?? = null, getInjections: (ScopeName) -> Array<ScopeName>?? = null)","org.codroid.textmate.RegistryOptions.RegistryOptions"]},{"name":"fun RegularExp(pattern: String)","description":"org.codroid.textmate.regex.RegularExp.RegularExp","location":"codroid-textmate/org.codroid.textmate.regex/-regular-exp/-regular-exp.html","searchKeys":["RegularExp","fun RegularExp(pattern: String)","org.codroid.textmate.regex.RegularExp.RegularExp"]},{"name":"fun RelativeReference(ruleName: ScopeName)","description":"org.codroid.textmate.grammar.RelativeReference.RelativeReference","location":"codroid-textmate/org.codroid.textmate.grammar/-relative-reference/-relative-reference.html","searchKeys":["RelativeReference","fun RelativeReference(ruleName: ScopeName)","org.codroid.textmate.grammar.RelativeReference.RelativeReference"]},{"name":"fun Rule()","description":"org.codroid.textmate.rule.Rule.Rule","location":"codroid-textmate/org.codroid.textmate.rule/-rule/-rule.html","searchKeys":["Rule","fun Rule()","org.codroid.textmate.rule.Rule.Rule"]},{"name":"fun RuleId(id: Int)","description":"org.codroid.textmate.rule.RuleId.RuleId","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/-rule-id.html","searchKeys":["RuleId","fun RuleId(id: Int)","org.codroid.textmate.rule.RuleId.RuleId"]},{"name":"fun ScopeDependencyProcessor(repo: GrammarRepository, initialScopeName: ScopeName)","description":"org.codroid.textmate.grammar.ScopeDependencyProcessor.ScopeDependencyProcessor","location":"codroid-textmate/org.codroid.textmate.grammar/-scope-dependency-processor/-scope-dependency-processor.html","searchKeys":["ScopeDependencyProcessor","fun ScopeDependencyProcessor(repo: GrammarRepository, initialScopeName: ScopeName)","org.codroid.textmate.grammar.ScopeDependencyProcessor.ScopeDependencyProcessor"]},{"name":"fun ScopeStack(parent: ScopeStack?, scopeName: ScopeName)","description":"org.codroid.textmate.theme.ScopeStack.ScopeStack","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/-scope-stack.html","searchKeys":["ScopeStack","fun ScopeStack(parent: ScopeStack?, scopeName: ScopeName)","org.codroid.textmate.theme.ScopeStack.ScopeStack"]},{"name":"fun SelfReference()","description":"org.codroid.textmate.grammar.SelfReference.SelfReference","location":"codroid-textmate/org.codroid.textmate.grammar/-self-reference/-self-reference.html","searchKeys":["SelfReference","fun SelfReference()","org.codroid.textmate.grammar.SelfReference.SelfReference"]},{"name":"fun Setting(fontStyle: String? = null, foreground: String? = null, background: String? = null)","description":"org.codroid.textmate.theme.Setting.Setting","location":"codroid-textmate/org.codroid.textmate.theme/-setting/-setting.html","searchKeys":["Setting","fun Setting(fontStyle: String? = null, foreground: String? = null, background: String? = null)","org.codroid.textmate.theme.Setting.Setting"]},{"name":"fun StandardRegex()","description":"org.codroid.textmate.regex.StandardRegex.StandardRegex","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex/-standard-regex.html","searchKeys":["StandardRegex","fun StandardRegex()","org.codroid.textmate.regex.StandardRegex.StandardRegex"]},{"name":"fun StandardRegexMatch(result: MatchResult, source: String)","description":"org.codroid.textmate.regex.StandardRegexMatch.StandardRegexMatch","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex-match/-standard-regex-match.html","searchKeys":["StandardRegexMatch","fun StandardRegexMatch(result: MatchResult, source: String)","org.codroid.textmate.regex.StandardRegexMatch.StandardRegexMatch"]},{"name":"fun StandardRegexScanner(patterns: Array<String>)","description":"org.codroid.textmate.regex.StandardRegexScanner.StandardRegexScanner","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex-scanner/-standard-regex-scanner.html","searchKeys":["StandardRegexScanner","fun StandardRegexScanner(patterns: Array<String>)","org.codroid.textmate.regex.StandardRegexScanner.StandardRegexScanner"]},{"name":"fun StandardRegularExp(pattern: String)","description":"org.codroid.textmate.regex.StandardRegularExp.StandardRegularExp","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regular-exp/-standard-regular-exp.html","searchKeys":["StandardRegularExp","fun StandardRegularExp(pattern: String)","org.codroid.textmate.regex.StandardRegularExp.StandardRegularExp"]},{"name":"fun StandardResult(matchResult: MatchResult, indexInScanner: Int)","description":"org.codroid.textmate.regex.StandardResult.StandardResult","location":"codroid-textmate/org.codroid.textmate.regex/-standard-result/-standard-result.html","searchKeys":["StandardResult","fun StandardResult(matchResult: MatchResult, indexInScanner: Int)","org.codroid.textmate.regex.StandardResult.StandardResult"]},{"name":"fun StandardSearcher(patterns: Array<String>)","description":"org.codroid.textmate.regex.StandardSearcher.StandardSearcher","location":"codroid-textmate/org.codroid.textmate.regex/-standard-searcher/-standard-searcher.html","searchKeys":["StandardSearcher","fun StandardSearcher(patterns: Array<String>)","org.codroid.textmate.regex.StandardSearcher.StandardSearcher"]},{"name":"fun StateStack(parent: StateStack?, ruleId: RuleId, enterPos: Int, anchorPos: Int, beginRuleCapturedEOL: Boolean, endRule: String?, nameScopesList: AttributedScopeStack, contentNameScopesList: AttributedScopeStack)","description":"org.codroid.textmate.grammar.StateStack.StateStack","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/-state-stack.html","searchKeys":["StateStack","fun StateStack(parent: StateStack?, ruleId: RuleId, enterPos: Int, anchorPos: Int, beginRuleCapturedEOL: Boolean, endRule: String?, nameScopesList: AttributedScopeStack, contentNameScopesList: AttributedScopeStack)","org.codroid.textmate.grammar.StateStack.StateStack"]},{"name":"fun StyleAttributes(fontStyle: FontStyle, foregroundId: UInt, backgroundId: UInt)","description":"org.codroid.textmate.theme.StyleAttributes.StyleAttributes","location":"codroid-textmate/org.codroid.textmate.theme/-style-attributes/-style-attributes.html","searchKeys":["StyleAttributes","fun StyleAttributes(fontStyle: FontStyle, foregroundId: UInt, backgroundId: UInt)","org.codroid.textmate.theme.StyleAttributes.StyleAttributes"]},{"name":"fun SyncRegistry(theme: Theme, regexLib: RegexLib)","description":"org.codroid.textmate.SyncRegistry.SyncRegistry","location":"codroid-textmate/org.codroid.textmate/-sync-registry/-sync-registry.html","searchKeys":["SyncRegistry","fun SyncRegistry(theme: Theme, regexLib: RegexLib)","org.codroid.textmate.SyncRegistry.SyncRegistry"]},{"name":"fun TextMateException(msg: String)","description":"org.codroid.textmate.exceptions.TextMateException.TextMateException","location":"codroid-textmate/org.codroid.textmate.exceptions/-text-mate-exception/-text-mate-exception.html","searchKeys":["TextMateException","fun TextMateException(msg: String)","org.codroid.textmate.exceptions.TextMateException.TextMateException"]},{"name":"fun Theme(colorMap: ColorMap, defaults: StyleAttributes, root: ThemeTrieElement)","description":"org.codroid.textmate.theme.Theme.Theme","location":"codroid-textmate/org.codroid.textmate.theme/-theme/-theme.html","searchKeys":["Theme","fun Theme(colorMap: ColorMap, defaults: StyleAttributes, root: ThemeTrieElement)","org.codroid.textmate.theme.Theme.Theme"]},{"name":"fun ThemeTrieElement(mainRule: ThemeTrieElementRule, rulesWithParentScopes: MutableList<ThemeTrieElementRule> = mutableListOf(), children: TrieChildrenMap = TrieChildrenMap())","description":"org.codroid.textmate.theme.ThemeTrieElement.ThemeTrieElement","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element/-theme-trie-element.html","searchKeys":["ThemeTrieElement","fun ThemeTrieElement(mainRule: ThemeTrieElementRule, rulesWithParentScopes: MutableList<ThemeTrieElementRule> = mutableListOf(), children: TrieChildrenMap = TrieChildrenMap())","org.codroid.textmate.theme.ThemeTrieElement.ThemeTrieElement"]},{"name":"fun ThemeTrieElementRule(scopeDepth: Int, parentScopes: List<ScopeName>?, fontStyle: FontStyle, foreground: UInt, background: UInt)","description":"org.codroid.textmate.theme.ThemeTrieElementRule.ThemeTrieElementRule","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/-theme-trie-element-rule.html","searchKeys":["ThemeTrieElementRule","fun ThemeTrieElementRule(scopeDepth: Int, parentScopes: List<ScopeName>?, fontStyle: FontStyle, foreground: UInt, background: UInt)","org.codroid.textmate.theme.ThemeTrieElementRule.ThemeTrieElementRule"]},{"name":"fun Token(startIndex: Int, endIndex: Int, scopes: Array<String>)","description":"org.codroid.textmate.Token.Token","location":"codroid-textmate/org.codroid.textmate/-token/-token.html","searchKeys":["Token","fun Token(startIndex: Int, endIndex: Int, scopes: Array<String>)","org.codroid.textmate.Token.Token"]},{"name":"fun TokenTypeMatcher(matcher: Matcher<Array<String>>, type: StandardTokenType)","description":"org.codroid.textmate.grammar.TokenTypeMatcher.TokenTypeMatcher","location":"codroid-textmate/org.codroid.textmate.grammar/-token-type-matcher/-token-type-matcher.html","searchKeys":["TokenTypeMatcher","fun TokenTypeMatcher(matcher: Matcher<Array<String>>, type: StandardTokenType)","org.codroid.textmate.grammar.TokenTypeMatcher.TokenTypeMatcher"]},{"name":"fun TokenizeLineResult(tokens: Array<Token>, ruleStack: StateStack, stoppedEarly: Boolean)","description":"org.codroid.textmate.TokenizeLineResult.TokenizeLineResult","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result/-tokenize-line-result.html","searchKeys":["TokenizeLineResult","fun TokenizeLineResult(tokens: Array<Token>, ruleStack: StateStack, stoppedEarly: Boolean)","org.codroid.textmate.TokenizeLineResult.TokenizeLineResult"]},{"name":"fun TokenizeLineResult2(tokens: UIntArray, ruleStack: StateStack, stoppedEarly: Boolean)","description":"org.codroid.textmate.TokenizeLineResult2.TokenizeLineResult2","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result2/-tokenize-line-result2.html","searchKeys":["TokenizeLineResult2","fun TokenizeLineResult2(tokens: UIntArray, ruleStack: StateStack, stoppedEarly: Boolean)","org.codroid.textmate.TokenizeLineResult2.TokenizeLineResult2"]},{"name":"fun TokenizeResult(lineLength: Int, lineTokens: LineTokens, ruleStack: StateStack, stoppedEarly: Boolean)","description":"org.codroid.textmate.grammar.Grammar.TokenizeResult.TokenizeResult","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/-tokenize-result/-tokenize-result.html","searchKeys":["TokenizeResult","fun TokenizeResult(lineLength: Int, lineTokens: LineTokens, ruleStack: StateStack, stoppedEarly: Boolean)","org.codroid.textmate.grammar.Grammar.TokenizeResult.TokenizeResult"]},{"name":"fun TokenizeStringResult(stack: StateStack, stoppedEarly: Boolean)","description":"org.codroid.textmate.grammar.tokenize.TokenizeStringResult.TokenizeStringResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-tokenize-string-result/-tokenize-string-result.html","searchKeys":["TokenizeStringResult","fun TokenizeStringResult(stack: StateStack, stoppedEarly: Boolean)","org.codroid.textmate.grammar.tokenize.TokenizeStringResult.TokenizeStringResult"]},{"name":"fun TopLevelReference(scopeName: ScopeName)","description":"org.codroid.textmate.grammar.TopLevelReference.TopLevelReference","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-reference/-top-level-reference.html","searchKeys":["TopLevelReference","fun TopLevelReference(scopeName: ScopeName)","org.codroid.textmate.grammar.TopLevelReference.TopLevelReference"]},{"name":"fun TopLevelRepositoryReference(scopeName: ScopeName, ruleName: String)","description":"org.codroid.textmate.grammar.TopLevelRepositoryReference.TopLevelRepositoryReference","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-reference/-top-level-repository-reference.html","searchKeys":["TopLevelRepositoryReference","fun TopLevelRepositoryReference(scopeName: ScopeName, ruleName: String)","org.codroid.textmate.grammar.TopLevelRepositoryReference.TopLevelRepositoryReference"]},{"name":"fun TopLevelRepositoryRuleReference(scopeName: ScopeName, ruleName: String)","description":"org.codroid.textmate.grammar.TopLevelRepositoryRuleReference.TopLevelRepositoryRuleReference","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-rule-reference/-top-level-repository-rule-reference.html","searchKeys":["TopLevelRepositoryRuleReference","fun TopLevelRepositoryRuleReference(scopeName: ScopeName, ruleName: String)","org.codroid.textmate.grammar.TopLevelRepositoryRuleReference.TopLevelRepositoryRuleReference"]},{"name":"fun TopLevelRuleReference(scopeName: ScopeName)","description":"org.codroid.textmate.grammar.TopLevelRuleReference.TopLevelRuleReference","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-rule-reference/-top-level-rule-reference.html","searchKeys":["TopLevelRuleReference","fun TopLevelRuleReference(scopeName: ScopeName)","org.codroid.textmate.grammar.TopLevelRuleReference.TopLevelRuleReference"]},{"name":"fun WhileCheckResult(stack: StateStack, linePos: Int, anchorPosition: Int, isFirstLine: Boolean)","description":"org.codroid.textmate.grammar.tokenize.WhileCheckResult.WhileCheckResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-while-check-result/-while-check-result.html","searchKeys":["WhileCheckResult","fun WhileCheckResult(stack: StateStack, linePos: Int, anchorPosition: Int, isFirstLine: Boolean)","org.codroid.textmate.grammar.tokenize.WhileCheckResult.WhileCheckResult"]},{"name":"fun acceptOverwrite(scopeDepth: Int, fontStyle: FontStyle, foreground: UInt, background: UInt)","description":"org.codroid.textmate.theme.ThemeTrieElementRule.acceptOverwrite","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/accept-overwrite.html","searchKeys":["acceptOverwrite","fun acceptOverwrite(scopeDepth: Int, fontStyle: FontStyle, foreground: UInt, background: UInt)","org.codroid.textmate.theme.ThemeTrieElementRule.acceptOverwrite"]},{"name":"fun add(reference: AbsoluteRuleReference)","description":"org.codroid.textmate.grammar.ExternalReferenceCollector.add","location":"codroid-textmate/org.codroid.textmate.grammar/-external-reference-collector/add.html","searchKeys":["add","fun add(reference: AbsoluteRuleReference)","org.codroid.textmate.grammar.ExternalReferenceCollector.add"]},{"name":"fun addGrammar(grammar: RawGrammar, injectionScopeName: Array<ScopeName>?)","description":"org.codroid.textmate.SyncRegistry.addGrammar","location":"codroid-textmate/org.codroid.textmate/-sync-registry/add-grammar.html","searchKeys":["addGrammar","fun addGrammar(grammar: RawGrammar, injectionScopeName: Array<ScopeName>?)","org.codroid.textmate.SyncRegistry.addGrammar"]},{"name":"fun addGrammar(rawGrammar: RawGrammar, injections: Array<String> = emptyArray(), initialLanguage: Int = 0, embeddedLanguages: EmbeddedLanguagesMap? = null): Tokenizer","description":"org.codroid.textmate.Registry.addGrammar","location":"codroid-textmate/org.codroid.textmate/-registry/add-grammar.html","searchKeys":["addGrammar","fun addGrammar(rawGrammar: RawGrammar, injections: Array<String> = emptyArray(), initialLanguage: Int = 0, embeddedLanguages: EmbeddedLanguagesMap? = null): Tokenizer","org.codroid.textmate.Registry.addGrammar"]},{"name":"fun basename(path: String): String","description":"org.codroid.textmate.basename","location":"codroid-textmate/org.codroid.textmate/basename.html","searchKeys":["basename","fun basename(path: String): String","org.codroid.textmate.basename"]},{"name":"fun buildAnchorCache(): RegExpSourceAnchorCache","description":"org.codroid.textmate.rule.RegExpSource.buildAnchorCache","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/build-anchor-cache.html","searchKeys":["buildAnchorCache","fun buildAnchorCache(): RegExpSourceAnchorCache","org.codroid.textmate.rule.RegExpSource.buildAnchorCache"]},{"name":"fun checkWhileConditions(grammar: Grammar, lineText: String, isFirstLine_: Boolean, linePos_: Int, stack_: StateStack, lineTokens: LineTokens): WhileCheckResult","description":"org.codroid.textmate.grammar.tokenize.checkWhileConditions","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/check-while-conditions.html","searchKeys":["checkWhileConditions","fun checkWhileConditions(grammar: Grammar, lineText: String, isFirstLine_: Boolean, linePos_: Int, stack_: StateStack, lineTokens: LineTokens): WhileCheckResult","org.codroid.textmate.grammar.tokenize.checkWhileConditions"]},{"name":"fun collectExternalReferencesInRules(rules: Array<RawRule>, context: ContextWithRepository, result: ExternalReferenceCollector)","description":"org.codroid.textmate.grammar.collectExternalReferencesInRules","location":"codroid-textmate/org.codroid.textmate.grammar/collect-external-references-in-rules.html","searchKeys":["collectExternalReferencesInRules","fun collectExternalReferencesInRules(rules: Array<RawRule>, context: ContextWithRepository, result: ExternalReferenceCollector)","org.codroid.textmate.grammar.collectExternalReferencesInRules"]},{"name":"fun collectExternalReferencesInTopLevelRepositoryRule(ruleName: String, context: ContextWithRepository, result: ExternalReferenceCollector)","description":"org.codroid.textmate.grammar.collectExternalReferencesInTopLevelRepositoryRule","location":"codroid-textmate/org.codroid.textmate.grammar/collect-external-references-in-top-level-repository-rule.html","searchKeys":["collectExternalReferencesInTopLevelRepositoryRule","fun collectExternalReferencesInTopLevelRepositoryRule(ruleName: String, context: ContextWithRepository, result: ExternalReferenceCollector)","org.codroid.textmate.grammar.collectExternalReferencesInTopLevelRepositoryRule"]},{"name":"fun collectExternalReferencesInTopLevelRule(context: Context, result: ExternalReferenceCollector)","description":"org.codroid.textmate.grammar.collectExternalReferencesInTopLevelRule","location":"codroid-textmate/org.codroid.textmate.grammar/collect-external-references-in-top-level-rule.html","searchKeys":["collectExternalReferencesInTopLevelRule","fun collectExternalReferencesInTopLevelRule(context: Context, result: ExternalReferenceCollector)","org.codroid.textmate.grammar.collectExternalReferencesInTopLevelRule"]},{"name":"fun collectInjections(result: MutableList<Injection>, selector: String, rule: RawRule, ruleFactoryHelper: RuleFactoryHelper, grammar: RawGrammar)","description":"org.codroid.textmate.grammar.collectInjections","location":"codroid-textmate/org.codroid.textmate.grammar/collect-injections.html","searchKeys":["collectInjections","fun collectInjections(result: MutableList<Injection>, selector: String, rule: RawRule, ruleFactoryHelper: RuleFactoryHelper, grammar: RawGrammar)","org.codroid.textmate.grammar.collectInjections"]},{"name":"fun collectReferencesOfReference(reference: AbsoluteRuleReference, baseGrammarScopeName: ScopeName, repo: GrammarRepository, result: ExternalReferenceCollector)","description":"org.codroid.textmate.grammar.collectReferencesOfReference","location":"codroid-textmate/org.codroid.textmate.grammar/collect-references-of-reference.html","searchKeys":["collectReferencesOfReference","fun collectReferencesOfReference(reference: AbsoluteRuleReference, baseGrammarScopeName: ScopeName, repo: GrammarRepository, result: ExternalReferenceCollector)","org.codroid.textmate.grammar.collectReferencesOfReference"]},{"name":"fun compile(onigLib: RegexLib): CompiledRule","description":"org.codroid.textmate.rule.RegExpSourceList.compile","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/compile.html","searchKeys":["compile","fun compile(onigLib: RegexLib): CompiledRule","org.codroid.textmate.rule.RegExpSourceList.compile"]},{"name":"fun compileAG(onigLib: RegexLib, allowA: Boolean, allowG: Boolean): CompiledRule","description":"org.codroid.textmate.rule.RegExpSourceList.compileAG","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/compile-a-g.html","searchKeys":["compileAG","fun compileAG(onigLib: RegexLib, allowA: Boolean, allowG: Boolean): CompiledRule","org.codroid.textmate.rule.RegExpSourceList.compileAG"]},{"name":"fun compileWhile(grammar: RuleRegistryRegexLib, endRegexSource: String?): CompiledRule","description":"org.codroid.textmate.rule.BeginWhileRule.compileWhile","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/compile-while.html","searchKeys":["compileWhile","fun compileWhile(grammar: RuleRegistryRegexLib, endRegexSource: String?): CompiledRule","org.codroid.textmate.rule.BeginWhileRule.compileWhile"]},{"name":"fun compileWhileAG(grammar: RuleRegistryRegexLib, endRegexSource: String?, allowA: Boolean, allowG: Boolean): CompiledRule","description":"org.codroid.textmate.rule.BeginWhileRule.compileWhileAG","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/compile-while-a-g.html","searchKeys":["compileWhileAG","fun compileWhileAG(grammar: RuleRegistryRegexLib, endRegexSource: String?, allowA: Boolean, allowG: Boolean): CompiledRule","org.codroid.textmate.rule.BeginWhileRule.compileWhileAG"]},{"name":"fun containsBalancedBrackets(encodedTokenAttributes: EncodedToken): Boolean","description":"org.codroid.textmate.EncodedTokenAttributes.containsBalancedBrackets","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/contains-balanced-brackets.html","searchKeys":["containsBalancedBrackets","fun containsBalancedBrackets(encodedTokenAttributes: EncodedToken): Boolean","org.codroid.textmate.EncodedTokenAttributes.containsBalancedBrackets"]},{"name":"fun createCaptureRule(helper: RuleFactoryHelper, name: String? = null, contentName: String? = null, retokenizeCaptureWithRuleId: RuleId = RuleId.from(0)): CaptureRule","description":"org.codroid.textmate.rule.RuleFactory.createCaptureRule","location":"codroid-textmate/org.codroid.textmate.rule/-rule-factory/create-capture-rule.html","searchKeys":["createCaptureRule","fun createCaptureRule(helper: RuleFactoryHelper, name: String? = null, contentName: String? = null, retokenizeCaptureWithRuleId: RuleId = RuleId.from(0)): CaptureRule","org.codroid.textmate.rule.RuleFactory.createCaptureRule"]},{"name":"fun createFromParsedTheme(source: MutableList<ParsedThemeRule>, colorMap: Array<String>? = null): Theme","description":"org.codroid.textmate.theme.Theme.Companion.createFromParsedTheme","location":"codroid-textmate/org.codroid.textmate.theme/-theme/-companion/create-from-parsed-theme.html","searchKeys":["createFromParsedTheme","fun createFromParsedTheme(source: MutableList<ParsedThemeRule>, colorMap: Array<String>? = null): Theme","org.codroid.textmate.theme.Theme.Companion.createFromParsedTheme"]},{"name":"fun createFromRawTheme(source: RawTheme? = null, colorMap: Array<String>? = null): Theme","description":"org.codroid.textmate.theme.Theme.Companion.createFromRawTheme","location":"codroid-textmate/org.codroid.textmate.theme/-theme/-companion/create-from-raw-theme.html","searchKeys":["createFromRawTheme","fun createFromRawTheme(source: RawTheme? = null, colorMap: Array<String>? = null): Theme","org.codroid.textmate.theme.Theme.Companion.createFromRawTheme"]},{"name":"fun createGrammar(scopeName: ScopeName, grammar: RawGrammar, initialLanguage: Int, embeddedLanguages: EmbeddedLanguagesMap?, tokenTypes: TokenTypeMap?, balancedBracketSelectors: BalancedBracketSelectors?, grammarRepository: GrammarReposThemeProvider, regexLib: RegexLib): Grammar","description":"org.codroid.textmate.grammar.createGrammar","location":"codroid-textmate/org.codroid.textmate.grammar/create-grammar.html","searchKeys":["createGrammar","fun createGrammar(scopeName: ScopeName, grammar: RawGrammar, initialLanguage: Int, embeddedLanguages: EmbeddedLanguagesMap?, tokenTypes: TokenTypeMap?, balancedBracketSelectors: BalancedBracketSelectors?, grammarRepository: GrammarReposThemeProvider, regexLib: RegexLib): Grammar","org.codroid.textmate.grammar.createGrammar"]},{"name":"fun createRegistry(regexLib: RegexLib = StandardRegex(), theme: RawTheme? = null, colorMap: Array<String>? = null, loadGrammar: (ScopeName) -> RawGrammar?? = null, getInjections: (ScopeName) -> Array<ScopeName>?? = null): Registry","description":"org.codroid.textmate.createRegistry","location":"codroid-textmate/org.codroid.textmate/create-registry.html","searchKeys":["createRegistry","fun createRegistry(regexLib: RegexLib = StandardRegex(), theme: RawTheme? = null, colorMap: Array<String>? = null, loadGrammar: (ScopeName) -> RawGrammar?? = null, getInjections: (ScopeName) -> Array<ScopeName>?? = null): Registry","org.codroid.textmate.createRegistry"]},{"name":"fun createRoot(scopeName: ScopeName, tokenAttributes: EncodedToken): AttributedScopeStack","description":"org.codroid.textmate.grammar.AttributedScopeStack.Companion.createRoot","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/-companion/create-root.html","searchKeys":["createRoot","fun createRoot(scopeName: ScopeName, tokenAttributes: EncodedToken): AttributedScopeStack","org.codroid.textmate.grammar.AttributedScopeStack.Companion.createRoot"]},{"name":"fun createRootAndLookUpScopeName(scopeName: ScopeName, tokenAttributes: EncodedToken, grammar: Grammar): AttributedScopeStack","description":"org.codroid.textmate.grammar.AttributedScopeStack.Companion.createRootAndLookUpScopeName","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/-companion/create-root-and-look-up-scope-name.html","searchKeys":["createRootAndLookUpScopeName","fun createRootAndLookUpScopeName(scopeName: ScopeName, tokenAttributes: EncodedToken, grammar: Grammar): AttributedScopeStack","org.codroid.textmate.grammar.AttributedScopeStack.Companion.createRootAndLookUpScopeName"]},{"name":"fun debugBeginRegExp(): String","description":"org.codroid.textmate.rule.BeginEndRule.debugBeginRegExp","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/debug-begin-reg-exp.html","searchKeys":["debugBeginRegExp","fun debugBeginRegExp(): String","org.codroid.textmate.rule.BeginEndRule.debugBeginRegExp"]},{"name":"fun debugBeginRegExp(): String","description":"org.codroid.textmate.rule.BeginWhileRule.debugBeginRegExp","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/debug-begin-reg-exp.html","searchKeys":["debugBeginRegExp","fun debugBeginRegExp(): String","org.codroid.textmate.rule.BeginWhileRule.debugBeginRegExp"]},{"name":"fun debugEndRegExp(): String","description":"org.codroid.textmate.rule.BeginEndRule.debugEndRegExp","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/debug-end-reg-exp.html","searchKeys":["debugEndRegExp","fun debugEndRegExp(): String","org.codroid.textmate.rule.BeginEndRule.debugEndRegExp"]},{"name":"fun debugMatchRegExp(): String","description":"org.codroid.textmate.rule.MatchRule.debugMatchRegExp","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/debug-match-reg-exp.html","searchKeys":["debugMatchRegExp","fun debugMatchRegExp(): String","org.codroid.textmate.rule.MatchRule.debugMatchRegExp"]},{"name":"fun debugName(): String","description":"org.codroid.textmate.rule.Rule.debugName","location":"codroid-textmate/org.codroid.textmate.rule/-rule/debug-name.html","searchKeys":["debugName","fun debugName(): String","org.codroid.textmate.rule.Rule.debugName"]},{"name":"fun debugWhileRegExp(): String","description":"org.codroid.textmate.rule.BeginWhileRule.debugWhileRegExp","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/debug-while-reg-exp.html","searchKeys":["debugWhileRegExp","fun debugWhileRegExp(): String","org.codroid.textmate.rule.BeginWhileRule.debugWhileRegExp"]},{"name":"fun dispose()","description":"org.codroid.textmate.Registry.dispose","location":"codroid-textmate/org.codroid.textmate/-registry/dispose.html","searchKeys":["dispose","fun dispose()","org.codroid.textmate.Registry.dispose"]},{"name":"fun dispose()","description":"org.codroid.textmate.SyncRegistry.dispose","location":"codroid-textmate/org.codroid.textmate/-sync-registry/dispose.html","searchKeys":["dispose","fun dispose()","org.codroid.textmate.SyncRegistry.dispose"]},{"name":"fun dispose()","description":"org.codroid.textmate.grammar.Grammar.dispose","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/dispose.html","searchKeys":["dispose","fun dispose()","org.codroid.textmate.grammar.Grammar.dispose"]},{"name":"fun dispose()","description":"org.codroid.textmate.rule.CompiledRule.dispose","location":"codroid-textmate/org.codroid.textmate.rule/-compiled-rule/dispose.html","searchKeys":["dispose","fun dispose()","org.codroid.textmate.rule.CompiledRule.dispose"]},{"name":"fun dispose()","description":"org.codroid.textmate.rule.RegExpSourceList.dispose","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/dispose.html","searchKeys":["dispose","fun dispose()","org.codroid.textmate.rule.RegExpSourceList.dispose"]},{"name":"fun escapeRegExpCharacters(value: String): String","description":"org.codroid.textmate.escapeRegExpCharacters","location":"codroid-textmate/org.codroid.textmate/escape-reg-exp-characters.html","searchKeys":["escapeRegExpCharacters","fun escapeRegExpCharacters(value: String): String","org.codroid.textmate.escapeRegExpCharacters"]},{"name":"fun findNextMatchSync(string: String, startPosition: Int, option: FindOption): FindNextMatchResult?","description":"org.codroid.textmate.rule.CompiledRule.findNextMatchSync","location":"codroid-textmate/org.codroid.textmate.rule/-compiled-rule/find-next-match-sync.html","searchKeys":["findNextMatchSync","fun findNextMatchSync(string: String, startPosition: Int, option: FindOption): FindNextMatchResult?","org.codroid.textmate.rule.CompiledRule.findNextMatchSync"]},{"name":"fun fontStyleToString(fontStyle: FontStyle): String","description":"org.codroid.textmate.theme.fontStyleToString","location":"codroid-textmate/org.codroid.textmate.theme/font-style-to-string.html","searchKeys":["fontStyleToString","fun fontStyleToString(fontStyle: FontStyle): String","org.codroid.textmate.theme.fontStyleToString"]},{"name":"fun from(id: Int): RuleId","description":"org.codroid.textmate.rule.RuleId.Companion.from","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/-companion/from.html","searchKeys":["from","fun from(id: Int): RuleId","org.codroid.textmate.rule.RuleId.Companion.from"]},{"name":"fun from(vararg segments: ScopeName): ScopeStack?","description":"org.codroid.textmate.theme.ScopeStack.Companion.from","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/-companion/from.html","searchKeys":["from","fun from(vararg segments: ScopeName): ScopeStack?","org.codroid.textmate.theme.ScopeStack.Companion.from"]},{"name":"fun get(key: K): V","description":"org.codroid.textmate.CachedFn.get","location":"codroid-textmate/org.codroid.textmate/-cached-fn/get.html","searchKeys":["get","fun get(key: K): V","org.codroid.textmate.CachedFn.get"]},{"name":"fun getBackground(encodedTokenAttributes: EncodedToken): UInt","description":"org.codroid.textmate.EncodedTokenAttributes.getBackground","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/get-background.html","searchKeys":["getBackground","fun getBackground(encodedTokenAttributes: EncodedToken): UInt","org.codroid.textmate.EncodedTokenAttributes.getBackground"]},{"name":"fun getBasicScopeAttributes(scopeName: ScopeName?): BasicScopeAttributes","description":"org.codroid.textmate.grammar.BasicScopesAttributeProvider.getBasicScopeAttributes","location":"codroid-textmate/org.codroid.textmate.grammar/-basic-scopes-attribute-provider/get-basic-scope-attributes.html","searchKeys":["getBasicScopeAttributes","fun getBasicScopeAttributes(scopeName: ScopeName?): BasicScopeAttributes","org.codroid.textmate.grammar.BasicScopesAttributeProvider.getBasicScopeAttributes"]},{"name":"fun getBinaryResult(stack: StateStack, lineLength: Int): UIntArray","description":"org.codroid.textmate.grammar.LineTokens.getBinaryResult","location":"codroid-textmate/org.codroid.textmate.grammar/-line-tokens/get-binary-result.html","searchKeys":["getBinaryResult","fun getBinaryResult(stack: StateStack, lineLength: Int): UIntArray","org.codroid.textmate.grammar.LineTokens.getBinaryResult"]},{"name":"fun getColorMap(): Map<UInt, String>","description":"org.codroid.textmate.Registry.getColorMap","location":"codroid-textmate/org.codroid.textmate/-registry/get-color-map.html","searchKeys":["getColorMap","fun getColorMap(): Map<UInt, String>","org.codroid.textmate.Registry.getColorMap"]},{"name":"fun getColorMap(): Map<UInt, String>","description":"org.codroid.textmate.SyncRegistry.getColorMap","location":"codroid-textmate/org.codroid.textmate/-sync-registry/get-color-map.html","searchKeys":["getColorMap","fun getColorMap(): Map<UInt, String>","org.codroid.textmate.SyncRegistry.getColorMap"]},{"name":"fun getColorMap(): Map<UInt, String>","description":"org.codroid.textmate.theme.ColorMap.getColorMap","location":"codroid-textmate/org.codroid.textmate.theme/-color-map/get-color-map.html","searchKeys":["getColorMap","fun getColorMap(): Map<UInt, String>","org.codroid.textmate.theme.ColorMap.getColorMap"]},{"name":"fun getColorMap(): Map<UInt, String>","description":"org.codroid.textmate.theme.Theme.getColorMap","location":"codroid-textmate/org.codroid.textmate.theme/-theme/get-color-map.html","searchKeys":["getColorMap","fun getColorMap(): Map<UInt, String>","org.codroid.textmate.theme.Theme.getColorMap"]},{"name":"fun getCompiledRuleId(desc: RawRule, helper: RuleFactoryHelper, repository: RawRepository): RuleId","description":"org.codroid.textmate.rule.RuleFactory.getCompiledRuleId","location":"codroid-textmate/org.codroid.textmate.rule/-rule-factory/get-compiled-rule-id.html","searchKeys":["getCompiledRuleId","fun getCompiledRuleId(desc: RawRule, helper: RuleFactoryHelper, repository: RawRepository): RuleId","org.codroid.textmate.rule.RuleFactory.getCompiledRuleId"]},{"name":"fun getContentName(lineText: String, captureIndices: Array<IntRange>): String?","description":"org.codroid.textmate.rule.Rule.getContentName","location":"codroid-textmate/org.codroid.textmate.rule/-rule/get-content-name.html","searchKeys":["getContentName","fun getContentName(lineText: String, captureIndices: Array<IntRange>): String?","org.codroid.textmate.rule.Rule.getContentName"]},{"name":"fun getDefaultAttributes(): BasicScopeAttributes","description":"org.codroid.textmate.grammar.BasicScopesAttributeProvider.getDefaultAttributes","location":"codroid-textmate/org.codroid.textmate.grammar/-basic-scopes-attribute-provider/get-default-attributes.html","searchKeys":["getDefaultAttributes","fun getDefaultAttributes(): BasicScopeAttributes","org.codroid.textmate.grammar.BasicScopesAttributeProvider.getDefaultAttributes"]},{"name":"fun getDefaults(): StyleAttributes","description":"org.codroid.textmate.theme.Theme.getDefaults","location":"codroid-textmate/org.codroid.textmate.theme/-theme/get-defaults.html","searchKeys":["getDefaults","fun getDefaults(): StyleAttributes","org.codroid.textmate.theme.Theme.getDefaults"]},{"name":"fun getEndWithResolvedBackReferences(lineText: String, captureIndices: Array<IntRange>): String","description":"org.codroid.textmate.rule.BeginEndRule.getEndWithResolvedBackReferences","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/get-end-with-resolved-back-references.html","searchKeys":["getEndWithResolvedBackReferences","fun getEndWithResolvedBackReferences(lineText: String, captureIndices: Array<IntRange>): String","org.codroid.textmate.rule.BeginEndRule.getEndWithResolvedBackReferences"]},{"name":"fun getFontStyle(encodedTokenAttributes: EncodedToken): FontStyle","description":"org.codroid.textmate.EncodedTokenAttributes.getFontStyle","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/get-font-style.html","searchKeys":["getFontStyle","fun getFontStyle(encodedTokenAttributes: EncodedToken): FontStyle","org.codroid.textmate.EncodedTokenAttributes.getFontStyle"]},{"name":"fun getForeground(encodedTokenAttributes: EncodedToken): UInt","description":"org.codroid.textmate.EncodedTokenAttributes.getForeground","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/get-foreground.html","searchKeys":["getForeground","fun getForeground(encodedTokenAttributes: EncodedToken): UInt","org.codroid.textmate.EncodedTokenAttributes.getForeground"]},{"name":"fun getId(color: String?): UInt","description":"org.codroid.textmate.theme.ColorMap.getId","location":"codroid-textmate/org.codroid.textmate.theme/-color-map/get-id.html","searchKeys":["getId","fun getId(color: String?): UInt","org.codroid.textmate.theme.ColorMap.getId"]},{"name":"fun getInjections(): Array<Injection>","description":"org.codroid.textmate.grammar.Grammar.getInjections","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/get-injections.html","searchKeys":["getInjections","fun getInjections(): Array<Injection>","org.codroid.textmate.grammar.Grammar.getInjections"]},{"name":"fun getLanguageId(encodedTokenAttributes: EncodedToken): UInt","description":"org.codroid.textmate.EncodedTokenAttributes.getLanguageId","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/get-language-id.html","searchKeys":["getLanguageId","fun getLanguageId(encodedTokenAttributes: EncodedToken): UInt","org.codroid.textmate.EncodedTokenAttributes.getLanguageId"]},{"name":"fun getMatchersAlways(): Boolean","description":"org.codroid.textmate.grammar.BalancedBracketSelectors.getMatchersAlways","location":"codroid-textmate/org.codroid.textmate.grammar/-balanced-bracket-selectors/get-matchers-always.html","searchKeys":["getMatchersAlways","fun getMatchersAlways(): Boolean","org.codroid.textmate.grammar.BalancedBracketSelectors.getMatchersAlways"]},{"name":"fun getMatchesNever(): Boolean","description":"org.codroid.textmate.grammar.BalancedBracketSelectors.getMatchesNever","location":"codroid-textmate/org.codroid.textmate.grammar/-balanced-bracket-selectors/get-matches-never.html","searchKeys":["getMatchesNever","fun getMatchesNever(): Boolean","org.codroid.textmate.grammar.BalancedBracketSelectors.getMatchesNever"]},{"name":"fun getMetadataForScope(scope: ScopeName): BasicScopeAttributes","description":"org.codroid.textmate.grammar.Grammar.getMetadataForScope","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/get-metadata-for-scope.html","searchKeys":["getMetadataForScope","fun getMetadataForScope(scope: ScopeName): BasicScopeAttributes","org.codroid.textmate.grammar.Grammar.getMetadataForScope"]},{"name":"fun getName(lineText: String?, captureIndices: Array<IntRange>?): String?","description":"org.codroid.textmate.rule.Rule.getName","location":"codroid-textmate/org.codroid.textmate.rule/-rule/get-name.html","searchKeys":["getName","fun getName(lineText: String?, captureIndices: Array<IntRange>?): String?","org.codroid.textmate.rule.Rule.getName"]},{"name":"fun getReferences(): List<AbsoluteRuleReference>","description":"org.codroid.textmate.grammar.ExternalReferenceCollector.getReferences","location":"codroid-textmate/org.codroid.textmate.grammar/-external-reference-collector/get-references.html","searchKeys":["getReferences","fun getReferences(): List<AbsoluteRuleReference>","org.codroid.textmate.grammar.ExternalReferenceCollector.getReferences"]},{"name":"fun getResult(stack: StateStack, lineLength: Int): Array<Token>","description":"org.codroid.textmate.grammar.LineTokens.getResult","location":"codroid-textmate/org.codroid.textmate.grammar/-line-tokens/get-result.html","searchKeys":["getResult","fun getResult(stack: StateStack, lineLength: Int): Array<Token>","org.codroid.textmate.grammar.LineTokens.getResult"]},{"name":"fun getRule(grammar: RuleRegistry): Rule?","description":"org.codroid.textmate.grammar.StateStack.getRule","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/get-rule.html","searchKeys":["getRule","fun getRule(grammar: RuleRegistry): Rule?","org.codroid.textmate.grammar.StateStack.getRule"]},{"name":"fun getScopeName(): ScopeName","description":"org.codroid.textmate.grammar.AttributedScopeStack.getScopeName","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/get-scope-name.html","searchKeys":["getScopeName","fun getScopeName(): ScopeName","org.codroid.textmate.grammar.AttributedScopeStack.getScopeName"]},{"name":"fun getScopeNames(): Array<String>","description":"org.codroid.textmate.grammar.AttributedScopeStack.getScopeNames","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/get-scope-names.html","searchKeys":["getScopeNames","fun getScopeNames(): Array<String>","org.codroid.textmate.grammar.AttributedScopeStack.getScopeNames"]},{"name":"fun getSegments(): List<ScopeName>","description":"org.codroid.textmate.theme.ScopeStack.getSegments","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/get-segments.html","searchKeys":["getSegments","fun getSegments(): List<ScopeName>","org.codroid.textmate.theme.ScopeStack.getSegments"]},{"name":"fun getThemeProvider(): ThemeProvider","description":"org.codroid.textmate.grammar.Grammar.getThemeProvider","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/get-theme-provider.html","searchKeys":["getThemeProvider","fun getThemeProvider(): ThemeProvider","org.codroid.textmate.grammar.Grammar.getThemeProvider"]},{"name":"fun getTokenType(encodedTokenAttributes: EncodedToken): StandardTokenType","description":"org.codroid.textmate.EncodedTokenAttributes.getTokenType","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/get-token-type.html","searchKeys":["getTokenType","fun getTokenType(encodedTokenAttributes: EncodedToken): StandardTokenType","org.codroid.textmate.EncodedTokenAttributes.getTokenType"]},{"name":"fun getWhileWithResolvedBackReferences(lineText: String, captureIndices: Array<IntRange>): String","description":"org.codroid.textmate.rule.BeginWhileRule.getWhileWithResolvedBackReferences","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/get-while-with-resolved-back-references.html","searchKeys":["getWhileWithResolvedBackReferences","fun getWhileWithResolvedBackReferences(lineText: String, captureIndices: Array<IntRange>): String","org.codroid.textmate.rule.BeginWhileRule.getWhileWithResolvedBackReferences"]},{"name":"fun grammarForScopeName(scopeName: ScopeName, initialLanguage: Int, embeddedLanguages: EmbeddedLanguagesMap?, tokenTypes: TokenTypeMap?, balancedBracketSelectors: BalancedBracketSelectors?): Tokenizer?","description":"org.codroid.textmate.SyncRegistry.grammarForScopeName","location":"codroid-textmate/org.codroid.textmate/-sync-registry/grammar-for-scope-name.html","searchKeys":["grammarForScopeName","fun grammarForScopeName(scopeName: ScopeName, initialLanguage: Int, embeddedLanguages: EmbeddedLanguagesMap?, tokenTypes: TokenTypeMap?, balancedBracketSelectors: BalancedBracketSelectors?): Tokenizer?","org.codroid.textmate.SyncRegistry.grammarForScopeName"]},{"name":"fun handleCaptures(grammar: Grammar, lineText: String, isFirstLine: Boolean, stack: StateStack, lineTokens: LineTokens, captures: Array<CaptureRule?>, captureIndices: Array<IntRange>)","description":"org.codroid.textmate.grammar.tokenize.RuleMatching.handleCaptures","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-rule-matching/handle-captures.html","searchKeys":["handleCaptures","fun handleCaptures(grammar: Grammar, lineText: String, isFirstLine: Boolean, stack: StateStack, lineTokens: LineTokens, captures: Array<CaptureRule?>, captureIndices: Array<IntRange>)","org.codroid.textmate.grammar.tokenize.RuleMatching.handleCaptures"]},{"name":"fun hasCaptures(regexSource: String?): Boolean","description":"org.codroid.textmate.RegexSource.hasCaptures","location":"codroid-textmate/org.codroid.textmate/-regex-source/has-captures.html","searchKeys":["hasCaptures","fun hasCaptures(regexSource: String?): Boolean","org.codroid.textmate.RegexSource.hasCaptures"]},{"name":"fun hasSameRuleAs(other: StateStack): Boolean","description":"org.codroid.textmate.grammar.StateStack.hasSameRuleAs","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/has-same-rule-as.html","searchKeys":["hasSameRuleAs","fun hasSameRuleAs(other: StateStack): Boolean","org.codroid.textmate.grammar.StateStack.hasSameRuleAs"]},{"name":"fun initGrammar(grammar: RawGrammar, base: RawRule?): RawGrammar","description":"org.codroid.textmate.grammar.initGrammar","location":"codroid-textmate/org.codroid.textmate.grammar/init-grammar.html","searchKeys":["initGrammar","fun initGrammar(grammar: RawGrammar, base: RawRule?): RawGrammar","org.codroid.textmate.grammar.initGrammar"]},{"name":"fun insert(scopeDepth: Int, scope: ScopeName, parentScopes: List<ScopeName>?, fontStyle: FontStyle, foreground: UInt, background: UInt)","description":"org.codroid.textmate.theme.ThemeTrieElement.insert","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element/insert.html","searchKeys":["insert","fun insert(scopeDepth: Int, scope: ScopeName, parentScopes: List<ScopeName>?, fontStyle: FontStyle, foreground: UInt, background: UInt)","org.codroid.textmate.theme.ThemeTrieElement.insert"]},{"name":"fun isIdentifier(token: String?): Boolean","description":"org.codroid.textmate.Matchers.Companion.isIdentifier","location":"codroid-textmate/org.codroid.textmate/-matchers/-companion/is-identifier.html","searchKeys":["isIdentifier","fun isIdentifier(token: String?): Boolean","org.codroid.textmate.Matchers.Companion.isIdentifier"]},{"name":"fun isValidHexColor(hex: String): Boolean","description":"org.codroid.textmate.isValidHexColor","location":"codroid-textmate/org.codroid.textmate/is-valid-hex-color.html","searchKeys":["isValidHexColor","fun isValidHexColor(hex: String): Boolean","org.codroid.textmate.isValidHexColor"]},{"name":"fun length(): Int","description":"org.codroid.textmate.rule.RegExpSourceList.length","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/length.html","searchKeys":["length","fun length(): Int","org.codroid.textmate.rule.RegExpSourceList.length"]},{"name":"fun loadGrammar(initialScopeName: ScopeName): Tokenizer","description":"org.codroid.textmate.Registry.loadGrammar","location":"codroid-textmate/org.codroid.textmate/-registry/load-grammar.html","searchKeys":["loadGrammar","fun loadGrammar(initialScopeName: ScopeName): Tokenizer","org.codroid.textmate.Registry.loadGrammar"]},{"name":"fun loadGrammarWithConfiguration(initialScopeName: ScopeName, initialLanguage: Int, configuration: GrammarConfiguration): Tokenizer","description":"org.codroid.textmate.Registry.loadGrammarWithConfiguration","location":"codroid-textmate/org.codroid.textmate/-registry/load-grammar-with-configuration.html","searchKeys":["loadGrammarWithConfiguration","fun loadGrammarWithConfiguration(initialScopeName: ScopeName, initialLanguage: Int, configuration: GrammarConfiguration): Tokenizer","org.codroid.textmate.Registry.loadGrammarWithConfiguration"]},{"name":"fun loadGrammarWithEmbeddedLanguages(initialScopeName: ScopeName, initialLanguage: Int, embeddedLanguages: EmbeddedLanguagesMap): Tokenizer","description":"org.codroid.textmate.Registry.loadGrammarWithEmbeddedLanguages","location":"codroid-textmate/org.codroid.textmate/-registry/load-grammar-with-embedded-languages.html","searchKeys":["loadGrammarWithEmbeddedLanguages","fun loadGrammarWithEmbeddedLanguages(initialScopeName: ScopeName, initialLanguage: Int, embeddedLanguages: EmbeddedLanguagesMap): Tokenizer","org.codroid.textmate.Registry.loadGrammarWithEmbeddedLanguages"]},{"name":"fun match(scope: ScopeName): List<ThemeTrieElementRule>","description":"org.codroid.textmate.theme.ThemeTrieElement.match","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element/match.html","searchKeys":["match","fun match(scope: ScopeName): List<ThemeTrieElementRule>","org.codroid.textmate.theme.ThemeTrieElement.match"]},{"name":"fun match(scope: ScopeName): V?","description":"org.codroid.textmate.grammar.ScopeMatcher.match","location":"codroid-textmate/org.codroid.textmate.grammar/-scope-matcher/match.html","searchKeys":["match","fun match(scope: ScopeName): V?","org.codroid.textmate.grammar.ScopeMatcher.match"]},{"name":"fun match(scopePath: ScopeStack?): StyleAttributes?","description":"org.codroid.textmate.theme.Theme.match","location":"codroid-textmate/org.codroid.textmate.theme/-theme/match.html","searchKeys":["match","fun match(scopePath: ScopeStack?): StyleAttributes?","org.codroid.textmate.theme.Theme.match"]},{"name":"fun match(scopes: Array<String>): Boolean","description":"org.codroid.textmate.grammar.BalancedBracketSelectors.match","location":"codroid-textmate/org.codroid.textmate.grammar/-balanced-bracket-selectors/match.html","searchKeys":["match","fun match(scopes: Array<String>): Boolean","org.codroid.textmate.grammar.BalancedBracketSelectors.match"]},{"name":"fun matchRuleOrInjections(grammar: Grammar, lineText: String, isFirstLine: Boolean, linePos: Int, stack: StateStack, anchorPosition: Int): MatchResult?","description":"org.codroid.textmate.grammar.tokenize.RuleMatching.matchRuleOrInjections","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-rule-matching/match-rule-or-injections.html","searchKeys":["matchRuleOrInjections","fun matchRuleOrInjections(grammar: Grammar, lineText: String, isFirstLine: Boolean, linePos: Int, stack: StateStack, anchorPosition: Int): MatchResult?","org.codroid.textmate.grammar.tokenize.RuleMatching.matchRuleOrInjections"]},{"name":"fun mergeAttributes(existingTokenAttributes: EncodedToken, basicScopeAttributes: BasicScopeAttributes, styleAttributes: StyleAttributes?): EncodedToken","description":"org.codroid.textmate.grammar.AttributedScopeStack.Companion.mergeAttributes","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/-companion/merge-attributes.html","searchKeys":["mergeAttributes","fun mergeAttributes(existingTokenAttributes: EncodedToken, basicScopeAttributes: BasicScopeAttributes, styleAttributes: StyleAttributes?): EncodedToken","org.codroid.textmate.grammar.AttributedScopeStack.Companion.mergeAttributes"]},{"name":"fun nameMatcher(identifiers: List<ScopeName>, scopes: Array<ScopeName>): Boolean","description":"org.codroid.textmate.grammar.nameMatcher","location":"codroid-textmate/org.codroid.textmate.grammar/name-matcher.html","searchKeys":["nameMatcher","fun nameMatcher(identifiers: List<ScopeName>, scopes: Array<ScopeName>): Boolean","org.codroid.textmate.grammar.nameMatcher"]},{"name":"fun newTokenizer(input: String): () -> String?","description":"org.codroid.textmate.Matchers.Companion.newTokenizer","location":"codroid-textmate/org.codroid.textmate/-matchers/-companion/new-tokenizer.html","searchKeys":["newTokenizer","fun newTokenizer(input: String): () -> String?","org.codroid.textmate.Matchers.Companion.newTokenizer"]},{"name":"fun parseInclude(include: String): IncludeReference","description":"org.codroid.textmate.grammar.parseInclude","location":"codroid-textmate/org.codroid.textmate.grammar/parse-include.html","searchKeys":["parseInclude","fun parseInclude(include: String): IncludeReference","org.codroid.textmate.grammar.parseInclude"]},{"name":"fun parseRawGrammar(input: InputStream, filePath: String): RawGrammar","description":"org.codroid.textmate.parseRawGrammar","location":"codroid-textmate/org.codroid.textmate/parse-raw-grammar.html","searchKeys":["parseRawGrammar","fun parseRawGrammar(input: InputStream, filePath: String): RawGrammar","org.codroid.textmate.parseRawGrammar"]},{"name":"fun parseTheme(source: RawTheme?): MutableList<ParsedThemeRule>","description":"org.codroid.textmate.theme.parseTheme","location":"codroid-textmate/org.codroid.textmate.theme/parse-theme.html","searchKeys":["parseTheme","fun parseTheme(source: RawTheme?): MutableList<ParsedThemeRule>","org.codroid.textmate.theme.parseTheme"]},{"name":"fun pop(): StateStack?","description":"org.codroid.textmate.grammar.StateStack.pop","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/pop.html","searchKeys":["pop","fun pop(): StateStack?","org.codroid.textmate.grammar.StateStack.pop"]},{"name":"fun prepareRuleWhileSearch(rule: BeginWhileRule, grammar: Grammar, endRegexSource: String?, allowA: Boolean, allowG: Boolean): PrepareRuleResult","description":"org.codroid.textmate.grammar.tokenize.RuleMatching.prepareRuleWhileSearch","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-rule-matching/prepare-rule-while-search.html","searchKeys":["prepareRuleWhileSearch","fun prepareRuleWhileSearch(rule: BeginWhileRule, grammar: Grammar, endRegexSource: String?, allowA: Boolean, allowG: Boolean): PrepareRuleResult","org.codroid.textmate.grammar.tokenize.RuleMatching.prepareRuleWhileSearch"]},{"name":"fun print(encodedTokenAttributes: EncodedToken)","description":"org.codroid.textmate.EncodedTokenAttributes.print","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/print.html","searchKeys":["print","fun print(encodedTokenAttributes: EncodedToken)","org.codroid.textmate.EncodedTokenAttributes.print"]},{"name":"fun processQueue()","description":"org.codroid.textmate.grammar.ScopeDependencyProcessor.processQueue","location":"codroid-textmate/org.codroid.textmate.grammar/-scope-dependency-processor/process-queue.html","searchKeys":["processQueue","fun processQueue()","org.codroid.textmate.grammar.ScopeDependencyProcessor.processQueue"]},{"name":"fun produce(stack: StateStack, endIndex: Int)","description":"org.codroid.textmate.grammar.LineTokens.produce","location":"codroid-textmate/org.codroid.textmate.grammar/-line-tokens/produce.html","searchKeys":["produce","fun produce(stack: StateStack, endIndex: Int)","org.codroid.textmate.grammar.LineTokens.produce"]},{"name":"fun produceFromScopes(scopeList: AttributedScopeStack, endIndex: Int)","description":"org.codroid.textmate.grammar.LineTokens.produceFromScopes","location":"codroid-textmate/org.codroid.textmate.grammar/-line-tokens/produce-from-scopes.html","searchKeys":["produceFromScopes","fun produceFromScopes(scopeList: AttributedScopeStack, endIndex: Int)","org.codroid.textmate.grammar.LineTokens.produceFromScopes"]},{"name":"fun push(item: RegExpSource)","description":"org.codroid.textmate.rule.RegExpSourceList.push","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/push.html","searchKeys":["push","fun push(item: RegExpSource)","org.codroid.textmate.rule.RegExpSourceList.push"]},{"name":"fun push(ruleId: RuleId, enterPos: Int, anchorPos: Int, beginRuleCapturedEOL: Boolean, endRule: String?, nameScopesList: AttributedScopeStack, contentNameScopesList: AttributedScopeStack): StateStack","description":"org.codroid.textmate.grammar.StateStack.push","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/push.html","searchKeys":["push","fun push(ruleId: RuleId, enterPos: Int, anchorPos: Int, beginRuleCapturedEOL: Boolean, endRule: String?, nameScopesList: AttributedScopeStack, contentNameScopesList: AttributedScopeStack): StateStack","org.codroid.textmate.grammar.StateStack.push"]},{"name":"fun push(scopeName: ScopeName): ScopeStack","description":"org.codroid.textmate.theme.ScopeStack.push","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/push.html","searchKeys":["push","fun push(scopeName: ScopeName): ScopeStack","org.codroid.textmate.theme.ScopeStack.push"]},{"name":"fun pushAttributed(scopePath: ScopePath?, grammar: Grammar): AttributedScopeStack","description":"org.codroid.textmate.grammar.AttributedScopeStack.pushAttributed","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/push-attributed.html","searchKeys":["pushAttributed","fun pushAttributed(scopePath: ScopePath?, grammar: Grammar): AttributedScopeStack","org.codroid.textmate.grammar.AttributedScopeStack.pushAttributed"]},{"name":"fun replaceCaptures(regexSource: String, captureSource: String, captureIndices: Array<IntRange>): String","description":"org.codroid.textmate.RegexSource.replaceCaptures","location":"codroid-textmate/org.codroid.textmate/-regex-source/replace-captures.html","searchKeys":["replaceCaptures","fun replaceCaptures(regexSource: String, captureSource: String, captureIndices: Array<IntRange>): String","org.codroid.textmate.RegexSource.replaceCaptures"]},{"name":"fun reset()","description":"org.codroid.textmate.grammar.StateStack.reset","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/reset.html","searchKeys":["reset","fun reset()","org.codroid.textmate.grammar.StateStack.reset"]},{"name":"fun resolveAnchors(allowA: Boolean, allowG: Boolean): String","description":"org.codroid.textmate.rule.RegExpSource.resolveAnchors","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/resolve-anchors.html","searchKeys":["resolveAnchors","fun resolveAnchors(allowA: Boolean, allowG: Boolean): String","org.codroid.textmate.rule.RegExpSource.resolveAnchors"]},{"name":"fun resolveBackReferences(lineText: String, captureIndices: Array<IntRange>): String","description":"org.codroid.textmate.rule.RegExpSource.resolveBackReferences","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/resolve-back-references.html","searchKeys":["resolveBackReferences","fun resolveBackReferences(lineText: String, captureIndices: Array<IntRange>): String","org.codroid.textmate.rule.RegExpSource.resolveBackReferences"]},{"name":"fun satePop(): StateStack","description":"org.codroid.textmate.grammar.StateStack.satePop","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/sate-pop.html","searchKeys":["satePop","fun satePop(): StateStack","org.codroid.textmate.grammar.StateStack.satePop"]},{"name":"fun scopesAreMatching(thisScopeName: String, scopeName: String): Boolean","description":"org.codroid.textmate.grammar.scopesAreMatching","location":"codroid-textmate/org.codroid.textmate.grammar/scopes-are-matching.html","searchKeys":["scopesAreMatching","fun scopesAreMatching(thisScopeName: String, scopeName: String): Boolean","org.codroid.textmate.grammar.scopesAreMatching"]},{"name":"fun search(input: String): MatchResult?","description":"org.codroid.textmate.regex.RegularExp.search","location":"codroid-textmate/org.codroid.textmate.regex/-regular-exp/search.html","searchKeys":["search","fun search(input: String): MatchResult?","org.codroid.textmate.regex.RegularExp.search"]},{"name":"fun search(source: String, offset: Int): MatchResult?","description":"org.codroid.textmate.regex.StandardSearcher.search","location":"codroid-textmate/org.codroid.textmate.regex/-standard-searcher/search.html","searchKeys":["search","fun search(source: String, offset: Int): MatchResult?","org.codroid.textmate.regex.StandardSearcher.search"]},{"name":"fun search2(input: String, startPosition: Int): MatchResult?","description":"org.codroid.textmate.regex.StandardRegularExp.search2","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regular-exp/search2.html","searchKeys":["search2","fun search2(input: String, startPosition: Int): MatchResult?","org.codroid.textmate.regex.StandardRegularExp.search2"]},{"name":"fun set(encodedTokenAttributes: EncodedToken, languageId: UInt, tokenType: OptionalStandardTokenType, containsBalancedBrackets: Boolean?, fontStyle: FontStyle, foreground: UInt, background: UInt): UInt","description":"org.codroid.textmate.EncodedTokenAttributes.set","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/set.html","searchKeys":["set","fun set(encodedTokenAttributes: EncodedToken, languageId: UInt, tokenType: OptionalStandardTokenType, containsBalancedBrackets: Boolean?, fontStyle: FontStyle, foreground: UInt, background: UInt): UInt","org.codroid.textmate.EncodedTokenAttributes.set"]},{"name":"fun setSource(index: Int, newSource: String)","description":"org.codroid.textmate.rule.RegExpSourceList.setSource","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/set-source.html","searchKeys":["setSource","fun setSource(index: Int, newSource: String)","org.codroid.textmate.rule.RegExpSourceList.setSource"]},{"name":"fun setTheme(theme: RawTheme, colorMap: Array<String>?)","description":"org.codroid.textmate.Registry.setTheme","location":"codroid-textmate/org.codroid.textmate/-registry/set-theme.html","searchKeys":["setTheme","fun setTheme(theme: RawTheme, colorMap: Array<String>?)","org.codroid.textmate.Registry.setTheme"]},{"name":"fun strArrCmp(a: Array<String>?, b: Array<String>?): Int","description":"org.codroid.textmate.strArrCmp","location":"codroid-textmate/org.codroid.textmate/str-arr-cmp.html","searchKeys":["strArrCmp","fun strArrCmp(a: Array<String>?, b: Array<String>?): Int","org.codroid.textmate.strArrCmp"]},{"name":"fun strLisCmp(a: List<String>?, b: List<String>?): Int","description":"org.codroid.textmate.strLisCmp","location":"codroid-textmate/org.codroid.textmate/str-lis-cmp.html","searchKeys":["strLisCmp","fun strLisCmp(a: List<String>?, b: List<String>?): Int","org.codroid.textmate.strLisCmp"]},{"name":"fun strcmp(a: String, b: String): Int","description":"org.codroid.textmate.strcmp","location":"codroid-textmate/org.codroid.textmate/strcmp.html","searchKeys":["strcmp","fun strcmp(a: String, b: String): Int","org.codroid.textmate.strcmp"]},{"name":"fun toBinaryStr(encodedTokenAttributes: EncodedToken): String","description":"org.codroid.textmate.EncodedTokenAttributes.toBinaryStr","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/to-binary-str.html","searchKeys":["toBinaryStr","fun toBinaryStr(encodedTokenAttributes: EncodedToken): String","org.codroid.textmate.EncodedTokenAttributes.toBinaryStr"]},{"name":"fun toOptionalTokenType(standardType: StandardTokenType): OptionalStandardTokenType","description":"org.codroid.textmate.toOptionalTokenType","location":"codroid-textmate/org.codroid.textmate/to-optional-token-type.html","searchKeys":["toOptionalTokenType","fun toOptionalTokenType(standardType: StandardTokenType): OptionalStandardTokenType","org.codroid.textmate.toOptionalTokenType"]},{"name":"fun toRule(): RawRule","description":"org.codroid.textmate.grammar.RawGrammar.toRule","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/to-rule.html","searchKeys":["toRule","fun toRule(): RawRule","org.codroid.textmate.grammar.RawGrammar.toRule"]},{"name":"fun tokenizeString(grammar: Grammar, lineText: String, isFirstLine_: Boolean, linePos_: Int, stack_: StateStack, lineTokens: LineTokens, checkWhileConditions: Boolean, timeLimit: Int): TokenizeStringResult","description":"org.codroid.textmate.grammar.tokenize.tokenizeString","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/tokenize-string.html","searchKeys":["tokenizeString","fun tokenizeString(grammar: Grammar, lineText: String, isFirstLine_: Boolean, linePos_: Int, stack_: StateStack, lineTokens: LineTokens, checkWhileConditions: Boolean, timeLimit: Int): TokenizeStringResult","org.codroid.textmate.grammar.tokenize.tokenizeString"]},{"name":"fun unshift(item: RegExpSource)","description":"org.codroid.textmate.rule.RegExpSourceList.unshift","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/unshift.html","searchKeys":["unshift","fun unshift(item: RegExpSource)","org.codroid.textmate.rule.RegExpSourceList.unshift"]},{"name":"fun withContentNameScopesList(contentNameScopeStack: AttributedScopeStack): StateStack","description":"org.codroid.textmate.grammar.StateStack.withContentNameScopesList","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/with-content-name-scopes-list.html","searchKeys":["withContentNameScopesList","fun withContentNameScopesList(contentNameScopeStack: AttributedScopeStack): StateStack","org.codroid.textmate.grammar.StateStack.withContentNameScopesList"]},{"name":"fun withEndRule(endRule: String): StateStack","description":"org.codroid.textmate.grammar.StateStack.withEndRule","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/with-end-rule.html","searchKeys":["withEndRule","fun withEndRule(endRule: String): StateStack","org.codroid.textmate.grammar.StateStack.withEndRule"]},{"name":"inline fun <T : Any> decodeFromNSObject(dict: NSObject): T","description":"org.codroid.textmate.decodeFromNSObject","location":"codroid-textmate/org.codroid.textmate/decode-from-n-s-object.html","searchKeys":["decodeFromNSObject","inline fun <T : Any> decodeFromNSObject(dict: NSObject): T","org.codroid.textmate.decodeFromNSObject"]},{"name":"inline fun <T : Any> parsePLIST(input: InputStream): T","description":"org.codroid.textmate.parsePLIST","location":"codroid-textmate/org.codroid.textmate/parse-p-l-i-s-t.html","searchKeys":["parsePLIST","inline fun <T : Any> parsePLIST(input: InputStream): T","org.codroid.textmate.parsePLIST"]},{"name":"inline fun <T> parseJson(input: InputStream): T","description":"org.codroid.textmate.parseJson","location":"codroid-textmate/org.codroid.textmate/parse-json.html","searchKeys":["parseJson","inline fun <T> parseJson(input: InputStream): T","org.codroid.textmate.parseJson"]},{"name":"interface AbsoluteRuleReference","description":"org.codroid.textmate.grammar.AbsoluteRuleReference","location":"codroid-textmate/org.codroid.textmate.grammar/-absolute-rule-reference/index.html","searchKeys":["AbsoluteRuleReference","interface AbsoluteRuleReference","org.codroid.textmate.grammar.AbsoluteRuleReference"]},{"name":"interface GrammarRegistry","description":"org.codroid.textmate.rule.GrammarRegistry","location":"codroid-textmate/org.codroid.textmate.rule/-grammar-registry/index.html","searchKeys":["GrammarRegistry","interface GrammarRegistry","org.codroid.textmate.rule.GrammarRegistry"]},{"name":"interface GrammarReposThemeProvider : GrammarRepository, ThemeProvider, Cloneable","description":"org.codroid.textmate.grammar.GrammarReposThemeProvider","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar-repos-theme-provider/index.html","searchKeys":["GrammarReposThemeProvider","interface GrammarReposThemeProvider : GrammarRepository, ThemeProvider, Cloneable","org.codroid.textmate.grammar.GrammarReposThemeProvider"]},{"name":"interface GrammarRepository","description":"org.codroid.textmate.grammar.GrammarRepository","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar-repository/index.html","searchKeys":["GrammarRepository","interface GrammarRepository","org.codroid.textmate.grammar.GrammarRepository"]},{"name":"interface IncludeReference","description":"org.codroid.textmate.grammar.IncludeReference","location":"codroid-textmate/org.codroid.textmate.grammar/-include-reference/index.html","searchKeys":["IncludeReference","interface IncludeReference","org.codroid.textmate.grammar.IncludeReference"]},{"name":"interface RegexLib","description":"org.codroid.textmate.regex.RegexLib","location":"codroid-textmate/org.codroid.textmate.regex/-regex-lib/index.html","searchKeys":["RegexLib","interface RegexLib","org.codroid.textmate.regex.RegexLib"]},{"name":"interface RegexMatch","description":"org.codroid.textmate.regex.RegexMatch","location":"codroid-textmate/org.codroid.textmate.regex/-regex-match/index.html","searchKeys":["RegexMatch","interface RegexMatch","org.codroid.textmate.regex.RegexMatch"]},{"name":"interface RegexScanner","description":"org.codroid.textmate.regex.RegexScanner","location":"codroid-textmate/org.codroid.textmate.regex/-regex-scanner/index.html","searchKeys":["RegexScanner","interface RegexScanner","org.codroid.textmate.regex.RegexScanner"]},{"name":"interface RuleFactoryHelper : RuleRegistry, GrammarRegistry","description":"org.codroid.textmate.rule.RuleFactoryHelper","location":"codroid-textmate/org.codroid.textmate.rule/-rule-factory-helper/index.html","searchKeys":["RuleFactoryHelper","interface RuleFactoryHelper : RuleRegistry, GrammarRegistry","org.codroid.textmate.rule.RuleFactoryHelper"]},{"name":"interface RuleRegistry","description":"org.codroid.textmate.rule.RuleRegistry","location":"codroid-textmate/org.codroid.textmate.rule/-rule-registry/index.html","searchKeys":["RuleRegistry","interface RuleRegistry","org.codroid.textmate.rule.RuleRegistry"]},{"name":"interface RuleRegistryRegexLib : RuleRegistry, RegexLib","description":"org.codroid.textmate.rule.RuleRegistryRegexLib","location":"codroid-textmate/org.codroid.textmate.rule/-rule-registry-regex-lib/index.html","searchKeys":["RuleRegistryRegexLib","interface RuleRegistryRegexLib : RuleRegistry, RegexLib","org.codroid.textmate.rule.RuleRegistryRegexLib"]},{"name":"interface StackElementDef : Cloneable","description":"org.codroid.textmate.StackElementDef","location":"codroid-textmate/org.codroid.textmate/-stack-element-def/index.html","searchKeys":["StackElementDef","interface StackElementDef : Cloneable","org.codroid.textmate.StackElementDef"]},{"name":"interface ThemeProvider","description":"org.codroid.textmate.theme.ThemeProvider","location":"codroid-textmate/org.codroid.textmate.theme/-theme-provider/index.html","searchKeys":["ThemeProvider","interface ThemeProvider","org.codroid.textmate.theme.ThemeProvider"]},{"name":"interface Tokenizer","description":"org.codroid.textmate.Tokenizer","location":"codroid-textmate/org.codroid.textmate/-tokenizer/index.html","searchKeys":["Tokenizer","interface Tokenizer","org.codroid.textmate.Tokenizer"]},{"name":"interface TopLevel","description":"org.codroid.textmate.grammar.TopLevel","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level/index.html","searchKeys":["TopLevel","interface TopLevel","org.codroid.textmate.grammar.TopLevel"]},{"name":"interface WithPatternRule","description":"org.codroid.textmate.rule.WithPatternRule","location":"codroid-textmate/org.codroid.textmate.rule/-with-pattern-rule/index.html","searchKeys":["WithPatternRule","interface WithPatternRule","org.codroid.textmate.rule.WithPatternRule"]},{"name":"lateinit var globalRegexLib: RegexLib","description":"org.codroid.textmate.globalRegexLib","location":"codroid-textmate/org.codroid.textmate/global-regex-lib.html","searchKeys":["globalRegexLib","lateinit var globalRegexLib: RegexLib","org.codroid.textmate.globalRegexLib"]},{"name":"object Companion","description":"org.codroid.textmate.Matchers.Companion","location":"codroid-textmate/org.codroid.textmate/-matchers/-companion/index.html","searchKeys":["Companion","object Companion","org.codroid.textmate.Matchers.Companion"]},{"name":"object Companion","description":"org.codroid.textmate.grammar.AttributedScopeStack.Companion","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/-companion/index.html","searchKeys":["Companion","object Companion","org.codroid.textmate.grammar.AttributedScopeStack.Companion"]},{"name":"object Companion","description":"org.codroid.textmate.grammar.BasicScopesAttributeProvider.Companion","location":"codroid-textmate/org.codroid.textmate.grammar/-basic-scopes-attribute-provider/-companion/index.html","searchKeys":["Companion","object Companion","org.codroid.textmate.grammar.BasicScopesAttributeProvider.Companion"]},{"name":"object Companion","description":"org.codroid.textmate.grammar.StateStack.Companion","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/-companion/index.html","searchKeys":["Companion","object Companion","org.codroid.textmate.grammar.StateStack.Companion"]},{"name":"object Companion","description":"org.codroid.textmate.rule.RuleId.Companion","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/-companion/index.html","searchKeys":["Companion","object Companion","org.codroid.textmate.rule.RuleId.Companion"]},{"name":"object Companion","description":"org.codroid.textmate.theme.ScopeStack.Companion","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/-companion/index.html","searchKeys":["Companion","object Companion","org.codroid.textmate.theme.ScopeStack.Companion"]},{"name":"object Companion","description":"org.codroid.textmate.theme.Theme.Companion","location":"codroid-textmate/org.codroid.textmate.theme/-theme/-companion/index.html","searchKeys":["Companion","object Companion","org.codroid.textmate.theme.Theme.Companion"]},{"name":"object EncodedTokenAttributes","description":"org.codroid.textmate.EncodedTokenAttributes","location":"codroid-textmate/org.codroid.textmate/-encoded-token-attributes/index.html","searchKeys":["EncodedTokenAttributes","object EncodedTokenAttributes","org.codroid.textmate.EncodedTokenAttributes"]},{"name":"object EncodedTokenDataConsts","description":"org.codroid.textmate.EncodedTokenDataConsts","location":"codroid-textmate/org.codroid.textmate/-encoded-token-data-consts/index.html","searchKeys":["EncodedTokenDataConsts","object EncodedTokenDataConsts","org.codroid.textmate.EncodedTokenDataConsts"]},{"name":"object FindOptionConsts","description":"org.codroid.textmate.regex.FindOptionConsts","location":"codroid-textmate/org.codroid.textmate.regex/-find-option-consts/index.html","searchKeys":["FindOptionConsts","object FindOptionConsts","org.codroid.textmate.regex.FindOptionConsts"]},{"name":"object FontStyleConsts","description":"org.codroid.textmate.theme.FontStyleConsts","location":"codroid-textmate/org.codroid.textmate.theme/-font-style-consts/index.html","searchKeys":["FontStyleConsts","object FontStyleConsts","org.codroid.textmate.theme.FontStyleConsts"]},{"name":"object IntBooleanSerializer : KSerializer<Boolean> ","description":"org.codroid.textmate.IntBooleanSerializer","location":"codroid-textmate/org.codroid.textmate/-int-boolean-serializer/index.html","searchKeys":["IntBooleanSerializer","object IntBooleanSerializer : KSerializer<Boolean> ","org.codroid.textmate.IntBooleanSerializer"]},{"name":"object OptionalStandardTokenTypeConsts","description":"org.codroid.textmate.OptionalStandardTokenTypeConsts","location":"codroid-textmate/org.codroid.textmate/-optional-standard-token-type-consts/index.html","searchKeys":["OptionalStandardTokenTypeConsts","object OptionalStandardTokenTypeConsts","org.codroid.textmate.OptionalStandardTokenTypeConsts"]},{"name":"object RawThemeSettingScopeSerializer : KSerializer<Array<String>> ","description":"org.codroid.textmate.theme.RawThemeSettingScopeSerializer","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting-scope-serializer/index.html","searchKeys":["RawThemeSettingScopeSerializer","object RawThemeSettingScopeSerializer : KSerializer<Array<String>> ","org.codroid.textmate.theme.RawThemeSettingScopeSerializer"]},{"name":"object RegexSource","description":"org.codroid.textmate.RegexSource","location":"codroid-textmate/org.codroid.textmate/-regex-source/index.html","searchKeys":["RegexSource","object RegexSource","org.codroid.textmate.RegexSource"]},{"name":"object RuleFactory","description":"org.codroid.textmate.rule.RuleFactory","location":"codroid-textmate/org.codroid.textmate.rule/-rule-factory/index.html","searchKeys":["RuleFactory","object RuleFactory","org.codroid.textmate.rule.RuleFactory"]},{"name":"object RuleMatching","description":"org.codroid.textmate.grammar.tokenize.RuleMatching","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-rule-matching/index.html","searchKeys":["RuleMatching","object RuleMatching","org.codroid.textmate.grammar.tokenize.RuleMatching"]},{"name":"object StandardTokenTypeConsts","description":"org.codroid.textmate.StandardTokenTypeConsts","location":"codroid-textmate/org.codroid.textmate/-standard-token-type-consts/index.html","searchKeys":["StandardTokenTypeConsts","object StandardTokenTypeConsts","org.codroid.textmate.StandardTokenTypeConsts"]},{"name":"open class Context(val baseGrammar: RawGrammar, val selfGrammar: RawGrammar)","description":"org.codroid.textmate.grammar.Context","location":"codroid-textmate/org.codroid.textmate.grammar/-context/index.html","searchKeys":["Context","open class Context(val baseGrammar: RawGrammar, val selfGrammar: RawGrammar)","org.codroid.textmate.grammar.Context"]},{"name":"open class MatchResult(val captureIndices: Array<IntRange>, val matchedRuleId: RuleId)","description":"org.codroid.textmate.grammar.tokenize.MatchResult","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-result/index.html","searchKeys":["MatchResult","open class MatchResult(val captureIndices: Array<IntRange>, val matchedRuleId: RuleId)","org.codroid.textmate.grammar.tokenize.MatchResult"]},{"name":"open class RegistryOptions(val regexLib: RegexLib = StandardRegex(), val theme: RawTheme? = null, val colorMap: Array<String>? = null, val loadGrammar: (ScopeName) -> RawGrammar?? = null, val getInjections: (ScopeName) -> Array<ScopeName>?? = null)","description":"org.codroid.textmate.RegistryOptions","location":"codroid-textmate/org.codroid.textmate/-registry-options/index.html","searchKeys":["RegistryOptions","open class RegistryOptions(val regexLib: RegexLib = StandardRegex(), val theme: RawTheme? = null, val colorMap: Array<String>? = null, val loadGrammar: (ScopeName) -> RawGrammar?? = null, val getInjections: (ScopeName) -> Array<ScopeName>?? = null)","org.codroid.textmate.RegistryOptions"]},{"name":"open operator override fun compareTo(other: ThemeTrieElementRule): Int","description":"org.codroid.textmate.theme.ThemeTrieElementRule.compareTo","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: ThemeTrieElementRule): Int","org.codroid.textmate.theme.ThemeTrieElementRule.compareTo"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.GrammarConfiguration.equals","location":"codroid-textmate/org.codroid.textmate/-grammar-configuration/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.GrammarConfiguration.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.Token.equals","location":"codroid-textmate/org.codroid.textmate/-token/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.Token.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.TokenizeLineResult.equals","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.TokenizeLineResult.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.grammar.AttributedScopeStack.equals","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.grammar.AttributedScopeStack.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.grammar.StateStack.equals","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.grammar.StateStack.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.equals","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-injections-result/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.grammar.tokenize.MatchResult.equals","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-result/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.grammar.tokenize.MatchResult.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.rule.CompilePatternsResult.equals","location":"codroid-textmate/org.codroid.textmate.rule/-compile-patterns-result/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.rule.CompilePatternsResult.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.rule.FindNextMatchResult.equals","location":"codroid-textmate/org.codroid.textmate.rule/-find-next-match-result/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.rule.FindNextMatchResult.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.rule.RuleId.equals","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.rule.RuleId.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.theme.ColorMap.equals","location":"codroid-textmate/org.codroid.textmate.theme/-color-map/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.theme.ColorMap.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.theme.RawTheme.equals","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.theme.RawTheme.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.theme.RawThemeSetting.equals","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.theme.RawThemeSetting.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.theme.Setting.equals","location":"codroid-textmate/org.codroid.textmate.theme/-setting/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.theme.Setting.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.theme.StyleAttributes.equals","location":"codroid-textmate/org.codroid.textmate.theme/-style-attributes/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.theme.StyleAttributes.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.theme.Theme.equals","location":"codroid-textmate/org.codroid.textmate.theme/-theme/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.theme.Theme.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.codroid.textmate.theme.ThemeTrieElement.equals","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.codroid.textmate.theme.ThemeTrieElement.equals"]},{"name":"open override fun <T : Rule> registerRule(factor: (id: RuleId) -> T): T","description":"org.codroid.textmate.grammar.Grammar.registerRule","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/register-rule.html","searchKeys":["registerRule","open override fun <T : Rule> registerRule(factor: (id: RuleId) -> T): T","org.codroid.textmate.grammar.Grammar.registerRule"]},{"name":"open override fun clone(): RawGrammar","description":"org.codroid.textmate.grammar.RawGrammar.clone","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/clone.html","searchKeys":["clone","open override fun clone(): RawGrammar","org.codroid.textmate.grammar.RawGrammar.clone"]},{"name":"open override fun clone(): RawRule","description":"org.codroid.textmate.grammar.RawRule.clone","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/clone.html","searchKeys":["clone","open override fun clone(): RawRule","org.codroid.textmate.grammar.RawRule.clone"]},{"name":"open override fun clone(): RegExpSource","description":"org.codroid.textmate.rule.RegExpSource.clone","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/clone.html","searchKeys":["clone","open override fun clone(): RegExpSource","org.codroid.textmate.rule.RegExpSource.clone"]},{"name":"open override fun clone(): RuleId","description":"org.codroid.textmate.rule.RuleId.clone","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/clone.html","searchKeys":["clone","open override fun clone(): RuleId","org.codroid.textmate.rule.RuleId.clone"]},{"name":"open override fun clone(): ScopeStack","description":"org.codroid.textmate.theme.ScopeStack.clone","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/clone.html","searchKeys":["clone","open override fun clone(): ScopeStack","org.codroid.textmate.theme.ScopeStack.clone"]},{"name":"open override fun clone(): ThemeTrieElementRule","description":"org.codroid.textmate.theme.ThemeTrieElementRule.clone","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/clone.html","searchKeys":["clone","open override fun clone(): ThemeTrieElementRule","org.codroid.textmate.theme.ThemeTrieElementRule.clone"]},{"name":"open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","description":"org.codroid.textmate.rule.BeginEndRule.collectPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/collect-patterns.html","searchKeys":["collectPatterns","open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","org.codroid.textmate.rule.BeginEndRule.collectPatterns"]},{"name":"open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","description":"org.codroid.textmate.rule.BeginWhileRule.collectPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/collect-patterns.html","searchKeys":["collectPatterns","open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","org.codroid.textmate.rule.BeginWhileRule.collectPatterns"]},{"name":"open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","description":"org.codroid.textmate.rule.CaptureRule.collectPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/collect-patterns.html","searchKeys":["collectPatterns","open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","org.codroid.textmate.rule.CaptureRule.collectPatterns"]},{"name":"open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","description":"org.codroid.textmate.rule.IncludeOnlyRule.collectPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/collect-patterns.html","searchKeys":["collectPatterns","open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","org.codroid.textmate.rule.IncludeOnlyRule.collectPatterns"]},{"name":"open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","description":"org.codroid.textmate.rule.MatchRule.collectPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/collect-patterns.html","searchKeys":["collectPatterns","open override fun collectPatterns(grammar: RuleRegistry, out: RegExpSourceList)","org.codroid.textmate.rule.MatchRule.collectPatterns"]},{"name":"open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","description":"org.codroid.textmate.rule.BeginEndRule.compile","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/compile.html","searchKeys":["compile","open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","org.codroid.textmate.rule.BeginEndRule.compile"]},{"name":"open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","description":"org.codroid.textmate.rule.BeginWhileRule.compile","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/compile.html","searchKeys":["compile","open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","org.codroid.textmate.rule.BeginWhileRule.compile"]},{"name":"open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","description":"org.codroid.textmate.rule.CaptureRule.compile","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/compile.html","searchKeys":["compile","open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","org.codroid.textmate.rule.CaptureRule.compile"]},{"name":"open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","description":"org.codroid.textmate.rule.IncludeOnlyRule.compile","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/compile.html","searchKeys":["compile","open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","org.codroid.textmate.rule.IncludeOnlyRule.compile"]},{"name":"open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","description":"org.codroid.textmate.rule.MatchRule.compile","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/compile.html","searchKeys":["compile","open override fun compile(grammar: RuleRegistryRegexLib, endRegexSource: String): CompiledRule","org.codroid.textmate.rule.MatchRule.compile"]},{"name":"open override fun compile(pattern: String): RegularExp","description":"org.codroid.textmate.grammar.Grammar.compile","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/compile.html","searchKeys":["compile","open override fun compile(pattern: String): RegularExp","org.codroid.textmate.grammar.Grammar.compile"]},{"name":"open override fun compile(pattern: String): RegularExp","description":"org.codroid.textmate.regex.StandardRegex.compile","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex/compile.html","searchKeys":["compile","open override fun compile(pattern: String): RegularExp","org.codroid.textmate.regex.StandardRegex.compile"]},{"name":"open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","description":"org.codroid.textmate.rule.BeginEndRule.compileAG","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/compile-a-g.html","searchKeys":["compileAG","open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","org.codroid.textmate.rule.BeginEndRule.compileAG"]},{"name":"open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","description":"org.codroid.textmate.rule.BeginWhileRule.compileAG","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/compile-a-g.html","searchKeys":["compileAG","open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","org.codroid.textmate.rule.BeginWhileRule.compileAG"]},{"name":"open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","description":"org.codroid.textmate.rule.CaptureRule.compileAG","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/compile-a-g.html","searchKeys":["compileAG","open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","org.codroid.textmate.rule.CaptureRule.compileAG"]},{"name":"open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","description":"org.codroid.textmate.rule.IncludeOnlyRule.compileAG","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/compile-a-g.html","searchKeys":["compileAG","open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","org.codroid.textmate.rule.IncludeOnlyRule.compileAG"]},{"name":"open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","description":"org.codroid.textmate.rule.MatchRule.compileAG","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/compile-a-g.html","searchKeys":["compileAG","open override fun compileAG(grammar: RuleRegistryRegexLib, endRegexSource: String, allowA: Boolean, allowG: Boolean): CompiledRule","org.codroid.textmate.rule.MatchRule.compileAG"]},{"name":"open override fun containsMatchIn(input: String): Boolean","description":"org.codroid.textmate.regex.StandardRegularExp.containsMatchIn","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regular-exp/contains-match-in.html","searchKeys":["containsMatchIn","open override fun containsMatchIn(input: String): Boolean","org.codroid.textmate.regex.StandardRegularExp.containsMatchIn"]},{"name":"open override fun createScanner(source: Array<String>): RegexScanner","description":"org.codroid.textmate.grammar.Grammar.createScanner","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/create-scanner.html","searchKeys":["createScanner","open override fun createScanner(source: Array<String>): RegexScanner","org.codroid.textmate.grammar.Grammar.createScanner"]},{"name":"open override fun createScanner(source: Array<String>): RegexScanner","description":"org.codroid.textmate.regex.StandardRegex.createScanner","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex/create-scanner.html","searchKeys":["createScanner","open override fun createScanner(source: Array<String>): RegexScanner","org.codroid.textmate.regex.StandardRegex.createScanner"]},{"name":"open override fun deserialize(decoder: Decoder): Array<String>","description":"org.codroid.textmate.theme.RawThemeSettingScopeSerializer.deserialize","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting-scope-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): Array<String>","org.codroid.textmate.theme.RawThemeSettingScopeSerializer.deserialize"]},{"name":"open override fun deserialize(decoder: Decoder): Boolean","description":"org.codroid.textmate.IntBooleanSerializer.deserialize","location":"codroid-textmate/org.codroid.textmate/-int-boolean-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(decoder: Decoder): Boolean","org.codroid.textmate.IntBooleanSerializer.deserialize"]},{"name":"open override fun dispose()","description":"org.codroid.textmate.regex.StandardRegexScanner.dispose","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex-scanner/dispose.html","searchKeys":["dispose","open override fun dispose()","org.codroid.textmate.regex.StandardRegexScanner.dispose"]},{"name":"open override fun dispose()","description":"org.codroid.textmate.rule.BeginEndRule.dispose","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/dispose.html","searchKeys":["dispose","open override fun dispose()","org.codroid.textmate.rule.BeginEndRule.dispose"]},{"name":"open override fun dispose()","description":"org.codroid.textmate.rule.BeginWhileRule.dispose","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/dispose.html","searchKeys":["dispose","open override fun dispose()","org.codroid.textmate.rule.BeginWhileRule.dispose"]},{"name":"open override fun dispose()","description":"org.codroid.textmate.rule.CaptureRule.dispose","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/dispose.html","searchKeys":["dispose","open override fun dispose()","org.codroid.textmate.rule.CaptureRule.dispose"]},{"name":"open override fun dispose()","description":"org.codroid.textmate.rule.IncludeOnlyRule.dispose","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/dispose.html","searchKeys":["dispose","open override fun dispose()","org.codroid.textmate.rule.IncludeOnlyRule.dispose"]},{"name":"open override fun dispose()","description":"org.codroid.textmate.rule.MatchRule.dispose","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/dispose.html","searchKeys":["dispose","open override fun dispose()","org.codroid.textmate.rule.MatchRule.dispose"]},{"name":"open override fun findNextMatchSync(string: String, startPosition: Int): RegexMatch?","description":"org.codroid.textmate.regex.StandardRegexScanner.findNextMatchSync","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex-scanner/find-next-match-sync.html","searchKeys":["findNextMatchSync","open override fun findNextMatchSync(string: String, startPosition: Int): RegexMatch?","org.codroid.textmate.regex.StandardRegexScanner.findNextMatchSync"]},{"name":"open override fun getDefaults(): StyleAttributes","description":"org.codroid.textmate.SyncRegistry.getDefaults","location":"codroid-textmate/org.codroid.textmate/-sync-registry/get-defaults.html","searchKeys":["getDefaults","open override fun getDefaults(): StyleAttributes","org.codroid.textmate.SyncRegistry.getDefaults"]},{"name":"open override fun getExternalGrammar(scopeName: ScopeName, repository: RawRepository?): RawGrammar?","description":"org.codroid.textmate.grammar.Grammar.getExternalGrammar","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/get-external-grammar.html","searchKeys":["getExternalGrammar","open override fun getExternalGrammar(scopeName: ScopeName, repository: RawRepository?): RawGrammar?","org.codroid.textmate.grammar.Grammar.getExternalGrammar"]},{"name":"open override fun getRule(ruleId: RuleId): Rule?","description":"org.codroid.textmate.grammar.Grammar.getRule","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/get-rule.html","searchKeys":["getRule","open override fun getRule(ruleId: RuleId): Rule?","org.codroid.textmate.grammar.Grammar.getRule"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.GrammarConfiguration.hashCode","location":"codroid-textmate/org.codroid.textmate/-grammar-configuration/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.GrammarConfiguration.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.Token.hashCode","location":"codroid-textmate/org.codroid.textmate/-token/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.Token.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.TokenizeLineResult.hashCode","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.TokenizeLineResult.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.grammar.AttributedScopeStack.hashCode","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.grammar.AttributedScopeStack.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.grammar.StateStack.hashCode","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.grammar.StateStack.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.hashCode","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-injections-result/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.grammar.tokenize.MatchResult.hashCode","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-result/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.grammar.tokenize.MatchResult.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.rule.CompilePatternsResult.hashCode","location":"codroid-textmate/org.codroid.textmate.rule/-compile-patterns-result/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.rule.CompilePatternsResult.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.rule.FindNextMatchResult.hashCode","location":"codroid-textmate/org.codroid.textmate.rule/-find-next-match-result/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.rule.FindNextMatchResult.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.rule.RuleId.hashCode","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.rule.RuleId.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.theme.RawTheme.hashCode","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.theme.RawTheme.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.theme.RawThemeSetting.hashCode","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.theme.RawThemeSetting.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.theme.Setting.hashCode","location":"codroid-textmate/org.codroid.textmate.theme/-setting/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.theme.Setting.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.theme.StyleAttributes.hashCode","location":"codroid-textmate/org.codroid.textmate.theme/-style-attributes/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.theme.StyleAttributes.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.theme.Theme.hashCode","location":"codroid-textmate/org.codroid.textmate.theme/-theme/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.theme.Theme.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.codroid.textmate.theme.ThemeTrieElement.hashCode","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.codroid.textmate.theme.ThemeTrieElement.hashCode"]},{"name":"open override fun injections(targetScope: ScopeName): Array<ScopeName>?","description":"org.codroid.textmate.SyncRegistry.injections","location":"codroid-textmate/org.codroid.textmate/-sync-registry/injections.html","searchKeys":["injections","open override fun injections(targetScope: ScopeName): Array<ScopeName>?","org.codroid.textmate.SyncRegistry.injections"]},{"name":"open override fun lookup(scopeName: ScopeName): RawGrammar?","description":"org.codroid.textmate.SyncRegistry.lookup","location":"codroid-textmate/org.codroid.textmate/-sync-registry/lookup.html","searchKeys":["lookup","open override fun lookup(scopeName: ScopeName): RawGrammar?","org.codroid.textmate.SyncRegistry.lookup"]},{"name":"open override fun replace(origin: String, transform: (result: MatchResult) -> String): String","description":"org.codroid.textmate.regex.StandardRegularExp.replace","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regular-exp/replace.html","searchKeys":["replace","open override fun replace(origin: String, transform: (result: MatchResult) -> String): String","org.codroid.textmate.regex.StandardRegularExp.replace"]},{"name":"open override fun search(input: String, startPosition: Int): MatchResult?","description":"org.codroid.textmate.regex.StandardRegularExp.search","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regular-exp/search.html","searchKeys":["search","open override fun search(input: String, startPosition: Int): MatchResult?","org.codroid.textmate.regex.StandardRegularExp.search"]},{"name":"open override fun serialize(encoder: Encoder, value: Array<String>)","description":"org.codroid.textmate.theme.RawThemeSettingScopeSerializer.serialize","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting-scope-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: Array<String>)","org.codroid.textmate.theme.RawThemeSettingScopeSerializer.serialize"]},{"name":"open override fun serialize(encoder: Encoder, value: Boolean)","description":"org.codroid.textmate.IntBooleanSerializer.serialize","location":"codroid-textmate/org.codroid.textmate/-int-boolean-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(encoder: Encoder, value: Boolean)","org.codroid.textmate.IntBooleanSerializer.serialize"]},{"name":"open override fun themeMatch(scopePath: ScopeStack): StyleAttributes?","description":"org.codroid.textmate.SyncRegistry.themeMatch","location":"codroid-textmate/org.codroid.textmate/-sync-registry/theme-match.html","searchKeys":["themeMatch","open override fun themeMatch(scopePath: ScopeStack): StyleAttributes?","org.codroid.textmate.SyncRegistry.themeMatch"]},{"name":"open override fun toKey(): String","description":"org.codroid.textmate.grammar.TopLevelRepositoryRuleReference.toKey","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-rule-reference/to-key.html","searchKeys":["toKey","open override fun toKey(): String","org.codroid.textmate.grammar.TopLevelRepositoryRuleReference.toKey"]},{"name":"open override fun toKey(): String","description":"org.codroid.textmate.grammar.TopLevelRuleReference.toKey","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-rule-reference/to-key.html","searchKeys":["toKey","open override fun toKey(): String","org.codroid.textmate.grammar.TopLevelRuleReference.toKey"]},{"name":"open override fun toString(): String","description":"org.codroid.textmate.rule.CompiledRule.toString","location":"codroid-textmate/org.codroid.textmate.rule/-compiled-rule/to-string.html","searchKeys":["toString","open override fun toString(): String","org.codroid.textmate.rule.CompiledRule.toString"]},{"name":"open override fun toString(): String","description":"org.codroid.textmate.rule.RuleId.toString","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/to-string.html","searchKeys":["toString","open override fun toString(): String","org.codroid.textmate.rule.RuleId.toString"]},{"name":"open override fun toString(): String","description":"org.codroid.textmate.theme.ColorMap.toString","location":"codroid-textmate/org.codroid.textmate.theme/-color-map/to-string.html","searchKeys":["toString","open override fun toString(): String","org.codroid.textmate.theme.ColorMap.toString"]},{"name":"open override fun toString(): String","description":"org.codroid.textmate.theme.ScopeStack.toString","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/to-string.html","searchKeys":["toString","open override fun toString(): String","org.codroid.textmate.theme.ScopeStack.toString"]},{"name":"open override fun toString(): String","description":"org.codroid.textmate.theme.Theme.toString","location":"codroid-textmate/org.codroid.textmate.theme/-theme/to-string.html","searchKeys":["toString","open override fun toString(): String","org.codroid.textmate.theme.Theme.toString"]},{"name":"open override fun toString(): String","description":"org.codroid.textmate.theme.ThemeTrieElement.toString","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element/to-string.html","searchKeys":["toString","open override fun toString(): String","org.codroid.textmate.theme.ThemeTrieElement.toString"]},{"name":"open override fun toString(): String","description":"org.codroid.textmate.theme.ThemeTrieElementRule.toString","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/to-string.html","searchKeys":["toString","open override fun toString(): String","org.codroid.textmate.theme.ThemeTrieElementRule.toString"]},{"name":"open override fun tokenizeLine(lineText: String, prevState: StateStack?, timeLimit: Int?): TokenizeLineResult","description":"org.codroid.textmate.grammar.Grammar.tokenizeLine","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/tokenize-line.html","searchKeys":["tokenizeLine","open override fun tokenizeLine(lineText: String, prevState: StateStack?, timeLimit: Int?): TokenizeLineResult","org.codroid.textmate.grammar.Grammar.tokenizeLine"]},{"name":"open override fun tokenizeLine2(lineText: String, prevState: StateStack?, timeLimit: Int?): TokenizeLineResult2","description":"org.codroid.textmate.grammar.Grammar.tokenizeLine2","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/tokenize-line2.html","searchKeys":["tokenizeLine2","open override fun tokenizeLine2(lineText: String, prevState: StateStack?, timeLimit: Int?): TokenizeLineResult2","org.codroid.textmate.grammar.Grammar.tokenizeLine2"]},{"name":"open override val captureIndices: Array<IntRange>","description":"org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.captureIndices","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-injections-result/capture-indices.html","searchKeys":["captureIndices","open override val captureIndices: Array<IntRange>","org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.captureIndices"]},{"name":"open override val contentName: String?","description":"org.codroid.textmate.rule.BeginEndRule.contentName","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/content-name.html","searchKeys":["contentName","open override val contentName: String?","org.codroid.textmate.rule.BeginEndRule.contentName"]},{"name":"open override val contentName: String?","description":"org.codroid.textmate.rule.BeginWhileRule.contentName","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/content-name.html","searchKeys":["contentName","open override val contentName: String?","org.codroid.textmate.rule.BeginWhileRule.contentName"]},{"name":"open override val contentName: String?","description":"org.codroid.textmate.rule.CaptureRule.contentName","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/content-name.html","searchKeys":["contentName","open override val contentName: String?","org.codroid.textmate.rule.CaptureRule.contentName"]},{"name":"open override val contentName: String?","description":"org.codroid.textmate.rule.IncludeOnlyRule.contentName","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/content-name.html","searchKeys":["contentName","open override val contentName: String?","org.codroid.textmate.rule.IncludeOnlyRule.contentName"]},{"name":"open override val contentName: String? = null","description":"org.codroid.textmate.rule.MatchRule.contentName","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/content-name.html","searchKeys":["contentName","open override val contentName: String? = null","org.codroid.textmate.rule.MatchRule.contentName"]},{"name":"open override val contentNameIsCapturing: Boolean","description":"org.codroid.textmate.rule.BeginEndRule.contentNameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/content-name-is-capturing.html","searchKeys":["contentNameIsCapturing","open override val contentNameIsCapturing: Boolean","org.codroid.textmate.rule.BeginEndRule.contentNameIsCapturing"]},{"name":"open override val contentNameIsCapturing: Boolean","description":"org.codroid.textmate.rule.BeginWhileRule.contentNameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/content-name-is-capturing.html","searchKeys":["contentNameIsCapturing","open override val contentNameIsCapturing: Boolean","org.codroid.textmate.rule.BeginWhileRule.contentNameIsCapturing"]},{"name":"open override val contentNameIsCapturing: Boolean","description":"org.codroid.textmate.rule.CaptureRule.contentNameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/content-name-is-capturing.html","searchKeys":["contentNameIsCapturing","open override val contentNameIsCapturing: Boolean","org.codroid.textmate.rule.CaptureRule.contentNameIsCapturing"]},{"name":"open override val contentNameIsCapturing: Boolean","description":"org.codroid.textmate.rule.IncludeOnlyRule.contentNameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/content-name-is-capturing.html","searchKeys":["contentNameIsCapturing","open override val contentNameIsCapturing: Boolean","org.codroid.textmate.rule.IncludeOnlyRule.contentNameIsCapturing"]},{"name":"open override val contentNameIsCapturing: Boolean","description":"org.codroid.textmate.rule.MatchRule.contentNameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/content-name-is-capturing.html","searchKeys":["contentNameIsCapturing","open override val contentNameIsCapturing: Boolean","org.codroid.textmate.rule.MatchRule.contentNameIsCapturing"]},{"name":"open override val descriptor: SerialDescriptor","description":"org.codroid.textmate.IntBooleanSerializer.descriptor","location":"codroid-textmate/org.codroid.textmate/-int-boolean-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","org.codroid.textmate.IntBooleanSerializer.descriptor"]},{"name":"open override val descriptor: SerialDescriptor","description":"org.codroid.textmate.theme.RawThemeSettingScopeSerializer.descriptor","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting-scope-serializer/descriptor.html","searchKeys":["descriptor","open override val descriptor: SerialDescriptor","org.codroid.textmate.theme.RawThemeSettingScopeSerializer.descriptor"]},{"name":"open override val hasMissingPatterns: Boolean","description":"org.codroid.textmate.rule.BeginEndRule.hasMissingPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/has-missing-patterns.html","searchKeys":["hasMissingPatterns","open override val hasMissingPatterns: Boolean","org.codroid.textmate.rule.BeginEndRule.hasMissingPatterns"]},{"name":"open override val hasMissingPatterns: Boolean","description":"org.codroid.textmate.rule.BeginWhileRule.hasMissingPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/has-missing-patterns.html","searchKeys":["hasMissingPatterns","open override val hasMissingPatterns: Boolean","org.codroid.textmate.rule.BeginWhileRule.hasMissingPatterns"]},{"name":"open override val hasMissingPatterns: Boolean","description":"org.codroid.textmate.rule.IncludeOnlyRule.hasMissingPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/has-missing-patterns.html","searchKeys":["hasMissingPatterns","open override val hasMissingPatterns: Boolean","org.codroid.textmate.rule.IncludeOnlyRule.hasMissingPatterns"]},{"name":"open override val id: RuleId","description":"org.codroid.textmate.rule.BeginEndRule.id","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/id.html","searchKeys":["id","open override val id: RuleId","org.codroid.textmate.rule.BeginEndRule.id"]},{"name":"open override val id: RuleId","description":"org.codroid.textmate.rule.BeginWhileRule.id","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/id.html","searchKeys":["id","open override val id: RuleId","org.codroid.textmate.rule.BeginWhileRule.id"]},{"name":"open override val id: RuleId","description":"org.codroid.textmate.rule.CaptureRule.id","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/id.html","searchKeys":["id","open override val id: RuleId","org.codroid.textmate.rule.CaptureRule.id"]},{"name":"open override val id: RuleId","description":"org.codroid.textmate.rule.IncludeOnlyRule.id","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/id.html","searchKeys":["id","open override val id: RuleId","org.codroid.textmate.rule.IncludeOnlyRule.id"]},{"name":"open override val id: RuleId","description":"org.codroid.textmate.rule.MatchRule.id","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/id.html","searchKeys":["id","open override val id: RuleId","org.codroid.textmate.rule.MatchRule.id"]},{"name":"open override val index: Int","description":"org.codroid.textmate.regex.StandardRegexMatch.index","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex-match/--index--.html","searchKeys":["index","open override val index: Int","org.codroid.textmate.regex.StandardRegexMatch.index"]},{"name":"open override val kind: IncludeReferenceKind","description":"org.codroid.textmate.grammar.BaseReference.kind","location":"codroid-textmate/org.codroid.textmate.grammar/-base-reference/kind.html","searchKeys":["kind","open override val kind: IncludeReferenceKind","org.codroid.textmate.grammar.BaseReference.kind"]},{"name":"open override val kind: IncludeReferenceKind","description":"org.codroid.textmate.grammar.RelativeReference.kind","location":"codroid-textmate/org.codroid.textmate.grammar/-relative-reference/kind.html","searchKeys":["kind","open override val kind: IncludeReferenceKind","org.codroid.textmate.grammar.RelativeReference.kind"]},{"name":"open override val kind: IncludeReferenceKind","description":"org.codroid.textmate.grammar.SelfReference.kind","location":"codroid-textmate/org.codroid.textmate.grammar/-self-reference/kind.html","searchKeys":["kind","open override val kind: IncludeReferenceKind","org.codroid.textmate.grammar.SelfReference.kind"]},{"name":"open override val kind: IncludeReferenceKind","description":"org.codroid.textmate.grammar.TopLevelReference.kind","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-reference/kind.html","searchKeys":["kind","open override val kind: IncludeReferenceKind","org.codroid.textmate.grammar.TopLevelReference.kind"]},{"name":"open override val kind: IncludeReferenceKind","description":"org.codroid.textmate.grammar.TopLevelRepositoryReference.kind","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-reference/kind.html","searchKeys":["kind","open override val kind: IncludeReferenceKind","org.codroid.textmate.grammar.TopLevelRepositoryReference.kind"]},{"name":"open override val matchedRuleId: RuleId","description":"org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.matchedRuleId","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-injections-result/matched-rule-id.html","searchKeys":["matchedRuleId","open override val matchedRuleId: RuleId","org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.matchedRuleId"]},{"name":"open override val name: String?","description":"org.codroid.textmate.rule.BeginEndRule.name","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/name.html","searchKeys":["name","open override val name: String?","org.codroid.textmate.rule.BeginEndRule.name"]},{"name":"open override val name: String?","description":"org.codroid.textmate.rule.BeginWhileRule.name","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/name.html","searchKeys":["name","open override val name: String?","org.codroid.textmate.rule.BeginWhileRule.name"]},{"name":"open override val name: String?","description":"org.codroid.textmate.rule.CaptureRule.name","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/name.html","searchKeys":["name","open override val name: String?","org.codroid.textmate.rule.CaptureRule.name"]},{"name":"open override val name: String?","description":"org.codroid.textmate.rule.IncludeOnlyRule.name","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/name.html","searchKeys":["name","open override val name: String?","org.codroid.textmate.rule.IncludeOnlyRule.name"]},{"name":"open override val name: String?","description":"org.codroid.textmate.rule.MatchRule.name","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/name.html","searchKeys":["name","open override val name: String?","org.codroid.textmate.rule.MatchRule.name"]},{"name":"open override val nameIsCapturing: Boolean","description":"org.codroid.textmate.rule.BeginEndRule.nameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/name-is-capturing.html","searchKeys":["nameIsCapturing","open override val nameIsCapturing: Boolean","org.codroid.textmate.rule.BeginEndRule.nameIsCapturing"]},{"name":"open override val nameIsCapturing: Boolean","description":"org.codroid.textmate.rule.BeginWhileRule.nameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/name-is-capturing.html","searchKeys":["nameIsCapturing","open override val nameIsCapturing: Boolean","org.codroid.textmate.rule.BeginWhileRule.nameIsCapturing"]},{"name":"open override val nameIsCapturing: Boolean","description":"org.codroid.textmate.rule.CaptureRule.nameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/name-is-capturing.html","searchKeys":["nameIsCapturing","open override val nameIsCapturing: Boolean","org.codroid.textmate.rule.CaptureRule.nameIsCapturing"]},{"name":"open override val nameIsCapturing: Boolean","description":"org.codroid.textmate.rule.IncludeOnlyRule.nameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/name-is-capturing.html","searchKeys":["nameIsCapturing","open override val nameIsCapturing: Boolean","org.codroid.textmate.rule.IncludeOnlyRule.nameIsCapturing"]},{"name":"open override val nameIsCapturing: Boolean","description":"org.codroid.textmate.rule.MatchRule.nameIsCapturing","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/name-is-capturing.html","searchKeys":["nameIsCapturing","open override val nameIsCapturing: Boolean","org.codroid.textmate.rule.MatchRule.nameIsCapturing"]},{"name":"open override val patterns: Array<RuleId>","description":"org.codroid.textmate.rule.BeginEndRule.patterns","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/patterns.html","searchKeys":["patterns","open override val patterns: Array<RuleId>","org.codroid.textmate.rule.BeginEndRule.patterns"]},{"name":"open override val patterns: Array<RuleId>","description":"org.codroid.textmate.rule.BeginWhileRule.patterns","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/patterns.html","searchKeys":["patterns","open override val patterns: Array<RuleId>","org.codroid.textmate.rule.BeginWhileRule.patterns"]},{"name":"open override val patterns: Array<RuleId>","description":"org.codroid.textmate.rule.IncludeOnlyRule.patterns","location":"codroid-textmate/org.codroid.textmate.rule/-include-only-rule/patterns.html","searchKeys":["patterns","open override val patterns: Array<RuleId>","org.codroid.textmate.rule.IncludeOnlyRule.patterns"]},{"name":"open override val ranges: Array<IntRange>","description":"org.codroid.textmate.regex.StandardRegexMatch.ranges","location":"codroid-textmate/org.codroid.textmate.regex/-standard-regex-match/ranges.html","searchKeys":["ranges","open override val ranges: Array<IntRange>","org.codroid.textmate.regex.StandardRegexMatch.ranges"]},{"name":"open override val scopeName: ScopeName","description":"org.codroid.textmate.grammar.TopLevelReference.scopeName","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-reference/scope-name.html","searchKeys":["scopeName","open override val scopeName: ScopeName","org.codroid.textmate.grammar.TopLevelReference.scopeName"]},{"name":"open override val scopeName: ScopeName","description":"org.codroid.textmate.grammar.TopLevelRepositoryReference.scopeName","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-reference/scope-name.html","searchKeys":["scopeName","open override val scopeName: ScopeName","org.codroid.textmate.grammar.TopLevelRepositoryReference.scopeName"]},{"name":"open override val scopeName: ScopeName","description":"org.codroid.textmate.grammar.TopLevelRepositoryRuleReference.scopeName","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-rule-reference/scope-name.html","searchKeys":["scopeName","open override val scopeName: ScopeName","org.codroid.textmate.grammar.TopLevelRepositoryRuleReference.scopeName"]},{"name":"open override val scopeName: ScopeName","description":"org.codroid.textmate.grammar.TopLevelRuleReference.scopeName","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-rule-reference/scope-name.html","searchKeys":["scopeName","open override val scopeName: ScopeName","org.codroid.textmate.grammar.TopLevelRuleReference.scopeName"]},{"name":"open override val selfGrammar: RawGrammar","description":"org.codroid.textmate.grammar.ContextWithRepository.selfGrammar","location":"codroid-textmate/org.codroid.textmate.grammar/-context-with-repository/self-grammar.html","searchKeys":["selfGrammar","open override val selfGrammar: RawGrammar","org.codroid.textmate.grammar.ContextWithRepository.selfGrammar"]},{"name":"open override var baseGrammar: RawGrammar","description":"org.codroid.textmate.grammar.ContextWithRepository.baseGrammar","location":"codroid-textmate/org.codroid.textmate.grammar/-context-with-repository/base-grammar.html","searchKeys":["baseGrammar","open override var baseGrammar: RawGrammar","org.codroid.textmate.grammar.ContextWithRepository.baseGrammar"]},{"name":"open override var depth: Int","description":"org.codroid.textmate.grammar.StateStack.depth","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/depth.html","searchKeys":["depth","open override var depth: Int","org.codroid.textmate.grammar.StateStack.depth"]},{"name":"open override var stackElementBrand: Unit","description":"org.codroid.textmate.grammar.StateStack.stackElementBrand","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/stack-element-brand.html","searchKeys":["stackElementBrand","open override var stackElementBrand: Unit","org.codroid.textmate.grammar.StateStack.stackElementBrand"]},{"name":"open val baseGrammar: RawGrammar","description":"org.codroid.textmate.grammar.Context.baseGrammar","location":"codroid-textmate/org.codroid.textmate.grammar/-context/base-grammar.html","searchKeys":["baseGrammar","open val baseGrammar: RawGrammar","org.codroid.textmate.grammar.Context.baseGrammar"]},{"name":"open val captureIndices: Array<IntRange>","description":"org.codroid.textmate.grammar.tokenize.MatchResult.captureIndices","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-result/capture-indices.html","searchKeys":["captureIndices","open val captureIndices: Array<IntRange>","org.codroid.textmate.grammar.tokenize.MatchResult.captureIndices"]},{"name":"open val getInjections: (ScopeName) -> Array<ScopeName>?? = null","description":"org.codroid.textmate.RegistryOptions.getInjections","location":"codroid-textmate/org.codroid.textmate/-registry-options/get-injections.html","searchKeys":["getInjections","open val getInjections: (ScopeName) -> Array<ScopeName>?? = null","org.codroid.textmate.RegistryOptions.getInjections"]},{"name":"open val loadGrammar: (ScopeName) -> RawGrammar?? = null","description":"org.codroid.textmate.RegistryOptions.loadGrammar","location":"codroid-textmate/org.codroid.textmate/-registry-options/load-grammar.html","searchKeys":["loadGrammar","open val loadGrammar: (ScopeName) -> RawGrammar?? = null","org.codroid.textmate.RegistryOptions.loadGrammar"]},{"name":"open val matchedRuleId: RuleId","description":"org.codroid.textmate.grammar.tokenize.MatchResult.matchedRuleId","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-result/matched-rule-id.html","searchKeys":["matchedRuleId","open val matchedRuleId: RuleId","org.codroid.textmate.grammar.tokenize.MatchResult.matchedRuleId"]},{"name":"open val regexLib: RegexLib","description":"org.codroid.textmate.RegistryOptions.regexLib","location":"codroid-textmate/org.codroid.textmate/-registry-options/regex-lib.html","searchKeys":["regexLib","open val regexLib: RegexLib","org.codroid.textmate.RegistryOptions.regexLib"]},{"name":"open val selfGrammar: RawGrammar","description":"org.codroid.textmate.grammar.Context.selfGrammar","location":"codroid-textmate/org.codroid.textmate.grammar/-context/self-grammar.html","searchKeys":["selfGrammar","open val selfGrammar: RawGrammar","org.codroid.textmate.grammar.Context.selfGrammar"]},{"name":"operator fun inc(): RuleId","description":"org.codroid.textmate.rule.RuleId.inc","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/inc.html","searchKeys":["inc","operator fun inc(): RuleId","org.codroid.textmate.rule.RuleId.inc"]},{"name":"val BACK_REFERENCING_END: Regex","description":"org.codroid.textmate.rule.BACK_REFERENCING_END","location":"codroid-textmate/org.codroid.textmate.rule/-b-a-c-k_-r-e-f-e-r-e-n-c-i-n-g_-e-n-d.html","searchKeys":["BACK_REFERENCING_END","val BACK_REFERENCING_END: Regex","org.codroid.textmate.rule.BACK_REFERENCING_END"]},{"name":"val End: RuleId","description":"org.codroid.textmate.rule.RuleId.Companion.End","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/-companion/-end.html","searchKeys":["End","val End: RuleId","org.codroid.textmate.rule.RuleId.Companion.End"]},{"name":"val HAS_BACK_REFERENCES: Regex","description":"org.codroid.textmate.rule.HAS_BACK_REFERENCES","location":"codroid-textmate/org.codroid.textmate.rule/-h-a-s_-b-a-c-k_-r-e-f-e-r-e-n-c-e-s.html","searchKeys":["HAS_BACK_REFERENCES","val HAS_BACK_REFERENCES: Regex","org.codroid.textmate.rule.HAS_BACK_REFERENCES"]},{"name":"val Null: StateStack","description":"org.codroid.textmate.grammar.StateStack.Companion.Null","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/-companion/-null.html","searchKeys":["Null","val Null: StateStack","org.codroid.textmate.grammar.StateStack.Companion.Null"]},{"name":"val UseOnigurumaFindOptions: Boolean = false","description":"org.codroid.textmate.UseOnigurumaFindOptions","location":"codroid-textmate/org.codroid.textmate/-use-oniguruma-find-options.html","searchKeys":["UseOnigurumaFindOptions","val UseOnigurumaFindOptions: Boolean = false","org.codroid.textmate.UseOnigurumaFindOptions"]},{"name":"val While: RuleId","description":"org.codroid.textmate.rule.RuleId.Companion.While","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/-companion/-while.html","searchKeys":["While","val While: RuleId","org.codroid.textmate.rule.RuleId.Companion.While"]},{"name":"val a0g0: String","description":"org.codroid.textmate.rule.RegExpSourceAnchorCache.a0g0","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-anchor-cache/a0g0.html","searchKeys":["a0g0","val a0g0: String","org.codroid.textmate.rule.RegExpSourceAnchorCache.a0g0"]},{"name":"val a0g1: String","description":"org.codroid.textmate.rule.RegExpSourceAnchorCache.a0g1","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-anchor-cache/a0g1.html","searchKeys":["a0g1","val a0g1: String","org.codroid.textmate.rule.RegExpSourceAnchorCache.a0g1"]},{"name":"val a1g0: String","description":"org.codroid.textmate.rule.RegExpSourceAnchorCache.a1g0","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-anchor-cache/a1g0.html","searchKeys":["a1g0","val a1g0: String","org.codroid.textmate.rule.RegExpSourceAnchorCache.a1g0"]},{"name":"val a1g1: String","description":"org.codroid.textmate.rule.RegExpSourceAnchorCache.a1g1","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-anchor-cache/a1g1.html","searchKeys":["a1g1","val a1g1: String","org.codroid.textmate.rule.RegExpSourceAnchorCache.a1g1"]},{"name":"val anchorCache: RegExpSourceListAnchorCache","description":"org.codroid.textmate.rule.RegExpSourceList.anchorCache","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/anchor-cache.html","searchKeys":["anchorCache","val anchorCache: RegExpSourceListAnchorCache","org.codroid.textmate.rule.RegExpSourceList.anchorCache"]},{"name":"val anchorPosition: Int","description":"org.codroid.textmate.grammar.tokenize.WhileCheckResult.anchorPosition","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-while-check-result/anchor-position.html","searchKeys":["anchorPosition","val anchorPosition: Int","org.codroid.textmate.grammar.tokenize.WhileCheckResult.anchorPosition"]},{"name":"val applyEndPatternLast: Boolean = false","description":"org.codroid.textmate.rule.BeginEndRule.applyEndPatternLast","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/apply-end-pattern-last.html","searchKeys":["applyEndPatternLast","val applyEndPatternLast: Boolean = false","org.codroid.textmate.rule.BeginEndRule.applyEndPatternLast"]},{"name":"val applyEndPatternLast: Boolean? = null","description":"org.codroid.textmate.grammar.RawRule.applyEndPatternLast","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/apply-end-pattern-last.html","searchKeys":["applyEndPatternLast","val applyEndPatternLast: Boolean? = null","org.codroid.textmate.grammar.RawRule.applyEndPatternLast"]},{"name":"val background: String?","description":"org.codroid.textmate.theme.ParsedThemeRule.background","location":"codroid-textmate/org.codroid.textmate.theme/-parsed-theme-rule/background.html","searchKeys":["background","val background: String?","org.codroid.textmate.theme.ParsedThemeRule.background"]},{"name":"val backgroundId: UInt","description":"org.codroid.textmate.theme.StyleAttributes.backgroundId","location":"codroid-textmate/org.codroid.textmate.theme/-style-attributes/background-id.html","searchKeys":["backgroundId","val backgroundId: UInt","org.codroid.textmate.theme.StyleAttributes.backgroundId"]},{"name":"val balancedBracketSelectors: Array<String>? = null","description":"org.codroid.textmate.GrammarConfiguration.balancedBracketSelectors","location":"codroid-textmate/org.codroid.textmate/-grammar-configuration/balanced-bracket-selectors.html","searchKeys":["balancedBracketSelectors","val balancedBracketSelectors: Array<String>? = null","org.codroid.textmate.GrammarConfiguration.balancedBracketSelectors"]},{"name":"val balancedBracketSelectors: BalancedBracketSelectors? = null","description":"org.codroid.textmate.grammar.LineTokens.balancedBracketSelectors","location":"codroid-textmate/org.codroid.textmate.grammar/-line-tokens/balanced-bracket-selectors.html","searchKeys":["balancedBracketSelectors","val balancedBracketSelectors: BalancedBracketSelectors? = null","org.codroid.textmate.grammar.LineTokens.balancedBracketSelectors"]},{"name":"val begin: String? = null","description":"org.codroid.textmate.grammar.RawRule.begin","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/begin.html","searchKeys":["begin","val begin: String? = null","org.codroid.textmate.grammar.RawRule.begin"]},{"name":"val beginCaptures: Array<CaptureRule?>","description":"org.codroid.textmate.rule.BeginEndRule.beginCaptures","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/begin-captures.html","searchKeys":["beginCaptures","val beginCaptures: Array<CaptureRule?>","org.codroid.textmate.rule.BeginEndRule.beginCaptures"]},{"name":"val beginCaptures: Array<CaptureRule?>","description":"org.codroid.textmate.rule.BeginWhileRule.beginCaptures","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/begin-captures.html","searchKeys":["beginCaptures","val beginCaptures: Array<CaptureRule?>","org.codroid.textmate.rule.BeginWhileRule.beginCaptures"]},{"name":"val beginCaptures: RawCaptures? = null","description":"org.codroid.textmate.grammar.RawRule.beginCaptures","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/begin-captures.html","searchKeys":["beginCaptures","val beginCaptures: RawCaptures? = null","org.codroid.textmate.grammar.RawRule.beginCaptures"]},{"name":"val beginRuleCapturedEOL: Boolean","description":"org.codroid.textmate.grammar.StateStack.beginRuleCapturedEOL","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/begin-rule-captured-e-o-l.html","searchKeys":["beginRuleCapturedEOL","val beginRuleCapturedEOL: Boolean","org.codroid.textmate.grammar.StateStack.beginRuleCapturedEOL"]},{"name":"val captureIndices: Array<IntRange>","description":"org.codroid.textmate.rule.FindNextMatchResult.captureIndices","location":"codroid-textmate/org.codroid.textmate.rule/-find-next-match-result/capture-indices.html","searchKeys":["captureIndices","val captureIndices: Array<IntRange>","org.codroid.textmate.rule.FindNextMatchResult.captureIndices"]},{"name":"val captures: Array<CaptureRule?>","description":"org.codroid.textmate.rule.MatchRule.captures","location":"codroid-textmate/org.codroid.textmate.rule/-match-rule/captures.html","searchKeys":["captures","val captures: Array<CaptureRule?>","org.codroid.textmate.rule.MatchRule.captures"]},{"name":"val captures: RawCaptures? = null","description":"org.codroid.textmate.grammar.RawRule.captures","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/captures.html","searchKeys":["captures","val captures: RawCaptures? = null","org.codroid.textmate.grammar.RawRule.captures"]},{"name":"val char: Int","description":"org.codroid.textmate.grammar.Location.char","location":"codroid-textmate/org.codroid.textmate.grammar/-location/char.html","searchKeys":["char","val char: Int","org.codroid.textmate.grammar.Location.char"]},{"name":"val colorMap: Array<String>? = null","description":"org.codroid.textmate.RegistryOptions.colorMap","location":"codroid-textmate/org.codroid.textmate/-registry-options/color-map.html","searchKeys":["colorMap","val colorMap: Array<String>? = null","org.codroid.textmate.RegistryOptions.colorMap"]},{"name":"val contentName: String? = null","description":"org.codroid.textmate.grammar.RawRule.contentName","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/content-name.html","searchKeys":["contentName","val contentName: String? = null","org.codroid.textmate.grammar.RawRule.contentName"]},{"name":"val contentNameScopesList: AttributedScopeStack","description":"org.codroid.textmate.grammar.StateStack.contentNameScopesList","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/content-name-scopes-list.html","searchKeys":["contentNameScopesList","val contentNameScopesList: AttributedScopeStack","org.codroid.textmate.grammar.StateStack.contentNameScopesList"]},{"name":"val count: Int","description":"org.codroid.textmate.regex.MatchResult.count","location":"codroid-textmate/org.codroid.textmate.regex/-match-result/count.html","searchKeys":["count","val count: Int","org.codroid.textmate.regex.MatchResult.count"]},{"name":"val count: Int","description":"org.codroid.textmate.regex.StandardResult.count","location":"codroid-textmate/org.codroid.textmate.regex/-standard-result/count.html","searchKeys":["count","val count: Int","org.codroid.textmate.regex.StandardResult.count"]},{"name":"val debugSelector: String","description":"org.codroid.textmate.grammar.Injection.debugSelector","location":"codroid-textmate/org.codroid.textmate.grammar/-injection/debug-selector.html","searchKeys":["debugSelector","val debugSelector: String","org.codroid.textmate.grammar.Injection.debugSelector"]},{"name":"val embeddedLanguages: EmbeddedLanguagesMap? = null","description":"org.codroid.textmate.GrammarConfiguration.embeddedLanguages","location":"codroid-textmate/org.codroid.textmate/-grammar-configuration/embedded-languages.html","searchKeys":["embeddedLanguages","val embeddedLanguages: EmbeddedLanguagesMap? = null","org.codroid.textmate.GrammarConfiguration.embeddedLanguages"]},{"name":"val emitBinaryTokens: Boolean","description":"org.codroid.textmate.grammar.LineTokens.emitBinaryTokens","location":"codroid-textmate/org.codroid.textmate.grammar/-line-tokens/emit-binary-tokens.html","searchKeys":["emitBinaryTokens","val emitBinaryTokens: Boolean","org.codroid.textmate.grammar.LineTokens.emitBinaryTokens"]},{"name":"val end: String? = null","description":"org.codroid.textmate.grammar.RawRule.end","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/end.html","searchKeys":["end","val end: String? = null","org.codroid.textmate.grammar.RawRule.end"]},{"name":"val endCaptures: Array<CaptureRule?>","description":"org.codroid.textmate.rule.BeginEndRule.endCaptures","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/end-captures.html","searchKeys":["endCaptures","val endCaptures: Array<CaptureRule?>","org.codroid.textmate.rule.BeginEndRule.endCaptures"]},{"name":"val endCaptures: RawCaptures? = null","description":"org.codroid.textmate.grammar.RawRule.endCaptures","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/end-captures.html","searchKeys":["endCaptures","val endCaptures: RawCaptures? = null","org.codroid.textmate.grammar.RawRule.endCaptures"]},{"name":"val endHasBackReferences: Boolean","description":"org.codroid.textmate.rule.BeginEndRule.endHasBackReferences","location":"codroid-textmate/org.codroid.textmate.rule/-begin-end-rule/end-has-back-references.html","searchKeys":["endHasBackReferences","val endHasBackReferences: Boolean","org.codroid.textmate.rule.BeginEndRule.endHasBackReferences"]},{"name":"val endPos: Int","description":"org.codroid.textmate.grammar.tokenize.LocalStackElement.endPos","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-local-stack-element/end-pos.html","searchKeys":["endPos","val endPos: Int","org.codroid.textmate.grammar.tokenize.LocalStackElement.endPos"]},{"name":"val endRule: String?","description":"org.codroid.textmate.grammar.StateStack.endRule","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/end-rule.html","searchKeys":["endRule","val endRule: String?","org.codroid.textmate.grammar.StateStack.endRule"]},{"name":"val fileTypes: Array<String>? = null","description":"org.codroid.textmate.grammar.RawGrammar.fileTypes","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/file-types.html","searchKeys":["fileTypes","val fileTypes: Array<String>? = null","org.codroid.textmate.grammar.RawGrammar.fileTypes"]},{"name":"val filename: String","description":"org.codroid.textmate.grammar.Location.filename","location":"codroid-textmate/org.codroid.textmate.grammar/-location/filename.html","searchKeys":["filename","val filename: String","org.codroid.textmate.grammar.Location.filename"]},{"name":"val findOptions: FindOption","description":"org.codroid.textmate.grammar.tokenize.PrepareRuleResult.findOptions","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-prepare-rule-result/find-options.html","searchKeys":["findOptions","val findOptions: FindOption","org.codroid.textmate.grammar.tokenize.PrepareRuleResult.findOptions"]},{"name":"val firstLineMatch: String? = null","description":"org.codroid.textmate.grammar.RawGrammar.firstLineMatch","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/first-line-match.html","searchKeys":["firstLineMatch","val firstLineMatch: String? = null","org.codroid.textmate.grammar.RawGrammar.firstLineMatch"]},{"name":"val fontStyle: FontStyle","description":"org.codroid.textmate.theme.ParsedThemeRule.fontStyle","location":"codroid-textmate/org.codroid.textmate.theme/-parsed-theme-rule/font-style.html","searchKeys":["fontStyle","val fontStyle: FontStyle","org.codroid.textmate.theme.ParsedThemeRule.fontStyle"]},{"name":"val fontStyle: FontStyle","description":"org.codroid.textmate.theme.StyleAttributes.fontStyle","location":"codroid-textmate/org.codroid.textmate.theme/-style-attributes/font-style.html","searchKeys":["fontStyle","val fontStyle: FontStyle","org.codroid.textmate.theme.StyleAttributes.fontStyle"]},{"name":"val foreground: String?","description":"org.codroid.textmate.theme.ParsedThemeRule.foreground","location":"codroid-textmate/org.codroid.textmate.theme/-parsed-theme-rule/foreground.html","searchKeys":["foreground","val foreground: String?","org.codroid.textmate.theme.ParsedThemeRule.foreground"]},{"name":"val foregroundId: UInt","description":"org.codroid.textmate.theme.StyleAttributes.foregroundId","location":"codroid-textmate/org.codroid.textmate.theme/-style-attributes/foreground-id.html","searchKeys":["foregroundId","val foregroundId: UInt","org.codroid.textmate.theme.StyleAttributes.foregroundId"]},{"name":"val grammar: RawGrammar","description":"org.codroid.textmate.grammar.Injection.grammar","location":"codroid-textmate/org.codroid.textmate.grammar/-injection/grammar.html","searchKeys":["grammar","val grammar: RawGrammar","org.codroid.textmate.grammar.Injection.grammar"]},{"name":"val groups: Array<MatchGroup>","description":"org.codroid.textmate.regex.MatchResult.groups","location":"codroid-textmate/org.codroid.textmate.regex/-match-result/groups.html","searchKeys":["groups","val groups: Array<MatchGroup>","org.codroid.textmate.regex.MatchResult.groups"]},{"name":"val hasAnchor: Boolean","description":"org.codroid.textmate.rule.RegExpSource.hasAnchor","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/has-anchor.html","searchKeys":["hasAnchor","val hasAnchor: Boolean","org.codroid.textmate.rule.RegExpSource.hasAnchor"]},{"name":"val hasBackReferences: Boolean","description":"org.codroid.textmate.rule.RegExpSource.hasBackReferences","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/has-back-references.html","searchKeys":["hasBackReferences","val hasBackReferences: Boolean","org.codroid.textmate.rule.RegExpSource.hasBackReferences"]},{"name":"val hasMissingPatterns: Boolean","description":"org.codroid.textmate.rule.CompilePatternsResult.hasMissingPatterns","location":"codroid-textmate/org.codroid.textmate.rule/-compile-patterns-result/has-missing-patterns.html","searchKeys":["hasMissingPatterns","val hasMissingPatterns: Boolean","org.codroid.textmate.rule.CompilePatternsResult.hasMissingPatterns"]},{"name":"val include: String? = null","description":"org.codroid.textmate.grammar.RawRule.include","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/include.html","searchKeys":["include","val include: String? = null","org.codroid.textmate.grammar.RawRule.include"]},{"name":"val index: Int","description":"org.codroid.textmate.theme.ParsedThemeRule.index","location":"codroid-textmate/org.codroid.textmate.theme/-parsed-theme-rule/--index--.html","searchKeys":["index","val index: Int","org.codroid.textmate.theme.ParsedThemeRule.index"]},{"name":"val injectionSelector: String? = null","description":"org.codroid.textmate.grammar.RawGrammar.injectionSelector","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/injection-selector.html","searchKeys":["injectionSelector","val injectionSelector: String? = null","org.codroid.textmate.grammar.RawGrammar.injectionSelector"]},{"name":"val injections: Map<String, RawRule>","description":"org.codroid.textmate.grammar.RawGrammar.injections","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/injections.html","searchKeys":["injections","val injections: Map<String, RawRule>","org.codroid.textmate.grammar.RawGrammar.injections"]},{"name":"val isFirstLine: Boolean","description":"org.codroid.textmate.grammar.tokenize.WhileCheckResult.isFirstLine","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-while-check-result/is-first-line.html","searchKeys":["isFirstLine","val isFirstLine: Boolean","org.codroid.textmate.grammar.tokenize.WhileCheckResult.isFirstLine"]},{"name":"val items: MutableList<RegExpSource>","description":"org.codroid.textmate.rule.RegExpSourceList.items","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/items.html","searchKeys":["items","val items: MutableList<RegExpSource>","org.codroid.textmate.rule.RegExpSourceList.items"]},{"name":"val json: Json","description":"org.codroid.textmate.json","location":"codroid-textmate/org.codroid.textmate/json.html","searchKeys":["json","val json: Json","org.codroid.textmate.json"]},{"name":"val languageId: Int","description":"org.codroid.textmate.grammar.BasicScopeAttributes.languageId","location":"codroid-textmate/org.codroid.textmate.grammar/-basic-scope-attributes/language-id.html","searchKeys":["languageId","val languageId: Int","org.codroid.textmate.grammar.BasicScopeAttributes.languageId"]},{"name":"val line: Int","description":"org.codroid.textmate.grammar.Location.line","location":"codroid-textmate/org.codroid.textmate.grammar/-location/line.html","searchKeys":["line","val line: Int","org.codroid.textmate.grammar.Location.line"]},{"name":"val lineLength: Int","description":"org.codroid.textmate.grammar.Grammar.TokenizeResult.lineLength","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/-tokenize-result/line-length.html","searchKeys":["lineLength","val lineLength: Int","org.codroid.textmate.grammar.Grammar.TokenizeResult.lineLength"]},{"name":"val linePos: Int","description":"org.codroid.textmate.grammar.tokenize.WhileCheckResult.linePos","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-while-check-result/line-pos.html","searchKeys":["linePos","val linePos: Int","org.codroid.textmate.grammar.tokenize.WhileCheckResult.linePos"]},{"name":"val lineTokens: LineTokens","description":"org.codroid.textmate.grammar.Grammar.TokenizeResult.lineTokens","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/-tokenize-result/line-tokens.html","searchKeys":["lineTokens","val lineTokens: LineTokens","org.codroid.textmate.grammar.Grammar.TokenizeResult.lineTokens"]},{"name":"val match: String? = null","description":"org.codroid.textmate.grammar.RawRule.match","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/match.html","searchKeys":["match","val match: String? = null","org.codroid.textmate.grammar.RawRule.match"]},{"name":"val matchResult: MatchResult","description":"org.codroid.textmate.regex.StandardResult.matchResult","location":"codroid-textmate/org.codroid.textmate.regex/-standard-result/match-result.html","searchKeys":["matchResult","val matchResult: MatchResult","org.codroid.textmate.regex.StandardResult.matchResult"]},{"name":"val matcher: Matcher<Array<String>>","description":"org.codroid.textmate.grammar.Injection.matcher","location":"codroid-textmate/org.codroid.textmate.grammar/-injection/matcher.html","searchKeys":["matcher","val matcher: Matcher<Array<String>>","org.codroid.textmate.grammar.Injection.matcher"]},{"name":"val matcher: Matcher<Array<String>>","description":"org.codroid.textmate.grammar.TokenTypeMatcher.matcher","location":"codroid-textmate/org.codroid.textmate.grammar/-token-type-matcher/matcher.html","searchKeys":["matcher","val matcher: Matcher<Array<String>>","org.codroid.textmate.grammar.TokenTypeMatcher.matcher"]},{"name":"val matcher: Matcher<T>","description":"org.codroid.textmate.MatcherWithPriority.matcher","location":"codroid-textmate/org.codroid.textmate/-matcher-with-priority/matcher.html","searchKeys":["matcher","val matcher: Matcher<T>","org.codroid.textmate.MatcherWithPriority.matcher"]},{"name":"val matchers: MutableList<MatcherWithPriority<T>>","description":"org.codroid.textmate.Matchers.matchers","location":"codroid-textmate/org.codroid.textmate/-matchers/matchers.html","searchKeys":["matchers","val matchers: MutableList<MatcherWithPriority<T>>","org.codroid.textmate.Matchers.matchers"]},{"name":"val matchesName: (names: List<String>, matcherInput: T) -> Boolean","description":"org.codroid.textmate.Matchers.matchesName","location":"codroid-textmate/org.codroid.textmate/-matchers/matches-name.html","searchKeys":["matchesName","val matchesName: (names: List<String>, matcherInput: T) -> Boolean","org.codroid.textmate.Matchers.matchesName"]},{"name":"val name: String? = null","description":"org.codroid.textmate.grammar.RawGrammar.name","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/name.html","searchKeys":["name","val name: String? = null","org.codroid.textmate.grammar.RawGrammar.name"]},{"name":"val name: String? = null","description":"org.codroid.textmate.grammar.RawRule.name","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/name.html","searchKeys":["name","val name: String? = null","org.codroid.textmate.grammar.RawRule.name"]},{"name":"val nameScopesList: AttributedScopeStack","description":"org.codroid.textmate.grammar.StateStack.nameScopesList","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/name-scopes-list.html","searchKeys":["nameScopesList","val nameScopesList: AttributedScopeStack","org.codroid.textmate.grammar.StateStack.nameScopesList"]},{"name":"val options: RegistryOptions","description":"org.codroid.textmate.Registry.options","location":"codroid-textmate/org.codroid.textmate/-registry/options.html","searchKeys":["options","val options: RegistryOptions","org.codroid.textmate.Registry.options"]},{"name":"val parent: ScopeStack?","description":"org.codroid.textmate.theme.ScopeStack.parent","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/parent.html","searchKeys":["parent","val parent: ScopeStack?","org.codroid.textmate.theme.ScopeStack.parent"]},{"name":"val parent: StateStack?","description":"org.codroid.textmate.grammar.StateStack.parent","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/parent.html","searchKeys":["parent","val parent: StateStack?","org.codroid.textmate.grammar.StateStack.parent"]},{"name":"val parentScopes: List<ScopeName>?","description":"org.codroid.textmate.theme.ParsedThemeRule.parentScopes","location":"codroid-textmate/org.codroid.textmate.theme/-parsed-theme-rule/parent-scopes.html","searchKeys":["parentScopes","val parentScopes: List<ScopeName>?","org.codroid.textmate.theme.ParsedThemeRule.parentScopes"]},{"name":"val parentScopes: List<ScopeName>?","description":"org.codroid.textmate.theme.ThemeTrieElementRule.parentScopes","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/parent-scopes.html","searchKeys":["parentScopes","val parentScopes: List<ScopeName>?","org.codroid.textmate.theme.ThemeTrieElementRule.parentScopes"]},{"name":"val patterns: Array<RawRule>","description":"org.codroid.textmate.grammar.RawGrammar.patterns","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/patterns.html","searchKeys":["patterns","val patterns: Array<RawRule>","org.codroid.textmate.grammar.RawGrammar.patterns"]},{"name":"val patterns: Array<RawRule>? = null","description":"org.codroid.textmate.grammar.RawRule.patterns","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/patterns.html","searchKeys":["patterns","val patterns: Array<RawRule>? = null","org.codroid.textmate.grammar.RawRule.patterns"]},{"name":"val patterns: Array<RuleId>","description":"org.codroid.textmate.rule.CompilePatternsResult.patterns","location":"codroid-textmate/org.codroid.textmate.rule/-compile-patterns-result/patterns.html","searchKeys":["patterns","val patterns: Array<RuleId>","org.codroid.textmate.rule.CompilePatternsResult.patterns"]},{"name":"val performanceNow: () -> Any","description":"org.codroid.textmate.performanceNow","location":"codroid-textmate/org.codroid.textmate/performance-now.html","searchKeys":["performanceNow","val performanceNow: () -> Any","org.codroid.textmate.performanceNow"]},{"name":"val priority: Priority","description":"org.codroid.textmate.MatcherWithPriority.priority","location":"codroid-textmate/org.codroid.textmate/-matcher-with-priority/priority.html","searchKeys":["priority","val priority: Priority","org.codroid.textmate.MatcherWithPriority.priority"]},{"name":"val priority: Priority","description":"org.codroid.textmate.grammar.Injection.priority","location":"codroid-textmate/org.codroid.textmate.grammar/-injection/priority.html","searchKeys":["priority","val priority: Priority","org.codroid.textmate.grammar.Injection.priority"]},{"name":"val priorityMatch: Boolean","description":"org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.priorityMatch","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-match-injections-result/priority-match.html","searchKeys":["priorityMatch","val priorityMatch: Boolean","org.codroid.textmate.grammar.tokenize.MatchInjectionsResult.priorityMatch"]},{"name":"val range: IntRange","description":"org.codroid.textmate.regex.MatchGroup.range","location":"codroid-textmate/org.codroid.textmate.regex/-match-group/range.html","searchKeys":["range","val range: IntRange","org.codroid.textmate.regex.MatchGroup.range"]},{"name":"val range: IntRange","description":"org.codroid.textmate.regex.MatchResult.range","location":"codroid-textmate/org.codroid.textmate.regex/-match-result/range.html","searchKeys":["range","val range: IntRange","org.codroid.textmate.regex.MatchResult.range"]},{"name":"val regexLib: RegexLib","description":"org.codroid.textmate.SyncRegistry.regexLib","location":"codroid-textmate/org.codroid.textmate/-sync-registry/regex-lib.html","searchKeys":["regexLib","val regexLib: RegexLib","org.codroid.textmate.SyncRegistry.regexLib"]},{"name":"val repository: RawRepository","description":"org.codroid.textmate.grammar.RawGrammar.repository","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/repository.html","searchKeys":["repository","val repository: RawRepository","org.codroid.textmate.grammar.RawGrammar.repository"]},{"name":"val repository: RawRepository? = null","description":"org.codroid.textmate.grammar.ContextWithRepository.repository","location":"codroid-textmate/org.codroid.textmate.grammar/-context-with-repository/repository.html","searchKeys":["repository","val repository: RawRepository? = null","org.codroid.textmate.grammar.ContextWithRepository.repository"]},{"name":"val repository: RawRepository? = null","description":"org.codroid.textmate.grammar.RawRule.repository","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/repository.html","searchKeys":["repository","val repository: RawRepository? = null","org.codroid.textmate.grammar.RawRule.repository"]},{"name":"val retokenizeCapturedWithRuleId: RuleId","description":"org.codroid.textmate.rule.CaptureRule.retokenizeCapturedWithRuleId","location":"codroid-textmate/org.codroid.textmate.rule/-capture-rule/retokenize-captured-with-rule-id.html","searchKeys":["retokenizeCapturedWithRuleId","val retokenizeCapturedWithRuleId: RuleId","org.codroid.textmate.rule.CaptureRule.retokenizeCapturedWithRuleId"]},{"name":"val ruleId: RuleId","description":"org.codroid.textmate.grammar.Injection.ruleId","location":"codroid-textmate/org.codroid.textmate.grammar/-injection/rule-id.html","searchKeys":["ruleId","val ruleId: RuleId","org.codroid.textmate.grammar.Injection.ruleId"]},{"name":"val ruleId: RuleId","description":"org.codroid.textmate.grammar.StateStack.ruleId","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/rule-id.html","searchKeys":["ruleId","val ruleId: RuleId","org.codroid.textmate.grammar.StateStack.ruleId"]},{"name":"val ruleId: RuleId","description":"org.codroid.textmate.rule.FindNextMatchResult.ruleId","location":"codroid-textmate/org.codroid.textmate.rule/-find-next-match-result/rule-id.html","searchKeys":["ruleId","val ruleId: RuleId","org.codroid.textmate.rule.FindNextMatchResult.ruleId"]},{"name":"val ruleName: ScopeName","description":"org.codroid.textmate.grammar.RelativeReference.ruleName","location":"codroid-textmate/org.codroid.textmate.grammar/-relative-reference/rule-name.html","searchKeys":["ruleName","val ruleName: ScopeName","org.codroid.textmate.grammar.RelativeReference.ruleName"]},{"name":"val ruleName: String","description":"org.codroid.textmate.grammar.TopLevelRepositoryReference.ruleName","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-reference/rule-name.html","searchKeys":["ruleName","val ruleName: String","org.codroid.textmate.grammar.TopLevelRepositoryReference.ruleName"]},{"name":"val ruleName: String","description":"org.codroid.textmate.grammar.TopLevelRepositoryRuleReference.ruleName","location":"codroid-textmate/org.codroid.textmate.grammar/-top-level-repository-rule-reference/rule-name.html","searchKeys":["ruleName","val ruleName: String","org.codroid.textmate.grammar.TopLevelRepositoryRuleReference.ruleName"]},{"name":"val ruleScanner: CompiledRule","description":"org.codroid.textmate.grammar.tokenize.PrepareRuleResult.ruleScanner","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-prepare-rule-result/rule-scanner.html","searchKeys":["ruleScanner","val ruleScanner: CompiledRule","org.codroid.textmate.grammar.tokenize.PrepareRuleResult.ruleScanner"]},{"name":"val ruleStack: StateStack","description":"org.codroid.textmate.TokenizeLineResult.ruleStack","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result/rule-stack.html","searchKeys":["ruleStack","val ruleStack: StateStack","org.codroid.textmate.TokenizeLineResult.ruleStack"]},{"name":"val ruleStack: StateStack","description":"org.codroid.textmate.TokenizeLineResult2.ruleStack","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result2/rule-stack.html","searchKeys":["ruleStack","val ruleStack: StateStack","org.codroid.textmate.TokenizeLineResult2.ruleStack"]},{"name":"val ruleStack: StateStack","description":"org.codroid.textmate.grammar.Grammar.TokenizeResult.ruleStack","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/-tokenize-result/rule-stack.html","searchKeys":["ruleStack","val ruleStack: StateStack","org.codroid.textmate.grammar.Grammar.TokenizeResult.ruleStack"]},{"name":"val scope: ScopeName","description":"org.codroid.textmate.theme.ParsedThemeRule.scope","location":"codroid-textmate/org.codroid.textmate.theme/-parsed-theme-rule/scope.html","searchKeys":["scope","val scope: ScopeName","org.codroid.textmate.theme.ParsedThemeRule.scope"]},{"name":"val scopeName: ScopeName","description":"org.codroid.textmate.grammar.RawGrammar.scopeName","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-grammar/scope-name.html","searchKeys":["scopeName","val scopeName: ScopeName","org.codroid.textmate.grammar.RawGrammar.scopeName"]},{"name":"val scopeName: ScopeName","description":"org.codroid.textmate.theme.ScopeStack.scopeName","location":"codroid-textmate/org.codroid.textmate.theme/-scope-stack/scope-name.html","searchKeys":["scopeName","val scopeName: ScopeName","org.codroid.textmate.theme.ScopeStack.scopeName"]},{"name":"val scopes: Array<String>","description":"org.codroid.textmate.Token.scopes","location":"codroid-textmate/org.codroid.textmate/-token/scopes.html","searchKeys":["scopes","val scopes: Array<String>","org.codroid.textmate.Token.scopes"]},{"name":"val scopes: AttributedScopeStack","description":"org.codroid.textmate.grammar.tokenize.LocalStackElement.scopes","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-local-stack-element/scopes.html","searchKeys":["scopes","val scopes: AttributedScopeStack","org.codroid.textmate.grammar.tokenize.LocalStackElement.scopes"]},{"name":"val stack: StateStack","description":"org.codroid.textmate.grammar.tokenize.TokenizeStringResult.stack","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-tokenize-string-result/stack.html","searchKeys":["stack","val stack: StateStack","org.codroid.textmate.grammar.tokenize.TokenizeStringResult.stack"]},{"name":"val stack: StateStack","description":"org.codroid.textmate.grammar.tokenize.WhileCheckResult.stack","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-while-check-result/stack.html","searchKeys":["stack","val stack: StateStack","org.codroid.textmate.grammar.tokenize.WhileCheckResult.stack"]},{"name":"val stoppedEarly: Boolean","description":"org.codroid.textmate.TokenizeLineResult.stoppedEarly","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result/stopped-early.html","searchKeys":["stoppedEarly","val stoppedEarly: Boolean","org.codroid.textmate.TokenizeLineResult.stoppedEarly"]},{"name":"val stoppedEarly: Boolean","description":"org.codroid.textmate.TokenizeLineResult2.stoppedEarly","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result2/stopped-early.html","searchKeys":["stoppedEarly","val stoppedEarly: Boolean","org.codroid.textmate.TokenizeLineResult2.stoppedEarly"]},{"name":"val stoppedEarly: Boolean","description":"org.codroid.textmate.grammar.Grammar.TokenizeResult.stoppedEarly","location":"codroid-textmate/org.codroid.textmate.grammar/-grammar/-tokenize-result/stopped-early.html","searchKeys":["stoppedEarly","val stoppedEarly: Boolean","org.codroid.textmate.grammar.Grammar.TokenizeResult.stoppedEarly"]},{"name":"val stoppedEarly: Boolean","description":"org.codroid.textmate.grammar.tokenize.TokenizeStringResult.stoppedEarly","location":"codroid-textmate/org.codroid.textmate.grammar.tokenize/-tokenize-string-result/stopped-early.html","searchKeys":["stoppedEarly","val stoppedEarly: Boolean","org.codroid.textmate.grammar.tokenize.TokenizeStringResult.stoppedEarly"]},{"name":"val theme: RawTheme? = null","description":"org.codroid.textmate.RegistryOptions.theme","location":"codroid-textmate/org.codroid.textmate/-registry-options/theme.html","searchKeys":["theme","val theme: RawTheme? = null","org.codroid.textmate.RegistryOptions.theme"]},{"name":"val tokenAttributes: EncodedToken","description":"org.codroid.textmate.grammar.AttributedScopeStack.tokenAttributes","location":"codroid-textmate/org.codroid.textmate.grammar/-attributed-scope-stack/token-attributes.html","searchKeys":["tokenAttributes","val tokenAttributes: EncodedToken","org.codroid.textmate.grammar.AttributedScopeStack.tokenAttributes"]},{"name":"val tokenType: OptionalStandardTokenType","description":"org.codroid.textmate.grammar.BasicScopeAttributes.tokenType","location":"codroid-textmate/org.codroid.textmate.grammar/-basic-scope-attributes/token-type.html","searchKeys":["tokenType","val tokenType: OptionalStandardTokenType","org.codroid.textmate.grammar.BasicScopeAttributes.tokenType"]},{"name":"val tokenTypeOverride: Array<TokenTypeMatcher>","description":"org.codroid.textmate.grammar.LineTokens.tokenTypeOverride","location":"codroid-textmate/org.codroid.textmate.grammar/-line-tokens/token-type-override.html","searchKeys":["tokenTypeOverride","val tokenTypeOverride: Array<TokenTypeMatcher>","org.codroid.textmate.grammar.LineTokens.tokenTypeOverride"]},{"name":"val tokenTypes: TokenTypeMap? = null","description":"org.codroid.textmate.GrammarConfiguration.tokenTypes","location":"codroid-textmate/org.codroid.textmate/-grammar-configuration/token-types.html","searchKeys":["tokenTypes","val tokenTypes: TokenTypeMap? = null","org.codroid.textmate.GrammarConfiguration.tokenTypes"]},{"name":"val tokens: Array<Token>","description":"org.codroid.textmate.TokenizeLineResult.tokens","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result/tokens.html","searchKeys":["tokens","val tokens: Array<Token>","org.codroid.textmate.TokenizeLineResult.tokens"]},{"name":"val tokens: UIntArray","description":"org.codroid.textmate.TokenizeLineResult2.tokens","location":"codroid-textmate/org.codroid.textmate/-tokenize-line-result2/tokens.html","searchKeys":["tokens","val tokens: UIntArray","org.codroid.textmate.TokenizeLineResult2.tokens"]},{"name":"val type: StandardTokenType","description":"org.codroid.textmate.grammar.TokenTypeMatcher.type","location":"codroid-textmate/org.codroid.textmate.grammar/-token-type-matcher/type.html","searchKeys":["type","val type: StandardTokenType","org.codroid.textmate.grammar.TokenTypeMatcher.type"]},{"name":"val unbalancedBracketSelectors: Array<String>? = null","description":"org.codroid.textmate.GrammarConfiguration.unbalancedBracketSelectors","location":"codroid-textmate/org.codroid.textmate/-grammar-configuration/unbalanced-bracket-selectors.html","searchKeys":["unbalancedBracketSelectors","val unbalancedBracketSelectors: Array<String>? = null","org.codroid.textmate.GrammarConfiguration.unbalancedBracketSelectors"]},{"name":"val value: String","description":"org.codroid.textmate.regex.MatchGroup.value","location":"codroid-textmate/org.codroid.textmate.regex/-match-group/value.html","searchKeys":["value","val value: String","org.codroid.textmate.regex.MatchGroup.value"]},{"name":"val value: String","description":"org.codroid.textmate.regex.MatchResult.value","location":"codroid-textmate/org.codroid.textmate.regex/-match-result/value.html","searchKeys":["value","val value: String","org.codroid.textmate.regex.MatchResult.value"]},{"name":"val visitedRule: MutableSet<RawRule>","description":"org.codroid.textmate.grammar.ExternalReferenceCollector.visitedRule","location":"codroid-textmate/org.codroid.textmate.grammar/-external-reference-collector/visited-rule.html","searchKeys":["visitedRule","val visitedRule: MutableSet<RawRule>","org.codroid.textmate.grammar.ExternalReferenceCollector.visitedRule"]},{"name":"val whileCaptures: Array<CaptureRule?>","description":"org.codroid.textmate.rule.BeginWhileRule.whileCaptures","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/while-captures.html","searchKeys":["whileCaptures","val whileCaptures: Array<CaptureRule?>","org.codroid.textmate.rule.BeginWhileRule.whileCaptures"]},{"name":"val whileCaptures: RawCaptures? = null","description":"org.codroid.textmate.grammar.RawRule.whileCaptures","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/while-captures.html","searchKeys":["whileCaptures","val whileCaptures: RawCaptures? = null","org.codroid.textmate.grammar.RawRule.whileCaptures"]},{"name":"val whileHasBackReferences: Boolean","description":"org.codroid.textmate.rule.BeginWhileRule.whileHasBackReferences","location":"codroid-textmate/org.codroid.textmate.rule/-begin-while-rule/while-has-back-references.html","searchKeys":["whileHasBackReferences","val whileHasBackReferences: Boolean","org.codroid.textmate.rule.BeginWhileRule.whileHasBackReferences"]},{"name":"val while_: String? = null","description":"org.codroid.textmate.grammar.RawRule.while_","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/while_.html","searchKeys":["while_","val while_: String? = null","org.codroid.textmate.grammar.RawRule.while_"]},{"name":"var DebugFlag: Boolean = false","description":"org.codroid.textmate.DebugFlag","location":"codroid-textmate/org.codroid.textmate/-debug-flag.html","searchKeys":["DebugFlag","var DebugFlag: Boolean = false","org.codroid.textmate.DebugFlag"]},{"name":"var a0g0: CompiledRule? = null","description":"org.codroid.textmate.rule.RegExpSourceListAnchorCache.a0g0","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list-anchor-cache/a0g0.html","searchKeys":["a0g0","var a0g0: CompiledRule? = null","org.codroid.textmate.rule.RegExpSourceListAnchorCache.a0g0"]},{"name":"var a0g1: CompiledRule? = null","description":"org.codroid.textmate.rule.RegExpSourceListAnchorCache.a0g1","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list-anchor-cache/a0g1.html","searchKeys":["a0g1","var a0g1: CompiledRule? = null","org.codroid.textmate.rule.RegExpSourceListAnchorCache.a0g1"]},{"name":"var a1g0: CompiledRule? = null","description":"org.codroid.textmate.rule.RegExpSourceListAnchorCache.a1g0","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list-anchor-cache/a1g0.html","searchKeys":["a1g0","var a1g0: CompiledRule? = null","org.codroid.textmate.rule.RegExpSourceListAnchorCache.a1g0"]},{"name":"var a1g1: CompiledRule? = null","description":"org.codroid.textmate.rule.RegExpSourceListAnchorCache.a1g1","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list-anchor-cache/a1g1.html","searchKeys":["a1g1","var a1g1: CompiledRule? = null","org.codroid.textmate.rule.RegExpSourceListAnchorCache.a1g1"]},{"name":"var anchorPos: Int","description":"org.codroid.textmate.grammar.StateStack.anchorPos","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/anchor-pos.html","searchKeys":["anchorPos","var anchorPos: Int","org.codroid.textmate.grammar.StateStack.anchorPos"]},{"name":"var background: String? = null","description":"org.codroid.textmate.theme.Setting.background","location":"codroid-textmate/org.codroid.textmate.theme/-setting/background.html","searchKeys":["background","var background: String? = null","org.codroid.textmate.theme.Setting.background"]},{"name":"var background: UInt","description":"org.codroid.textmate.theme.ThemeTrieElementRule.background","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/background.html","searchKeys":["background","var background: UInt","org.codroid.textmate.theme.ThemeTrieElementRule.background"]},{"name":"var cached: CompiledRule? = null","description":"org.codroid.textmate.rule.RegExpSourceList.cached","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/cached.html","searchKeys":["cached","var cached: CompiledRule? = null","org.codroid.textmate.rule.RegExpSourceList.cached"]},{"name":"var endIndex: Int","description":"org.codroid.textmate.Token.endIndex","location":"codroid-textmate/org.codroid.textmate/-token/end-index.html","searchKeys":["endIndex","var endIndex: Int","org.codroid.textmate.Token.endIndex"]},{"name":"var enterPos: Int","description":"org.codroid.textmate.grammar.StateStack.enterPos","location":"codroid-textmate/org.codroid.textmate.grammar/-state-stack/enter-pos.html","searchKeys":["enterPos","var enterPos: Int","org.codroid.textmate.grammar.StateStack.enterPos"]},{"name":"var fontStyle: FontStyle","description":"org.codroid.textmate.theme.ThemeTrieElementRule.fontStyle","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/font-style.html","searchKeys":["fontStyle","var fontStyle: FontStyle","org.codroid.textmate.theme.ThemeTrieElementRule.fontStyle"]},{"name":"var fontStyle: String? = null","description":"org.codroid.textmate.theme.Setting.fontStyle","location":"codroid-textmate/org.codroid.textmate.theme/-setting/font-style.html","searchKeys":["fontStyle","var fontStyle: String? = null","org.codroid.textmate.theme.Setting.fontStyle"]},{"name":"var foreground: String? = null","description":"org.codroid.textmate.theme.Setting.foreground","location":"codroid-textmate/org.codroid.textmate.theme/-setting/foreground.html","searchKeys":["foreground","var foreground: String? = null","org.codroid.textmate.theme.Setting.foreground"]},{"name":"var foreground: UInt","description":"org.codroid.textmate.theme.ThemeTrieElementRule.foreground","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/foreground.html","searchKeys":["foreground","var foreground: UInt","org.codroid.textmate.theme.ThemeTrieElementRule.foreground"]},{"name":"var hasAnchors: Boolean = false","description":"org.codroid.textmate.rule.RegExpSourceList.hasAnchors","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source-list/has-anchors.html","searchKeys":["hasAnchors","var hasAnchors: Boolean = false","org.codroid.textmate.rule.RegExpSourceList.hasAnchors"]},{"name":"var id: Int","description":"org.codroid.textmate.rule.RuleId.id","location":"codroid-textmate/org.codroid.textmate.rule/-rule-id/id.html","searchKeys":["id","var id: Int","org.codroid.textmate.rule.RuleId.id"]},{"name":"var id: RuleId? = null","description":"org.codroid.textmate.grammar.RawRule.id","location":"codroid-textmate/org.codroid.textmate.grammar/-raw-rule/id.html","searchKeys":["id","var id: RuleId? = null","org.codroid.textmate.grammar.RawRule.id"]},{"name":"var indexInScanner: Int","description":"org.codroid.textmate.regex.MatchResult.indexInScanner","location":"codroid-textmate/org.codroid.textmate.regex/-match-result/index-in-scanner.html","searchKeys":["indexInScanner","var indexInScanner: Int","org.codroid.textmate.regex.MatchResult.indexInScanner"]},{"name":"var indexInScanner: Int","description":"org.codroid.textmate.regex.StandardResult.indexInScanner","location":"codroid-textmate/org.codroid.textmate.regex/-standard-result/index-in-scanner.html","searchKeys":["indexInScanner","var indexInScanner: Int","org.codroid.textmate.regex.StandardResult.indexInScanner"]},{"name":"var name: String? = null","description":"org.codroid.textmate.theme.RawTheme.name","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme/name.html","searchKeys":["name","var name: String? = null","org.codroid.textmate.theme.RawTheme.name"]},{"name":"var name: String? = null","description":"org.codroid.textmate.theme.RawThemeSetting.name","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting/name.html","searchKeys":["name","var name: String? = null","org.codroid.textmate.theme.RawThemeSetting.name"]},{"name":"var qq: MutableList<AbsoluteRuleReference>","description":"org.codroid.textmate.grammar.ScopeDependencyProcessor.qq","location":"codroid-textmate/org.codroid.textmate.grammar/-scope-dependency-processor/qq.html","searchKeys":["qq","var qq: MutableList<AbsoluteRuleReference>","org.codroid.textmate.grammar.ScopeDependencyProcessor.qq"]},{"name":"var ruleId: RuleId","description":"org.codroid.textmate.rule.RegExpSource.ruleId","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/rule-id.html","searchKeys":["ruleId","var ruleId: RuleId","org.codroid.textmate.rule.RegExpSource.ruleId"]},{"name":"var scope: Array<ScopePattern>? = null","description":"org.codroid.textmate.theme.RawThemeSetting.scope","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting/scope.html","searchKeys":["scope","var scope: Array<ScopePattern>? = null","org.codroid.textmate.theme.RawThemeSetting.scope"]},{"name":"var scopeDepth: Int","description":"org.codroid.textmate.theme.ThemeTrieElementRule.scopeDepth","location":"codroid-textmate/org.codroid.textmate.theme/-theme-trie-element-rule/scope-depth.html","searchKeys":["scopeDepth","var scopeDepth: Int","org.codroid.textmate.theme.ThemeTrieElementRule.scopeDepth"]},{"name":"var settings: Array<RawThemeSetting>? = null","description":"org.codroid.textmate.theme.RawTheme.settings","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme/settings.html","searchKeys":["settings","var settings: Array<RawThemeSetting>? = null","org.codroid.textmate.theme.RawTheme.settings"]},{"name":"var settings: Setting? = null","description":"org.codroid.textmate.theme.RawThemeSetting.settings","location":"codroid-textmate/org.codroid.textmate.theme/-raw-theme-setting/settings.html","searchKeys":["settings","var settings: Setting? = null","org.codroid.textmate.theme.RawThemeSetting.settings"]},{"name":"var source: String","description":"org.codroid.textmate.rule.RegExpSource.source","location":"codroid-textmate/org.codroid.textmate.rule/-reg-exp-source/source.html","searchKeys":["source","var source: String","org.codroid.textmate.rule.RegExpSource.source"]},{"name":"var startIndex: Int","description":"org.codroid.textmate.Token.startIndex","location":"codroid-textmate/org.codroid.textmate/-token/start-index.html","searchKeys":["startIndex","var startIndex: Int","org.codroid.textmate.Token.startIndex"]},{"name":"var theme: Theme","description":"org.codroid.textmate.SyncRegistry.theme","location":"codroid-textmate/org.codroid.textmate/-sync-registry/theme.html","searchKeys":["theme","var theme: Theme","org.codroid.textmate.SyncRegistry.theme"]}]
